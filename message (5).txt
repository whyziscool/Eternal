--[[
    !!!SOURCE CODE LEAK!!!

             _nnnn_                      
        dGGGGMMb     ,"""""""""""""""""".
       @p~qp~~qMb    | Get Doxxed Nigga |
       M|@||@) M|   _;..................'
       @,----.JM| -'
      JS^\__/  qKL
     dZP        qKRb
    dZP          qKKb
   fZP            SMMb
   HZM            MMMM
   FqM            MMMM
 __| ".        |\dS"qML
 |    `.       | `' \Zq
_)      \.___.,|     .'
\____   )MMMMMM|   .'
     `-'       `--' 
                                                                            
    [ CREDITS ]                                                                
    â•”â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•—
    â•‘ Main: Derek Lippe                                   â•‘
    â•šâ•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•â•

    Cleaned version of the script. All telementry has been removed.
    Archived links incase of deletion.
    
    https://raw.githubusercontent.com/Ethereal58/Ethereal/main/Fonts/Proggy
    > https://archive.is/aWR8K
    > https://web.archive.org/web/20240922012649/https://raw.githubusercontent.com/Ethereal58/Ethereal/main/Fonts/Proggy


    https://raw.githubusercontent.com/Ethereal58/Ethereal/main/Fonts/smallest_pixel
    > https://archive.ph/zF1k2
    > https://web.archive.org/web/20240922012812/https://raw.githubusercontent.com/Ethereal58/Ethereal/main/Fonts/smallest_pixel

    "The only thing I wish I had was better tint. I just want a nice truck, get some nice tint on it too so no one can see in, and bring my girlfriend for 'rides.' That's like the dream. You'll get it, bro, when you find a girl you like. 
    Trust me, you'll get it. Yeah, it is weird, but you're not thinking of it in that moment," stated Derek Lippe.


    ~~ your friend, panicspace & spetsnazcall â¤ï¸â¤ï¸
]]

--[[
    for Index, Value in next, getgc(true) do 
    local RandomEntity = workspace.charColliders:GetChildren()[1]
    if type(Value) == "table" and type(rawget(Value, RandomEntity.Name)) == "table" then 
        local Player = rawget(Value, RandomEntity.Name) 
        if rawget(Player, "colliderModel") then 
            -- entity list
        end
    end
end 
]]
local IsStudio   = false
local GameName   = "Universal"; 
local GameId     = game.GameId;

--// For studio / limited compatibility executors
cloneref = cloneref ~= nil and cloneref or function(f) return f end; getgenv = getgenv ~= nil and getgenv or function() return _G end; 

local Games = {
    ["Eastern War"]         = 5753515186;
    ["Scorched Earth"]      = 4785126950;
    ["Frontlines"]          = 2132866904;
    ["Games Unite"]         = 992334288;
    ["State Of Anarchy"]    = 595270616;
    ["Aftermath"]           = 5286749994;
    ["Project Delta"]       = 2862098693;
    ["Blackout"]            = 3326279937;
    ["Criminality"]         = 1494262959;
    ["Fallen"]              = 3747388906;
    ["Blood and Iron"]      = 16876831;
    ["Gunfight Arena"]      = 5012222382;
    --["Apocalypse Rising 2"] = 358276974;
    ["The Streets"]         = 174268353;
    ["Counter Blox"]        = 115797356;
    ["Arsenal"]             = 111958650;
    ["Korrupt Zombies"]     = 3956073837;
    ["Lone Survival"]       = 4712109542;
    ["Combat Warriors"]     = 1390601379;
};

for Index, Value in next, Games do 
    if Value == GameId then 
        GameName = Index;
    end;
end;

if GameId == 41210807 then 
    GameName = "Aftermath" 
end

do --// Obfuscated check
    if not LPH_OBFUSCATED then
        LPH_JIT = function(...) return ... end
        LPH_JIT_MAX = function(...) return ... end
        LPH_NO_VIRTUALIZE = function(...) return ... end
        LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
        LPH_ENCSTR = function(...) return ... end
        LPH_ENCNUM = function(...) return ... end
        LPH_CRASH = function() return print(debug.traceback()) end

        LRM_IsUserPremium = false 
        LRM_LinkedDiscordID = "Developer"
        LRM_ScriptName = "dev"
        LRM_TotalExecutions = 0
        LRM_SecondsLeft = 999999
        LRM_UserNote = "hello";

        if not gethui then 
            gethui = function() return game.Players.LocalPlayer.PlayerGui end; 
            IsStudio = true 
        end
    end;
end;

do --// Directories
    if not IsStudio then --// im only checking it because i did a lot of this work in studio
        if not isfolder("Ethereal") then 
            makefolder("Ethereal");
        end;

        if not isfolder("Ethereal/Configs") then 
            makefolder("Ethereal/Configs");
        end;

        if not isfolder("Ethereal/Plugins") then 
            makefolder("Ethereal/Plugins");
        end;

        if not isfile("Ethereal/Hitmarkers") then 
            makefolder("Ethereal/Hitmarkers");
        end;
    end;
end;

do --// Adonis Bypass (Eastern War, Criminality)
    do --// Eastern
        if GameName == "Eastern War" then 
            local DTC
            local Killed
            for Index, Value in next, getgc(true) do 
                if type(Value) == "table" then 
                    local Detected = rawget(Value, "Detected") 
                    local Kill = rawget(Value, "Kill") 
            
            
                    if type(Detected) == "function" and not DTC then 
                        DTC = Detected 
            
                        local Old; Old = hookfunction(Detected, function(...) 
                            return true
                        end)
                    end
            
                    if rawget(Value, "Variables") and rawget(Value, "Process") and typeof(Kill) == "function" then 
                        Killed = Kill 
            
                        local Old; Old = hookfunction(Kill, function(...) 
                        
                        end)
                    end 
                end
            end
            
            local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...) 
                local LevelOrFunc, Info = ... 
                if DTC and LevelOrFunc == DTC then 
            
                    return coroutine.yield(coroutine.running())
                end
                return Old(...)
            end))
        end;
    end
end

--// This variable is used to track time since execution; I use it to check load times typically;
local Init = tick();

--// Services
local ReplicatedFirst   = cloneref(game:GetService("ReplicatedFirst"));
local ReplicatedStorage = cloneref(game:GetService("ReplicatedStorage"));
local Lighting          = cloneref(game:GetService("Lighting"));
local RunService        = cloneref(game:GetService("RunService"));
local TweenService      = cloneref(game:GetService("TweenService"));
local TextService 		= cloneref(game:GetService("TextService"));
local UserInputService  = cloneref(game:GetService("UserInputService"));
local Players 			= cloneref(game:GetService("Players"));
local HttpService       = cloneref(game:GetService("HttpService"));
local LogService        = cloneref(game:GetService("LogService"));
local ScriptContext     = cloneref(game:GetService("ScriptContext"));
local TeleportService   = cloneref(game:GetService("TeleportService"));
local SoundService      = cloneref(game:GetService("SoundService"));
local ProxPromptService = cloneref(game:GetService("ProximityPromptService"));
local CoreGui           = cloneref(game:GetService("CoreGui"));
local Stats             = cloneref(game:GetService("Stats"));
local ContentProvider   = cloneref(game:GetService("ContentProvider"));
local Workspace         = cloneref(game:GetService("Workspace"));

--// Client Variables
local Client                      = Players.LocalPlayer;
local Mouse                       = Client:GetMouse();
local Camera                      = Workspace.CurrentCamera;
local OriginalTransitionDuration  = 0; --// Used for returning to original transition duration; Visuals:UpdateFOVColor()
local OldFieldOfView              = Camera.FieldOfView;

local RayParams  = RaycastParams.new(); do
	RayParams.FilterType = Enum.RaycastFilterType.Blacklist;
	RayParams.FilterDescendantsInstances = {Camera, Client.Character};
	RayParams.IgnoreWater = true;

    if GameName == "Blackout" then 
        RayParams.FilterDescendantsInstances = {Camera, Client.Character, Workspace.Debris};
    end;

    if GameName == "State Of Anarchy" then 
        RayParams.FilterDescendantsInstances = {Camera, Client.Character, Workspace.Ignore};
    end

    if GameName == "Scorched Earth" then 
        for Index, Value in next, getconnections(game:GetService("ScriptContext").Error) do 
            Value:Disable() 
        end 

        RayParams.FilterDescendantsInstances = {Camera, Client.Character, Workspace.ignore, Workspace.charColliders};
    end
end;

local Headshot, Bodyshot; do 
    if GameName ~= "Fallen" and GameName ~= "Universal" and GameName ~= "Deadline" then 
        Headshot, Bodyshot = Instance.new("Sound", gethui()), Instance.new("Sound", gethui());
    end;
end;

do --// Font
    if not IsStudio then
        do --// Deleting files
            if isfile and isfile("proggy_font.font") then 
                delfile("proggy_font.font")
            end;

            if isfile and isfile("proggy-bold-font.ttf") then 
                delfile("proggy-bold-font.ttf");
            end;

            if isfile and isfile("proggy_bold_font.font") then 
                delfile("proggy_bold_font.font")
            end;

            if isfile and isfile("proggy-font.ttf") then 
                delfile("proggy-font.ttf");
            end;

            if isfile and isfile("monaco_font.font") then 
                delfile("monaco_font.font")
            end;

            if isfile and isfile("monaco-font.ttf") then 
                delfile("monaco-font.ttf");
            end;

            if isfile and isfile("verdana_font.font") then 
                delfile("verdana_font.font")
            end;

            if isfile and isfile("verdana-font.ttf") then 
                delfile("verdana-font.ttf");
            end;

            if isfile and isfile("courier_font.font") then 
                delfile("courier_font.font")
            end;

            if isfile and isfile("courier-font.ttf") then 
                delfile("courier-font.ttf");
            end;

            if isfile and isfile("terminus_font.font") then 
                delfile("terminus_font.font")
            end;

            if isfile and isfile("terminus-font.ttf") then 
                delfile("terminus-font.ttf");
            end;

            if isfile and isfile("small_font.font") then 
                delfile("small_font.font");
            end;

            
            if isfile and isfile("smallest-pixel.ttf") then 
                delfile("smallest-pixel.ttf")
            end;

            if isfile and isfile("pixel_font.font") then 
                delfile("pixel_font.font")
            end;

            if isfile and isfile("pixel-font.ttf") then 
                delfile("pixel-font.ttf");
            end;

        end;

        do --// Font Register/Get

            do --// Functions
                local assetloader = getcustomasset;
                Font = setreadonly(Font, false);
                function Font:Register(Name, Weight, Style, Asset)
                    if not isfile(Asset.Id) then
                        writefile(Asset.Id, Asset.Font);
                    end;

                    local Data = {
                        name = Name,
                        faces = {{
                            name = "Regular",
                            weight = Weight,
                            style = Style,
                            assetId = getcustomasset(Asset.Id);
                        }}
                    };
                    
                    writefile(Name .. ".font", HttpService:JSONEncode(Data));
                    return getcustomasset(Name .. ".font");
                end;
                
                function Font:GetRegistry(Name)
                    if isfile(Name .. ".font") then
                        return assetloader(Name .. ".font");
                    end;
                end;
                Font = setreadonly(Font, true)
            end;
            do --// Fonts Registration
                Font:Register("pixel_font", 200, "normal", {Id = "pixel-font.ttf", Font = crypt.base64.decode(
                    ""
                )});
                Font:Register("proggy_font", 400, "normal", {Id = "proggy-font.ttf", Font = crypt.base64.decode(request({Url = "https://raw.githubusercontent.com/Ethereal58/Ethereal/main/Fonts/Proggy"}).Body)});
                Font:Register("small_font", 400, "normal", {Id = "smallest-pixel.ttf", Font = crypt.base64.decode(request({Url = "https://raw.githubusercontent.com/Ethereal58/Ethereal/main/Fonts/smallest_pixel"}).Body)});
            end; 
            
        end;

    end;
end;

--// Tables
local GameConnections = {}; 
local Connections     = {};
local Loops           = {};
local GameFramework   = {Last = tick()};
local Hooks           = {};
local Visuals         = {};
local CustomObjects   = {};
local UsableModules   = {};
local ESPConstructor  = {};

ESPConstructor.__index = ESPConstructor;

local Textures            = {
    ["Scan"] = "rbxassetid://9305457875",
    ["Scanning-hexagon"] = "rbxassetid://89067318",
    ["Hexagon"] = "rbxassetid://2930247814",
    ["Alien"] = "rbxassetid://459487304",
    ["Triangles"] = "rbxassetid://1478668577",
    ["None"] = "",
    ["Illusion"] = "rbxassetid://5841714970",
    ["Ground"] = "rbxassetid://11619804506",
    ["Lasers"] = "rbxassetid://398330154",
    ["Player"] = "rbxassetid://4504366173",
    ["Stars"] = "rbxassetid://4952604311",
    ["Lidar"] = "rbxassetid://965496575",
    ["Pixels"] = "rbxassetid://140652787",
    ["Pixels2"] = "rbxassetid://11780157037",
    ["Lidar2"] = "rbxassetid://13173535584",
    ["CityScan"] = "rbxassetid://951824492",
    ["Clouds"] = "rbxassetid://1723973648",
    ["Rainbow"] = "rbxassetid://10037165803",
    ["Scanning"] = "rbxassetid://5843010904",
    ["Groove"] = "rbxassetid://10785404176",
    ["Waves"] = "rbxassetid://6151763633",
    ["Corrupted"] = "rbxassetid://1212976946",
    ["Tiles"] = "rbxassetid://85065287",
    ["Netflix"] = "rbxassetid://8313072955",
    ["Circle"] = "rbxassetid://13996983074",
    ["Scratches"] = "rbxassetid://4952604311",
    ["Webz"] = "rbxassetid://14410238962",
    ["Pixels3"] = "rbxassetid://12561493608",
    ["Outline"] = "rbxassetid://12361388066",
    ["Webz2"] = "rbxassetid://12646281757",
    ["Outline2"] = "rbxassetid://5125811022",
};

local Keys                = {
    ["Unknown"]          = "UNK";
    ["Backspace"]        = "BACK";
    ["Tab"]              = "TAB";
    ["Clear"]            = "CLR";
    ["Return"]           = "RTN";
    ["Pause"]            = "PSE";
    ["Escape"]           = "ESC";
    ["Space"]            = "SPC";
    ["QuotedDouble"]     = '"';
    ["Hash"]             = "#";
    ["Dollar"]           = "$";
    ["Percent"]          = "%";
    ["Ampersand"]        = "&";
    ["Quote"]            = "'";
    ["LeftParenthesis"]  = "(";
    ["RightParenthesis"] = " )";
    ["Asterisk"]         = "*";
    ["Plus"]             = "+";
    ["Comma"]            = ",";
    ["Minus"]            = "-";
    ["Period"]           = ".";
    ["Slash"]            = "`";
    ["Three"]            = "THR";
    ["Seven"]            = "SEV";
    ["Eight"]            = "EGHT";
    ["Colon"]            = ":";
    ["Semicolon"]        = ";";
    ["LessThan"]         = "<";
    ["GreaterThan"]      = ">";
    ["Question"]         = "?";
    ["Equals"]           = "=";
    ["At"]               = "@";
    ["LeftBracket"]      = "LB";
    ["RightBracket"]     = "RB";
    ["BackSlash"]        = "BSL";
    ["Caret"]            = "^";
    ["Underscore"]       = "_";
    ["Backquote"]        = "`";
    ["LeftCurly"]        = "{";
    ["Pipe"]             = "|";
    ["RightCurly"]       = "}";
    ["Tilde"]            = "~";
    ["Delete"]           = "DEL";
    ["End"]              = "END";
    ["KeypadZero"]       = "NP0";
    ["KeypadOne"]        = "NP1";
    ["KeypadTwo"]        = "NP2";
    ["KeypadThree"]      = "NP3";
    ["KeypadFour"]       = "NP4";
    ["KeypadFive"]       = "NP5";
    ["KeypadSix"]        = "NP6";
    ["KeypadSeven"]      = "NP7";
    ["KeypadEight"]      = "NP8";
    ["KeypadNine"]       = "NP9";
    ["KeypadPeriod"]     = "NPP";
    ["KeypadDivide"]     = "NPD";
    ["KeypadMultiply"]   = "NPM";
    ["KeypadMinus"]      = "NPM";
    ["KeypadPlus"]       = "NPP";
    ["KeypadEnter"]      = "NPE";
    ["KeypadEquals"]     = "NPE";

    ["Insert"]           = "INS";
    ["Home"]             = "HOME";
    ["PageUp"]           = "PGUP";
    ["PageDown"]         = "PGD";
    ["RightShift"]       = "RSHIFT";
    ["LeftShift"]        = "LSHIFT";
    ["RightControl"]     = "CTRL";
    ["LeftControl"]      = "CTRL";
    ["LeftAlt"]          = "ALT";
    ["RightAlt"]         = "ALT";
}; 

local PreferredDistances  = {
    ["Eastern War"]         = "studs";
    ["Scorched Earth"]      = "studs";
    ["Bad Business"]        = "studs";
    ["Combat Warriors"]     = "studs";
    ["State Of Anarchy"]    = "studs";
    ["Frontlines"]          = "studs";
    ["Games Unite"]         = "studs";
    ["State Of Anarchy"]    = "studs";
    ["Lone Survival"]       = "studs";
    ["Aftermath"]           = "studs";
    ["Universal"]           = "studs";
    ["Gunfight Arena"]      = "studs";
    ["Project Delta"]       = "meters";
    ["Fallen"]              = "studs";
    ["Blackout"]            = "studs";
    ["Deadline"]            = "studs";
    ["Apocalypse Rising 2"] = "studs";
    ["Criminality"]         = "studs";
    ["Blood and Iron"]      = "studs";
    ["Korrupt Zombies"]     = "studs";
    ["The Streets"]         = "studs";
    ["Counter Blox"]        = "studs";
    ["Arsenal"]             = "studs";
};

local DistanceConversions = {
    ["studs"]  = {Conversion = 1, Suffix = "s"};
    ["meters"] = {Conversion = 3, Suffix = "m"};
    ["feet"]   = {Conversion = 3.2808, Suffix = "ft"};
    ["yards"]  = {conversion = 1.09361, Suffix = "yd"};
};

local PartSizes           = {
    ["Head"] = Vector3.new(2, 1, 1),
    ["Torso"] = Vector3.new(2, 2, 1),
    ["Left Arm"] = Vector3.new(1, 2, 1),
    ["Right Arm"] = Vector3.new(1, 2, 1),
    ["Left Leg"] = Vector3.new(1, 2, 1),
    ["Right Leg"] = Vector3.new(1, 2, 1)
};

local WeaponIcons         = {
    ["SABRE"]          = "rbxassetid://18398208185";
    ["MUSKET"]         = "rbxassetid://18398204800";
    ["ERADICATOR"]     = "rbxassetid://18398202965";
    ["ERADICATOR II"]  = "rbxassetid://18398202965";
    ["R700"]           = "rbxassetid://18306916832";
    ["MK23"]           = "rbxassetid://18306918089";
    ["HL-MK2"]         = "rbxassetid://16600914824";
    ["SBL-MK2"]        = "rbxassetid://16600913093";
    ["SBL-MK3"]        = "rbxassetid://16600910826";
    ["SBL-MK1"]        = "rbxassetid://16600907792";
    ["UMP-45"]         = "rbxassetid://16453257299";
    ["METAL-BAT"]      = "rbxassetid://16453237275";
    ["FIRE-AXE"]       = "rbxassetid://16453246633";
    ["GOLF-CLUB"]      = "rbxassetid://16453248110";
    ["WRENCH"]         = "rbxassetid://16453258223";
    ["BALISONG"]       = "rbxassetid://16453236126";
    ["SLAYERSWORD"]    = "rbxassetid://16453253528";
    ["FALLEN-SWORD"]   = "rbxassetid://16453245012";
    ["LONGSWORD"]      = "rbxassetid://16453245012";
    ["_FALLENBLADE"]   = "rbxassetid://16453245012";
    ["NUNCHUCKS"]      = "rbxassetid://16453249948";
    ["SAVAGE"]         = "rbxassetid://16453252231";
    ["TAIGA"]          = "rbxassetid://16453254534";
    ["CHAINSAW"]       = "rbxassetid://16453241880";
    ["CURSEDDAGGER"]   = "rbxassetid://16453243985";
    ["BATON"]          = "rbxassetid://16453238973";
    ["BBATON"]         = "rbxassetid://16453238973";
    ["BAT"]            = "rbxassetid://16453237275";
    ["CROWBAR"]        = "rbxassetid://16453242964";
    ["TEC-9"]          = "rbxassetid://16453255860";
    ["SHOVEL"]         = "rbxassetid://16453793023";
    ["HAMMER"]         = "rbxassetid://16453792211";

    ["UTS-15"]         = "rbxassetid://16057580424";
    ["TOMMY"]          = "rbxassetid://16057579477";
    ["TOMMY-GUN"]      = "rbxassetid://16057579477";
    ["SCOUT"]          = "rbxassetid://16057578067";
    ["SAWEDOFF"]       = "rbxassetid://16057576404";
    ["SAWED-OFF"]      = "rbxassetid://16057576404";
    ["SAWNOFF"]        = "rbxassetid://16057576404";
    ["SAWN-OFF"]       = "rbxassetid://16057576404";
    ["MP7"]            = "rbxassetid://16057575232";
    ["MARE"]           = "rbxassetid://16057574228";
    ["MAGNUM"]         = "rbxassetid://16057573220";
    ["MACHETE"]        = "rbxassetid://16057572342";
    ["M320"]           = "rbxassetid://16057571337";
    ["M60"]            = "rbxassetid://16057570317";
    ["ITHACA"]         = "rbxassetid://16057569300";
    ["ITHACA-37"]      = "rbxassetid://16057569300";
    ["HAWKEYE"]        = "rbxassetid://16057568173";
    ["BFG50"]          = "rbxassetid://16057562279";
    ["BFG"]            = "rbxassetid://16057562279";
    ["BFG-50"]         = "rbxassetid://16057562279";
    ["BFG-1"]         = "rbxassetid://16057562279";

    ["M24"]            = "rbxassetid://16057225098";
    ["GL06"]           = "rbxassetid://16057226421";
    ["GL-06"]          = "rbxassetid://16057226421";
    ["MAC10"]          = "rbxassetid://16057228244";
    ["MAC-10"]         = "rbxassetid://16057228244";
    ["MAC11"]          = "rbxassetid://16057228244";
    ["MAC 11"]         = "rbxassetid://16057228244";
    ["SPAS12"]         = "rbxassetid://16057229801";
    ["SPAS"]           = "rbxassetid://16057229801";
    ["UZI"]            = "rbxassetid://16057231171";
    ["SAR"]            = "rbxassetid://16057232685";
    ["HANDMADE AK"]    = "rbxassetid://16057233966";
    ["ZENITCO AK"]     = "rbxassetid://16057235588";
    ["SPAS 12"]        = "rbxassetid://16057229801";
    ["MAC 10"]         = "rbxassietd://16057228244";
    ["CROSSBOW"]       = "rbxassetid://16057223969";
    ["CUTLASS"]        = "rbxassetid://15145588731";
    ["AI4"]            = "rbxassetid://15135074460";
    ["AI2"]            = "rbxassetid://15135074460";
    ["BANDAGE"]        = "rbxassetid://15135072205";
    ["AA2"]            = "rbxassetid://15135070561";
    ["WOUNDDRESSING"]  = "rbxassetid://15135072205";
    ["LIGHTER"]        = "rbxassetid://15134129301";
    ["GOLDENLIGHTER"]  = "rbxassetid://15134129301";
    ["M84"]            = "rbxassetid://15133286887";
    ["RGD5"]           = "rbxassetid://15133291099";

    ["F1"]             = "rbxassetid://15133288479";
    ["RGO"]            = "rbxassetid://15133289999";
    ["RGN"]            = "rbxassetid://15133289999";
    ["ANARCHYTOMAHAWK"]= "rbxassetid://15132321974";
    ["DV2"]            = "rbxassetid://15132318244";
    ["BAYONET"]        = "rbxassetid://15132318244";
    ["RAMBO"]          = "rbxassetid://15132318244";
    ["GOLDEN DV2"]     = "rbxassetid://15132318244";
    ["PLASMA NINJATO"] = "rbxassetid://15132313399";
    ["ICE AXE"]        = "rbxassetid://15132319892";
    ["ICEAXE"]         = "rbxassetid://15132319892";
    ["ICEDAGGER"]      = "rbxassetid://15132316845";
    ["KARAMBIT"]       = "rbxassetid://15132314888";
    ["M4A1"]           = "rbxassetid://16010744928";
    ["M4A1-1"]         = "rbxassetid://16010744928";

    ["M4A1-S"]         = "rbxassetid://16600641613";
    ["FN-FAL-S"]       = "rbxassetid://16600638582";
    ["MAC-10-S"]       = "rbxassetid://16600643762";
    ["G-18-X"]         = "rbxassetid://16600639884";
    ["SCAR-H-X"]       = "rbxassetid://16600647212";
    ["TOMMY-S"]        = "rbxassetid://16600648391";
    ["UZI-S"]          = "rbxassetid://16600651239";
    ["UMP-45-S"]       = "rbxassetid://16600649968";
    ["AKS-74U-X"]      = "rbxassetid://16600636969";
    ["MP7-S"]          = "rbxassetid://16600645489";

    ["AR15"]           = "rbxassetid://15132722044";
    ["M4"]             = "rbxassetid://16010744928";
    ["AKMN"]           = "rbxassetid://15134247522";
    ["AK47"]           = "rbxassetid://15134247522";
    ["AK-47"]          = "rbxassetid://15134247522";
    ["AKMI"]           = "rbxassetid://16010739382";
    ["AKM"]            = "rbxassetid://16010739382";
    ["AK74"]           = "rbxassetid://14263834351";
    ["AK12"]           = "rbxassetid://16029043870";
    ["AKS74U"]         = "rbxassetid://15134245314";
    ["AKS-74U"]        = "rbxassetid://15134245314";
    ["AK74U"]          = "rbxassetid://14263839613";
    ["TFZ98S"]         = "rbxassetid://16010752330";

    ["SAIGA12"]        = "rbxassetid://15134954196";
    ["SVD"]            = "rbxassetid://15131751887";
    ["ASVAL"]          = "rbxassetid://16010740504";
    ["MOSIN"]          = "rbxassetid://16010747400";
    ["MP5SD"]          = "rbxassetid://16010750737";
    ["MP5"]            = "rbxassetid://15571376653";
    ["GLOCK"]          = "rbxassetid://15571376124";
    ["G17"]            = "rbxassetid://15571376124";
    ["G-17"]           = "rbxassetid://15571376124";
    ["G3"]             = "rbxassetid://16010742164";
    ["DEAGLE"]         = "rbxassetid://15571372887";
    ["DESERT EAGLE"]   = "rbxassetid://15571372887";
    ["M9"]             = "rbxassetid://15571371452";
    ["M9A3"]           = "rbxassetid://15571371452";
    ["BERETTA"]        = "rbxassetid://15571371452";
    ["AWP"]            = "rbxassetid://15571370776";
    ["AWM"]            = "rbxassetid://15571370776";
    ["G18"]            = "rbxassetid://15571376124";
    ["G-18"]           = "rbxassetid://15571376124";
    ["IZH81"]          = "rbxassetid://16010743888";
    ["IZH12"]          = "rbxassetid://16010743013";
    ["SKS"]            = "rbxassetid://16010751529";
    ["TOMAHAWK"]       = "rbxassetid://15571463242";
    ["TACTICALKNIFE"]  = "rbxassetid://15571461776";
    ["TACTICAL KNIFE"] = "rbxassetid://15571461776";

    ["TAC-14"]         = "rbxassetid://15571461009";
    ["TAC14"]          = "rbxassetid://15571461009";
    ["SLEDGE"]         = "rbxassetid://15571460414";
    ["SLEDGEHAMMER"]   = "rbxassetid://15571460414";
    ["SERBU"]          = "rbxassetid://15571459878";
    ["SUPER-SHORTY"]   = "rbxassetid://15571459878";
    ["SCARH"]          = "rbxassetid://15571458948";
    ["SCAR-H"]         = "rbxassetid://15571458948";
    ["SCAR-H-1"]       = "rbxassetid://15571458948";
    ["KATANA"]         = "rbxassetid://15571458303";
    ["FNP-45"]         = "rbxassetid://15571457566";
    ["MOSSBERG 500"]   = "rbxassetid://15131758602";
    ["725"]            = "rbxassetid://16057576404";
    ["MG3"]            = "rbxassetid://14264302427";
    ["RPD"]            = "rbxassetid://14264298328";
    ["AT4"]            = "rbxassetid://14264104216";
    ["VZ61"]           = "rbxassetid://16029077541";
    ["TT33"]           = "rbxassetid://16029076040";
    ["STG44"]          = "rbxassetid://14263901605";
    ["RPK"]            = "rbxassetid://14263895964";
    ["RPG"]            = "rbxassetid://15132676121";
    ["RPG7"]           = "rbxassetid://15132676121";
    ["RPG-7"]          = "rbxassetid://15132676121";
    ["PPSH"]           = "rbxassetid://16029075001";
    ["PKM"]            = "rbxassetid://16051300262";
    ["MP443"]          = "rbxassetid://16029073381";
    ["MP40"]           = "rbxassetid://14263883187";
    ["MAKAROV"]        = "rbxassetid://16029072524";
    ["TFZ0"]           = "rbxassetid://15146652920";
    ["M1911"]          = "rbxassetid://14263873943";
    ["M249"]           = "rbxassetid://14263872160";
    ["M240"]           = "rbxassetid://14263869986";
    ["HK416"]          = "rbxassetid://15134346644";
    ["M27"]            = "rbxassetid://15134346644";
    ["M18"]            = "rbxassetid://14263866439";
    ["M16"]            = "rbxassetid://16029046069";
    ["M9"]             = "rbxassetid://14263861394";
    ["L2A3"]           = "rbxassetid://14263855011";
    ["FAL"]            = "rbxassetid://16029045136";
    ["FN-FAL"]         = "rbxassetid://16029045136";
    ["DPM"]            = "rbxassetid://14263843261";
};

local HitmarkerSounds     = {
    ["TF2"]       = "rbxassetid://8255306220",
    ["Gamesense"] = "rbxassetid://4817809188",
    ["Rust"]      = "rbxassetid://1255040462",
    ["Neverlose"] = "rbxassetid://8726881116",
    ["Bubble"]    = "rbxassetid://198598793",
    ["Quake"]     = "rbxassetid://1455817260",
    ["Among-Us"]  = "rbxassetid://7227567562",
    ["Ding"]      = "rbxassetid://2868331684",
    ["Minecraft"] = "rbxassetid://6361963422",
    ["Blackout"]  = "rbxassetid://3748776946",
    ["Osu!"]      = "rbxassetid://7151989073",
};

local ESPIcons            = {
    ["Mine"]     = "rbxassetid://16050468622";
    ["Turret"]   = "rbxassetid://16050140586";
    ["Claymore"] = "rbxassetid://16050469983";
    ["Grenade"]  = "rbxassetid://16042089544";
};

local Library             = {
	Windows = {};
	Flags = {};
    CurrentDropdown = nil;
    CurrentColorpicker = nil;
    Theme = { --// Default Library.Theme
        --// Orange Colors
        --Accent = Color3.fromRGB(255, 122, 0),
        --GradiantContrast2 = Color3.fromRGB(200, 80, 0),
        --GradiantContrast = Color3.fromRGB(200, 80, 0),

        GradiantContrast2 = Color3.fromRGB(70, 69, 195),
        GradiantContrast = Color3.fromRGB(13, 34, 71),
        
        DefGradiantContrast2 = Color3.fromRGB(70, 69, 195),
        DefGradiantContrast = Color3.fromRGB(13, 34, 71),

        Border = Color3.fromRGB(0, 0, 0),
        VeryDarkContrast = Color3.fromRGB(14, 14, 14),

        Accent = Color3.fromRGB(120, 119, 255),
        DefaultAccent = Color3.fromRGB(120, 119, 255),
        
        DarkContrast = Color3.fromRGB(16, 16, 16),
        MedianContrast = Color3.fromRGB(18, 18, 18),
        LightContrast = Color3.fromRGB(37, 37, 37),
        ElementOff = Color3.fromRGB(120, 120, 120),
        ElementOn = Color3.fromRGB(255, 255, 255),

        RiskyOff = Color3.fromRGB(175, 0, 0),
        RiskyOn = Color3.fromRGB(255, 0, 0),
    };

    MenuFont = not IsStudio and Font.new(Font:GetRegistry("pixel_font")) or Font.new("rbxassetid://11702779409", Enum.FontWeight.Medium);
    SmallFont = not IsStudio and Font.new(Font:GetRegistry("small_font")) or Font.new("rbxassetid://11702779409", Enum.FontWeight.Medium);
    TextSize = not IsStudio and 10.00 or 13;
    SmallSize = not IsStudio and 9.00 or 13;
    Config = "None";
};

local Utility             = {
    Velocity = 0;
};

local Combat              = {
    Target = nil,
    TargetPart = nil,
    TargetName = nil,
    Friendlies = {};
    LastCurvedTarget = 0;
    LastCurvePoint = 0;
    IsMouse2Down = false;
};

local Skyboxes            = {
    --
};

local EasingStyle         = {
	["Linear"] = {
		["In"] = function(Delta)
			return Delta
		end,

		["Out"] = function(Delta)
			return Delta
		end,

		["InOut"] = function(Delta)
			return Delta
		end
	},

	["Cubic"] = {
		["In"] = function(Delta)
			return Delta^3
		end,

		["Out"] = function(Delta)
			return (Delta - 1)^3 + 1
		end,

		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return (4 * Delta)^3
			else
				return (4 * (Delta - 1))^3 + 1
			end
 		end
	},
	["Quad"] = {
		["In"] = function(Delta)
			return Delta^2
		end,

		["Out"] = function(Delta)
			return -(Delta - 1)^2 + 1
		end,

		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return (2 * Delta)^2
			else
				return (-2 * (Delta - 1))^2 + 1
			end
		end
	},
	["Quart"] = {
		["In"] = function(Delta)
			return Delta^4
		end,

		["Out"] = function(Delta)
			return -(Delta - 1)^4 + 1
		end,

		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return (8 * Delta)^4
			else
				return (-8 * (Delta - 1))^4 + 1
			end
		end
	},
	["Quint"] = {
		["In"] = function(Delta)
			return Delta^5
		end,
		["Out"] = function(Delta)
			return (Delta - 1)^5 + 1
		end,
		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return (16 * Delta)^5
			else
				return (16 * (Delta - 1))^5 + 1
			end
		end
	},
	["Sine"] = {
		["In"] = function(Delta)
			return math.sin(math.pi / 2 * Delta - math.pi / 2)
		end,

		["Out"] = function(Delta)
			return math.sin(math.pi / 2 * Delta)
		end,

		["InOut"] = function(Delta)
			return 0.5 * math.sin(math.pi * Delta - math.pi / 2) + 0.5
		end
	},
	["Exponential"] = {
		["In"] = function(Delta)
			return 2^(10 * Delta - 10) - 0.001
		end,
		["Out"] = function(Delta)
			return 1.001 * -2^(-10 * Delta) + 1
		end,
		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return 0.5 * 2^(20 * Delta - 10) - 0.0005
			else
				return 0.50025 * -2^(-20 * Delta + 10) + 1
			end
		end
	},
	["Back"] = {
		["In"] = function(Delta)
			return Delta^2 * (Delta * (1.70158 + 1) - 1.70158)
		end,
		["Out"] = function(Delta)
			return (Delta - 1)^2 * ((Delta - 1) * (1.70158 + 1) + 1.70158) + 1
		end,
		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return (2 * Delta * Delta) * ((2 * Delta) * (2.5949095 + 1) - 2.5949095)
			else
				return 0.5 * ((Delta * 2) - 2)^2 * ((Delta * 2 - 2) * (2.5949095 + 1) + 2.5949095) + 1
			end
		end
	},
	["Bounce"] = {
		["In"] = function(Delta)
			if Delta <= 0.25 / 2.75 then
				return -7.5625 * (1 - Delta - 2.625 / 2.75)^2 + 0.015625
			elseif Delta <= 0.75 / 2.75 then
				return -7.5625 * (1 - Delta - 2.25 / 2.75)^2 + 0.0625
			elseif Delta <= 1.75 / 2.75 then
				return -7.5625 * (1 - Delta - 1.5 / 2.75)^2 + 0.25
			else
				return 1 - 7.5625 * (1 - Delta)^2
			end
		end,
		["Out"] = function(Delta)
			if Delta <= 1 / 2.75 then
				return 7.5625 * (Delta * Delta)
			elseif Delta <= 2 / 2.75 then
				return 7.5625 * (Delta - 1.5 / 2.75)^2 + 0.75
			elseif Delta <= 2.5 / 2.75 then
				return 7.5625 * (Delta - 2.25 / 2.75)^2 + 0.9375
			else
				return 7.5625 * (Delta - 2.625 / 2.75)^2 + 0.984375
			end
		end,
		["InOut"] = function(Delta)
			if Delta <= 0.125 / 2.75 then
				return 0.5 * (-7.5625 * (1 - Delta * 2 - 2.625 / 2.75)^2 + 0.015625)
			elseif Delta <= 0.375 / 2.75 then
				return 0.5 * (-7.5625 * (1 - Delta * 2 - 2.25 / 2.75)^2 + 0.0625)
			elseif Delta <= 0.875 / 2.75 then
				return 0.5 * (-7.5625 * (1 - Delta * 2 - 1.5 / 2.75)^2 + 0.25)
			elseif Delta <= 0.5 then
				return 0.5 * (1 - 7.5625 * (1 - Delta * 2)^2)
			elseif Delta <= 1.875 / 2.75 then
				return 0.5 + 3.78125 * (2 * Delta - 1)^2
			elseif Delta <= 2.375 / 2.75 then
				return 3.78125 * (2 * Delta - 4.25 / 2.75)^2 + 0.875
			elseif Delta <= 2.625 / 2.75 then
				return 3.78125 * (2 * Delta - 5 / 2.75)^2 + 0.96875
			else
				return 3.78125 * (2 * Delta - 5.375 / 2.75)^2 + 0.9921875
			end
		end
	},
	["Elastic"] = {
		["In"] = function(Delta)
			return -2^(10 * (Delta - 1)) * math.sin(math.pi * 2 * (Delta - 1 - 0.3 / 4) / 0.3)
		end,

		["Out"] = function(Delta)
			return 2^(-10 * Delta) * math.sin(math.pi * 2 * (Delta - 0.3 / 4) / 0.3) + 1
		end,

		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return -0.5 * 2^(20 * Delta - 10) * math.sin(math.pi * 2 * (Delta * 2 - 1.1125) / 0.45)
			else
				return 0.5 * 2^(-20 * Delta + 10) * math.sin(math.pi * 2 * (Delta * 2 - 1.1125) / 0.45) + 1
			end
		end
	},
	["Circular"] = {
		["In"] = function(Delta)
			return -math.sqrt(1 - Delta^2) + 1
		end,

		["Out"] = function(Delta)
			return math.sqrt(-(Delta - 1)^2 + 1)
		end,

		["InOut"] = function(Delta)
			if Delta <= 0.5 then
				return -math.sqrt(-Delta^2 + 0.25) + 0.5
			else
				return math.sqrt(-(Delta - 1)^2 + 0.25) + 0.5
			end
		end
	};
};

local Properties          = {
    Lighting = {

    };
    Camera = {
        FieldOfView = Camera.FieldOfView;
    };

    Terrain = {

    };
};

local Chatbot             = {
    --
};


do --// Custom Hitsounds 
    if not IsStudio then 
        LPH_NO_VIRTUALIZE(function()
            local SIGMA = ""

            local Tarkov = ""

            writefile("Ethereal/Hitmarkers/TARKOV.mp3", crypt.base64.decode(Tarkov))
            writefile("Ethereal/Hitmarkers/SIGMA.mp3", crypt.base64.decode(SIGMA)) 

            HitmarkerSounds["SIGMA"] = getcustomasset("Ethereal/Hitmarkers/SIGMA.mp3")
            HitmarkerSounds["Tarkov"] = getcustomasset("Ethereal/Hitmarkers/TARKOV.mp3")
        end)();
    end;
end;

do --// Lighting Properties
    Properties.Lighting["Ambient"] = Lighting.Ambient 

    local Atmosphere, Clouds = Lighting:FindFirstChildOfClass("Atmosphere"), Workspace:FindFirstChild("Terrain") and Workspace.Terrain:FindFirstChildOfClass("Clouds");
    local ColorCorrection = Lighting:FindFirstChild("ColorCorrection");

    Properties.ColorCorrection = {};
        
    Properties.Atmosphere = {};
    Properties.Clouds     = {};

    if Atmosphere then 
        for Index, Value in next, {"Haze", "Decay", "Color", "Glare"} do 
            Properties.Atmosphere[Value] = Atmosphere[Value];
        end;
    end;

    if Clouds then 
        for Index, Value in next, {"Density", "Color"} do 
            Properties.Clouds[Value] = Clouds[Value];
        end;
    end;

    if ColorCorrection then 
        Properties.ColorCorrection.TintColor = ColorCorrection.TintColor; 
        Properties.ColorCorrection.Saturation = ColorCorrection.Saturation;
    else 
        Properties.ColorCorrection.TintColor = Color3.fromRGB(255, 255, 255);
        Properties.ColorCorrection.Saturation = 1;
    end;
end;

do --// Visuals

    do --// Ticks 
        Visuals.RadarTick = tick();
    end 

    do --// Tables
        Visuals.Enemies  = {};
        Visuals.Items = {};
        Visuals.Lines = {};
        Visuals.Hitmarkers = {};
        Visuals.HitDamages = {};
        Visuals.ColorSets = {
            {Color3.fromRGB(200, 80, 0), Color3.fromRGB(120, 119, 255)}, 
            {Color3.fromRGB(50, 69, 205), Color3.fromRGB(120, 119, 255)},
            {Color3.fromRGB(100, 101, 255),  Color3.fromRGB(255, 60,1)},
        };
        
    end;

    do --// Elements
        Visuals.InfoContainer = Instance.new("ScreenGui"); do 
            Visuals.InfoContainer.Parent = gethui();
            Visuals.InfoContainer.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
        end; 

        Visuals.ESPContainer = Instance.new("ScreenGui") do 
            Visuals.ESPContainer.Parent = gethui();
            Visuals.ESPContainer.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
            Visuals.ESPContainer.IgnoreGuiInset = true;
        end;

        Visuals.RadarContainer = Instance.new("ScreenGui") do 
            Visuals.RadarContainer.Parent = gethui();
            Visuals.RadarContainer.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
            Visuals.RadarContainer.IgnoreGuiInset = true;
        end;

        Visuals.Flybar = Instance.new("Frame"); do 
            Visuals.FlyInvert = Instance.new("Frame");

            Visuals.Flybar.Parent = Visuals.InfoContainer; 
            Visuals.Flybar.Size = UDim2.new(0, 200, 0, 10);
            Visuals.Flybar.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
            Visuals.Flybar.BorderColor3 = Color3.fromRGB(0, 0, 0);
            Visuals.Flybar.Visible = false 

            Visuals.FlyInvert.Parent = Visuals.Flybar; 
            Visuals.FlyInvert.BackgroundColor3 = Color3.fromRGB(0, 255, 0);
            Visuals.FlyInvert.AnchorPoint = Vector2.new(1, 0);
            Visuals.FlyInvert.Size = UDim2.new(0, 0, 1, 0);
            Visuals.FlyInvert.BorderSizePixel = 0;
        end;

        Visuals.ManipulationBar = Instance.new("Frame"); do
            Visuals.ManipulationInvert = Instance.new("Frame")
            
            Visuals.ManipulationBar.Parent = Visuals.InfoContainer
            Visuals.ManipulationBar.Size = UDim2.new(0, 200, 0, 10)
            Visuals.ManipulationBar.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
            Visuals.ManipulationBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
            
            Visuals.ManipulationInvert.Parent = Visuals.ManipulationBar
            Visuals.ManipulationInvert.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
            Visuals.ManipulationInvert.AnchorPoint = Vector2.new(0.5, 0)
            Visuals.ManipulationInvert.Position = UDim2.new(0.5, 0, 0, 0) 
            Visuals.ManipulationInvert.Size = UDim2.new(0, 0, 1, 0) 
            Visuals.ManipulationInvert.BorderSizePixel = 0
        end;

        Visuals.SelfHighlight = Instance.new("Highlight"); do 
            Visuals.SelfHighlight.Parent = gethui();
            Visuals.SelfHighlight.Enabled = false;
        end;

        if GameName ~= "Fallen" and game.PlaceId ~= 3221241066 and game.PlaceId ~= 17772691665 then 
            Visuals.CrosshairPart = Instance.new("Part"); do 
                Visuals.CrosshairPart.CanCollide = false;
                Visuals.CrosshairPart.Transparency = 1;
                Visuals.CrosshairPart.Size = Vector3.new(1, 0.2, 1);
                Visuals.CrosshairPart.Anchored = true;
                Visuals.CrosshairPart.Parent = Camera;
                Visuals.CrosshairPart.CFrame = CFrame.new();
            end;

            Visuals.CrossAdornee = Instance.new("BoxHandleAdornment"); do 
                Visuals.CrossAdornee.Parent = Visuals.CrosshairPart;
                Visuals.CrossAdornee.Size = Visuals.CrosshairPart.Size;
                Visuals.CrossAdornee.Adornee = Visuals.CrosshairPart;
                Visuals.CrossAdornee.ZIndex = 1;
            end;
        end;


        Visuals.RadarFrame = Instance.new("Frame", Visuals.RadarContainer); do
            local RadarFrame = Visuals.RadarFrame;

            RadarFrame.Name = "RadarFrame";
            RadarFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
            RadarFrame.BackgroundTransparency = 0.750;
            RadarFrame.BorderColor3 = Color3.fromRGB(0, 0, 0);
            RadarFrame.BorderSizePixel = 0;
            RadarFrame.Position = UDim2.new(0.268262744, 0, 0.181272507, 0);
            RadarFrame.Size = UDim2.new(0, 254, 0, 254);
            RadarFrame.Selectable = true;
            RadarFrame.Active = true;
            RadarFrame.Draggable = true;
            RadarFrame.ClipsDescendants = true;
            RadarFrame.Visible = false;

            local UICorner = Instance.new("UICorner", RadarFrame);
            UICorner.CornerRadius = UDim.new(1, 0);
        end;

        Visuals.RadarClient = Instance.new("Frame", Visuals.RadarFrame); do 
            Visuals.RadarClient.Parent = Visuals.RadarFrame;
            Visuals.RadarClient.AnchorPoint = Vector2.new(0.5, 0.5);
            Visuals.RadarClient.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
            Visuals.RadarClient.BackgroundTransparency = 0;
            Visuals.RadarClient.BorderColor3 = Color3.fromRGB(0, 0, 0);
            Visuals.RadarClient.BorderSizePixel = 0;
            Visuals.RadarClient.Position = UDim2.new(0.5, 0, 0.5, 0);
            Visuals.RadarClient.Size = UDim2.new(0, 7, 0, 7);
            local UICorner = Instance.new("UICorner", Visuals.RadarClient)
            UICorner.CornerRadius = UDim.new(1, 9999)
        end;
    end

    do --// Functions
        do --// Skybox
            function Visuals:NewSky(Data)
                local Name = Data.Name;
                Skyboxes[Name] = {
                    SkyboxBk = Data.SkyboxBk;
                    SkyboxDn = Data.SkyboxDn;
                    SkyboxFt = Data.SkyboxFt;
                    SkyboxLf = Data.SkyboxLf;
                    SkyboxRt = Data.SkyboxRt;
                    SkyboxUp = Data.SkyboxUp;
                    MoonTextureId = Data.Moon or "rbxasset://sky/moon.jpg";
                    SunTextureId = Data.Sun or "rbxasset://sky/sun.jpg";
                }; 

                if Library.SkyDropdown then
                    Library.SkyDropdown.Max = Library.SkyDropdown.Max + 1
                    Library.SkyDropdown:AddOption(Name);
                end;
            end;
    
            function Visuals:SwitchSkybox(Name)
                local OldSky = Lighting:FindFirstChildOfClass("Sky");
                if OldSky then OldSky:Destroy() end;    
                
                local Sky = Instance.new("Sky", Lighting); do 
                    for Index, Value in next, Skyboxes[Name] do 
                        Sky[Index] = Value;
                    end;
                end;
            end;

            do --// Creating skys
                if Lighting:FindFirstChildOfClass("Sky") then
                    local OldSky = Lighting:FindFirstChildOfClass("Sky");
                    Visuals:NewSky({
                        Name = "Games Default Sky",
                        SkyboxBk = OldSky.SkyboxBk;
                        SkyboxDn = OldSky.SkyboxDn;
                        SkyboxFt = OldSky.SkyboxFt;
                        SkyboxLf = OldSky.SkyboxLf;
                        SkyboxRt = OldSky.SkyboxRt;
                        SkyboxUp = OldSky.SkyboxUp;
                    });
                end;

                Visuals:NewSky({
                    Name = "Sunset",
                    SkyboxBk = "rbxassetid://600830446";
                    SkyboxDn = "rbxassetid://600831635";
                    SkyboxFt = "rbxassetid://600832720";
                    SkyboxLf = "rbxassetid://600886090";
                    SkyboxRt = "rbxassetid://600833862";
                    SkyboxUp = "rbxassetid://600835177";
                });

                Visuals:NewSky({
                    Name = "Arctic",
                    SkyboxBk = "http://www.roblox.com/asset/?id=225469390";
                    SkyboxDn = "http://www.roblox.com/asset/?id=225469395";
                    SkyboxFt = "http://www.roblox.com/asset/?id=225469403";
                    SkyboxLf = "http://www.roblox.com/asset/?id=225469450";
                    SkyboxRt = "http://www.roblox.com/asset/?id=225469471";
                    SkyboxUp = "http://www.roblox.com/asset/?id=225469481";
                });

                Visuals:NewSky({
                    Name = "Space";
                    SkyboxBk = "http://www.roblox.com/asset/?id=166509999";
                    SkyboxDn = "http://www.roblox.com/asset/?id=166510057";
                    SkyboxFt = "http://www.roblox.com/asset/?id=166510116";
                    SkyboxLf = "http://www.roblox.com/asset/?id=166510092";
                    SkyboxRt = "http://www.roblox.com/asset/?id=166510131";
                    SkyboxUp = "http://www.roblox.com/asset/?id=166510114";
                });

                Visuals:NewSky({
                    Name = "Roblox Default", 
                    SkyboxBk = "rbxasset://textures/sky/sky512_bk.tex";
                    SkyboxDn = "rbxasset://textures/sky/sky512_dn.tex";
                    SkyboxFt = "rbxasset://textures/sky/sky512_ft.tex";
                    SkyboxLf = "rbxasset://textures/sky/sky512_lf.tex";
                    SkyboxRt = "rbxasset://textures/sky/sky512_rt.tex";
                    SkyboxUp = "rbxasset://textures/sky/sky512_up.tex";
                });

                Visuals:NewSky({
                    Name = "Red Night", 
                    SkyboxBk = "http://www.roblox.com/Asset/?ID=401664839";
                    SkyboxDn = "http://www.roblox.com/Asset/?ID=401664862";
                    SkyboxFt = "http://www.roblox.com/Asset/?ID=401664960";
                    SkyboxLf = "http://www.roblox.com/Asset/?ID=401664881";
                    SkyboxRt = "http://www.roblox.com/Asset/?ID=401664901";
                    SkyboxUp = "http://www.roblox.com/Asset/?ID=401664936";
                });

                Visuals:NewSky({
                    Name = "Deep Space", 
                    SkyboxBk = "http://www.roblox.com/asset/?id=149397692";
                    SkyboxDn = "http://www.roblox.com/asset/?id=149397686";
                    SkyboxFt = "http://www.roblox.com/asset/?id=149397697";
                    SkyboxLf = "http://www.roblox.com/asset/?id=149397684";
                    SkyboxRt = "http://www.roblox.com/asset/?id=149397688";
                    SkyboxUp = "http://www.roblox.com/asset/?id=149397702";
                });

                Visuals:NewSky({
                    Name = "Pink Skies", 
                    SkyboxBk = "http://www.roblox.com/asset/?id=151165214";
                    SkyboxDn = "http://www.roblox.com/asset/?id=151165197";
                    SkyboxFt = "http://www.roblox.com/asset/?id=151165224";
                    SkyboxLf = "http://www.roblox.com/asset/?id=151165191";
                    SkyboxRt = "http://www.roblox.com/asset/?id=151165206";
                    SkyboxUp = "http://www.roblox.com/asset/?id=151165227";
                });

                Visuals:NewSky({
                    Name = "Purple Sunset", 
                    SkyboxBk = "rbxassetid://264908339";
                    SkyboxDn = "rbxassetid://264907909";
                    SkyboxFt = "rbxassetid://264909420";
                    SkyboxLf = "rbxassetid://264909758";
                    SkyboxRt = "rbxassetid://264908886";
                    SkyboxUp = "rbxassetid://264907379";
                });

                Visuals:NewSky({
                    Name = "Blue Night", 
                    SkyboxBk = "http://www.roblox.com/Asset/?ID=12064107";
                    SkyboxDn = "http://www.roblox.com/Asset/?ID=12064152";
                    SkyboxFt = "http://www.roblox.com/Asset/?ID=12064121";
                    SkyboxLf = "http://www.roblox.com/Asset/?ID=12063984";
                    SkyboxRt = "http://www.roblox.com/Asset/?ID=12064115";
                    SkyboxUp = "http://www.roblox.com/Asset/?ID=12064131";
                });

                Visuals:NewSky({
                    Name = "Blossom Daylight", 
                    SkyboxBk = "http://www.roblox.com/asset/?id=271042516";
                    SkyboxDn = "http://www.roblox.com/asset/?id=271077243";
                    SkyboxFt = "http://www.roblox.com/asset/?id=271042556";
                    SkyboxLf = "http://www.roblox.com/asset/?id=271042310";
                    SkyboxRt = "http://www.roblox.com/asset/?id=271042467";
                    SkyboxUp = "http://www.roblox.com/asset/?id=271077958";
                });

                Visuals:NewSky({
                    Name = "Blue Nebula", 
                    SkyboxBk = "http://www.roblox.com/asset?id=135207744";
                    SkyboxDn = "http://www.roblox.com/asset?id=135207662";
                    SkyboxFt = "http://www.roblox.com/asset?id=135207770";
                    SkyboxLf = "http://www.roblox.com/asset?id=135207615";
                    SkyboxRt = "http://www.roblox.com/asset?id=135207695";
                    SkyboxUp = "http://www.roblox.com/asset?id=135207794";
                });

                Visuals:NewSky({
                    Name = "Blue Planet", 
                    SkyboxBk = "rbxassetid://218955819";
                    SkyboxDn = "rbxassetid://218953419";
                    SkyboxFt = "rbxassetid://218954524";
                    SkyboxLf = "rbxassetid://218958493";
                    SkyboxRt = "rbxassetid://218957134";
                    SkyboxUp = "rbxassetid://218950090";
                });

                Visuals:NewSky({
                    Name = "Deep Space", 
                    SkyboxBk = "http://www.roblox.com/asset/?id=159248188";
                    SkyboxDn = "http://www.roblox.com/asset/?id=159248183";
                    SkyboxFt = "http://www.roblox.com/asset/?id=159248187";
                    SkyboxLf = "http://www.roblox.com/asset/?id=159248173";
                    SkyboxRt = "http://www.roblox.com/asset/?id=159248192";
                    SkyboxUp = "http://www.roblox.com/asset/?id=159248176";
                });
            end;
        end;

        do --// Weapon Info 
            local WeaponInfo = Instance.new("TextLabel", Visuals.ESPContainer);
            local Center = Camera.ViewportSize / 2;

            WeaponInfo.FontFace = Library.SmallFont;
            WeaponInfo.BackgroundTransparency = 1;
            WeaponInfo.Text = "Weapon | [Ammo / Max Ammo] | Caliber";
            WeaponInfo.TextSize = Library.SmallSize;
            WeaponInfo.TextColor3 = Color3.fromRGB(255, 255, 255);
            WeaponInfo.TextStrokeTransparency = 0;

            WeaponInfo.Position = UDim2.new(0, Center.X, 0, Center.Y + 20);
            WeaponInfo.Visible = false;

            Visuals.WeaponInfo = WeaponInfo;
        end;

        do --// FOV Circle Elements
            local FOVGradient = Instance.new("UIGradient");
            local ScreenUI;
            
            ScreenUI = Instance.new("ScreenGui");
            ScreenUI.Parent = gethui();
            ScreenUI.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";

            local FOVCircle = Instance.new("Frame"); 
            local CenterScreen = Camera.ViewportSize / 2; 
            local Corner = Instance.new("UICorner"); 
            local Stroke = Instance.new("UIStroke"); 

            --// Properties (FOV);
            do 
                ScreenUI.IgnoreGuiInset = true;

                FOVCircle.Parent = ScreenUI
                FOVCircle.BackgroundTransparency = 1
                FOVCircle.ZIndex = 9999
                FOVCircle.BackgroundColor3 = Color3.new(1,1,1)
                FOVCircle.Size = UDim2.new(0, 500, 0, 500)
                FOVCircle.Visible = false;

                FOVCircle.AnchorPoint = Vector2.new(0.5, 0.5)
                FOVCircle.Position = UDim2.new(0, CenterScreen.X, 0, CenterScreen.Y);

                Corner.Parent = FOVCircle
                Corner.CornerRadius = UDim.new(1,9999999)

                Stroke.Parent = FOVCircle
                Stroke.Color = Color3.new(1,1,1)
                Stroke.Thickness = 3

                FOVGradient.Parent = Stroke;
            end;
            Visuals.FOVGradient = FOVGradient;
            Visuals.FOVCircle = FOVCircle;
        end;

        do --// Delta visuals 
            function Visuals:CheckFoliage(Value)
                if Value and Value:IsA("MeshPart") and Value.Color ~= Color3.fromRGB(108, 88, 75) then
                    if Library.Flags.RemoveFoliage and Library.Flags.RemoveFoliage.Value then 
                        Value.Transparency = 1
                    else 
                        Value.Transparency = 0 
                    end
                end
            end;
        end;

        do --// Standard Visuals functions
            LPH_NO_VIRTUALIZE(function()
                --// FOV Variables
                local StartTime = tick();
                local CurrentColorSetIndex = 1;

                function Visuals:FloorVector(Vector)
                    if typeof(Vector) == "Vector2" then 
                        return Vector2.new(math.floor(Vector.X), math.floor(Vector.Y));
                    else 
                        return Vector3.new(math.floor(Vector.X), math.floor(Vector.Y), math.floor(Vector.Z));
                    end;
                end;

                function Visuals:NewLine(Start, End)
                    local Idx = #Visuals.Lines+1
                    Visuals.Lines[Idx] = {
                        Origin = Start,
                        CurrentPos = Start,
                        End = End,
                        Line = nil,
                        Direction = (End - Start).Unit,
                        TimeSince = tick();
                        To = Vector2.new();
                        From = Vector2.new();
                        IsFading = false;
                        FadeTick = 0;
                    };
                end;

                function Visuals:NewTracer(Start, End, Parent)
                    task.spawn(function()
                        local StartPart, EndPart = Instance.new("Part", Parent), Instance.new("Part", Parent);
                        local StartAttachment, EndAttachment = Instance.new("Attachment", StartPart), Instance.new("Attachment", EndPart);
                        local Beam = Instance.new("Beam", Parent);
                        do --// Properties
                            StartPart.Transparency = 1; StartPart.Size = Vector3.new(0.05, 0.05, 0.05); StartPart.Anchored = true; StartPart.CanCollide = false; StartPart.Position = Start;
                            EndPart.Transparency = 1; EndPart.Size = Vector3.new(0.05, 0.05, 0.05); EndPart.Anchored = true; EndPart.CanCollide = false; EndPart.Position = End;

                            do --// Beam properties
                                Beam.Color = ColorSequence.new(Library.Flags.TracerColor.Color);
                                Beam.Enabled = true;
                                Beam.FaceCamera = true;
                                Beam.Attachment0 = StartAttachment;
                                Beam.Attachment1 = EndAttachment;
                                Beam.Width0 = 1;
                                Beam.Width1 = 1;
                                Beam.LightEmission = 1;
                                Beam.LightInfluence = 0;
                                Beam.Texture = "rbxassetid://446111271";
                                Beam.Parent = workspace;
                                Beam.TextureLength = 14;
                                Beam.TextureSpeed = 12;
                                Beam.TextureMode = Enum.TextureMode.Wrap;
                            end;
                            
                            task.spawn(function()
                                local SpeedTween = TweenInfo.new(2, Enum.EasingStyle.Exponential, Enum.EasingDirection.Out, 0, false, 0);
                                task.wait(0.2);
                                local CreatedTween = TweenService:Create(Beam, SpeedTween, {TextureSpeed = 2});
                                CreatedTween:Play();

                            end);
                            Delay(Library.Flags.LifeTime.Value, function() 
                                local Tween = TweenService:Create(Beam, TweenInfo.new(1), {
                                    Width0 = 0,
                                    Width1 = 0,
                                    TextureSpeed = 0,
                                });
                                Tween:Play(); Tween.Completed:Wait();
                                Beam:Destroy();
                                StartPart:Destroy(); EndPart:Destroy();
                            end);
                        end;
                    end);
                end;

                function Visuals:UpdateLines()
                    for Idx, Data in ipairs(Visuals.Lines) do
                        if not Data.Line and not Data.IsBeingDestroyed then
                            local Line = Instance.new("Frame")
                            Line.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Line.BorderSizePixel = 1
                            Line.Visible = false
                            Line.BackgroundColor3 = Library.Flags.TracerColor.Color
                            Line.Parent = Visuals.ESPContainer
                
                            Data.Line = Line
                        end
                
                        if Data.Line then
                            local OriginPos, OriginIsOnScreen = Camera:WorldToViewportPoint(Data.Origin)
                            local EndPos, EndIsOnScreen = Camera:WorldToViewportPoint(Data.End)
                            
                            local Transparency = 0
                
                            if tick() - Data.TimeSince > Library.Flags.LifeTime.Value and not Data.IsFading then
                                Data.FadeTick = tick()
                                Data.IsFading = true
                            end
                            
                            if Data.IsFading then
                                Transparency = math.min(1, (tick() - Data.FadeTick) / 1)
                            end
                            
                            Data.Line.BackgroundTransparency = Transparency
                
                            if EndIsOnScreen and OriginIsOnScreen then
                                Data.To = Vector2.new(EndPos.X, EndPos.Y)
                                do
                                    Data.From = Vector2.new(OriginPos.X, OriginPos.Y)
                                    Data.Line.Visible = true
                                    Visuals:RotateLine(Data.Line, 1, Data.From, Data.To)
                                end;
                            else
                                Data.Line.Visible = false
                            end
                        end
                
                        if Data.Line and Data.Line.BackgroundTransparency == 1 then
                            Data.IsFading = false
                            Data.IsBeingDestroyed = true
                            Data.Line:Destroy()
                            table.remove(Visuals.Lines, Idx)
                        end
                    end
                end;

                --[[function Visuals:UpdateLines()
                    for Idx, Data in ipairs(Visuals.Lines) do
                        if not Data.Line and not Data.IsBeingDestroyed then
                            local Line = Instance.new("Frame")
                            Line.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Line.BorderSizePixel = 1
                            Line.Visible = false
                            Line.BackgroundColor3 = Library.Flags.TracerColor.Color
                            Line.Parent = Visuals.ESPContainer
                
                            Data.Line = Line
                        end
                
                        if Data.Line then
                            local OriginPos, OriginIsOnScreen = Camera:WorldToViewportPoint(Data.Origin)
                            local EndPos, EndIsOnScreen = Camera:WorldToViewportPoint(Data.End)
                            
                            local Transparency = 0
                
                            if tick() - Data.TimeSince > Library.Flags.LifeTime.Value and not Data.IsFading then
                                Data.FadeTick = tick()
                                Data.IsFading = true
                            end
                            
                            if Data.IsFading then
                                Transparency = math.min(1, (tick() - Data.FadeTick) / 1)
                            end
                            
                            Data.Line.BackgroundTransparency = Transparency
                
                            if EndIsOnScreen then
                                Data.To = Vector2.new(EndPos.X, EndPos.Y)
                
                                if OriginIsOnScreen then
                                    Data.From = Vector2.new(OriginPos.X, OriginPos.Y)
                                    Data.Line.Visible = true
                                    Visuals:RotateLine(Data.Line, 1, Data.From, Data.To)
                                else
                                    local RayHit, HitPos = Workspace:FindPartOnRayWithIgnoreList(
                                        Ray.new(Data.CurrentPos, (Data.End - Data.CurrentPos).Unit * 1),
                                        {Camera, Client.Character},
                                        false,
                                        true,
                                        ""
                                    )
                
                                    if HitPos then
                                        local NewPos, NewOnScreen = Camera:WorldToViewportPoint(HitPos)
                
                                        if NewOnScreen then
                                            Data.CurrentPos = HitPos
                                            Data.From = Vector2.new(NewPos.X, NewPos.Y)
                                            Data.Line.Visible = true
                                            Visuals:RotateLine(Data.Line, 1, Data.From, Data.To)
                                        end
                                    else
                                        Data.Line.Visible = false
                                    end
                                end
                            else
                                Data.Line.Visible = false
                            end
                        end
                
                        if Data.Line and Data.Line.BackgroundTransparency == 1 then
                            Data.IsFading = false
                            Data.IsBeingDestroyed = true
                            Data.Line:Destroy()
                            table.remove(Visuals.Lines, Idx)
                        end
                    end
                end;]]
                
                function Visuals:NewHitmarker(Position)
                    Visuals.Hitmarkers[#Visuals.Hitmarkers+1] = {
                        Position = Position;
                        StartedAt = tick();
                        IsFading = false;
                        FadeTick = 0;
                        Hitmarker = Hitmarker;
                    };
                end;

                function Visuals:NewHitDamage(Position, Amount, Part)
                    local Data = {
                        FadeTick = 0,
                        IsFading = false ,
                        StartedAt = tick(),
                        Label = nil,
                        RandomizedSpot = Vector2.new(10, 0) + Vector2.new(math.random(1, 3), math.random(1, 3));
                        Position = Position,
                        Amount = Amount,
                        Part = Part,
                    }

                    Visuals.HitDamages[#Visuals.HitDamages+1] = Data;
                end;

                function Visuals:UpdateDamage()
                    for Index, Data in next, Visuals.HitDamages do 
                        if not Data.Label then 
                            local Label = Instance.new("TextLabel", Visuals.ESPContainer);
                            Label.BackgroundTransparency = 1; 
                            Label.FontFace = Library.SmallFont
                            Label.TextStrokeTransparency = 0; 
                            Label.TextColor3 = Library.Flags.DamageColor.Color; 
                            Label.TextSize = Library.SmallSize;
                            Label.Text = tostring(math.floor(Data.Amount));
                            Data.Label = Label
                            
                        end;

                        local Label = Data.Label;
                        local Transparency = 0;
                        local RandomizedSpot = Data.RandomizedSpot
                        local Connection;

                        do --// project delta hitsounds
                            if game.PlaceId == 7336302630 and Library.Flags.CustomHitSounds and Library.Flags.CustomHitSounds.Value and not Data.HasSounded then
                                Data.HasSounded = true; 
                                task.spawn(function()
                                    local IsHeadshot = (Data.Part.Name:find("Head") or Data.Part.Name:find("Face")) and true or false;
                                    if IsHeadshot then 
                                        Headshot:Play();
                                    else 
                                        Bodyshot:Play();
                                    end;
                                end);
                            end;
                        end;

                        do --// Setting properties
                            local ScreenPosition, IsOnScreen = Camera:WorldToViewportPoint(Data.Position);
                            
                            Label.Visible = IsOnScreen; 

                            if Label.Visible then 
                                
                                local OffsetY = (tick() - Data.StartedAt) * 25; 
                                Label.Position = UDim2.new(0, ScreenPosition.X, 0, ScreenPosition.Y - OffsetY) + UDim2.new(0, RandomizedSpot.X, 0, RandomizedSpot.Y);
                            end;

                            if tick() - Data.StartedAt > Library.Flags.HitmarkerTime.Value and not Data.IsFading then 
                                Data.FadeTick = tick();
                                Data.IsFading = true;
                            end;

                            if Data.IsFading then 
                                local TimeDifference = tick() - Data.FadeTick;
                                Transparency = math.min(1, TimeDifference / Library.Flags.FadeTime.Value);
                            end;

                            Label.TextTransparency = Transparency;

                            if Label.TextTransparency == 1 then 
                                Label:Destroy();
                                Visuals.HitDamages[Index] = nil;
                            end;
                        end;
                    end;
                end;

                function Visuals:UpdateHitmarkers()
                    for Index, Data in pairs(Visuals.Hitmarkers) do 
                        task.spawn(function()
                            if not Data.Hitmarker then 
                                local Hitmarker = Instance.new("ImageLabel", Visuals.ESPContainer);
                                Hitmarker.Image = "http://www.roblox.com/asset/?id=13298929624";
                                Hitmarker.BackgroundTransparency = 1;
                                Hitmarker.Size = UDim2.new(0, 50, 0, 50);
                                Hitmarker.Visible = false;
                                Hitmarker.Rotation = 45;
                                Hitmarker.AnchorPoint = Vector2.new(0.5, 0.5);

                                Data.Hitmarker = Hitmarker
                            end;
                            local Hitmarker = Data.Hitmarker;
                            local Position, IsOnScreen = Camera:WorldToViewportPoint(Data.Position);
                            Hitmarker.Visible = IsOnScreen;
                            local Transparency = 0;

                            if tick() - Data.StartedAt > Library.Flags.HitmarkerTime.Value and not Data.IsFading then 
                                Data.FadeTick = tick();
                                Data.IsFading = true;
                            end;

                            if Data.IsFading then 
                                local TimeDifference = tick() - Data.FadeTick;
                                Transparency = math.min(1, TimeDifference / Library.Flags.FadeTime.Value);
                            end;

                            if Hitmarker.Visible then 
                                Hitmarker.ImageTransparency = Transparency;
                                Hitmarker.Position = UDim2.new(0, Position.X, 0, Position.Y);
                                Hitmarker.ImageColor3 = Library.Flags.HitmarkerColor.Color;
                            end;

                            if Hitmarker.ImageTransparency == 1 then
                                Visuals.Hitmarkers[Index] = nil;
                                Hitmarker:Destroy();
                            end;
                        end);
                    end;
                end;

                function Visuals:Lerp(a, b, t)
                    if t < 0.5 then
                        return a + (b - a) * t
                    else
                        return b - (b - a) * (1 - t)
                    end
                end;
                
                function Visuals:Map(x, a, b, c, d)
                    return Visuals:Lerp(c, d, (x - a)/(b - a))
                end;

                function Visuals:RotateLine(Object, Thickness, From, To)
                    local X1, Y1, X2, Y2 = From.X, From.Y, To.X, To.Y;

                    local CenterX = (X1 + X2) / 2;
                    local CenterY = (Y1 + Y2) / 2;

                    local DeltaX = math.abs(X1 - X2) ^ 2;
                    local DeltaY = math.abs(Y1 - Y2) ^ 2;

                    local Distance = math.sqrt(DeltaX + DeltaY);
                    local Rotation = math.deg(math.atan2(Y1 - Y2, X1 - X2));

                    Object.AnchorPoint = Vector2.new(.5, .5)
                    Object.Position = UDim2.fromOffset(CenterX, CenterY)
                    Object.Size = UDim2.fromOffset(Distance, Thickness)
                    Object.Rotation = Rotation
                end;

                function Visuals:UpdateFOVColor(Style, Direction, RainbowMode)
                    task.spawn(function()
                        local CurrentTime = tick() - StartTime
                        local EasingStuff
                
                        if Style == "Linear" then 
                            EasingStuff = EasingStyle[Style][Direction](tick())
                        else 
                            EasingStuff = EasingStyle[Style][Direction](math.cos(math.pi / 2 * tick() - math.pi / 2))
                        end
                
                        local RotationAngle = 360 * EasingStuff * (Library.Flags.RotationSpeed.Value / 5) % 360 -- Calculate the rotation angle based on time
                
                        Visuals.FOVGradient.Rotation = RotationAngle
                
                        local t = RotationAngle % 360 / 360
                        local Progress = math.min(CurrentTime / Library.Flags.TransitionDuration.Value, 1) -- Calculate the progress of the transition
                
                        if RainbowMode then
                            -- Calculate rainbow colors based on rotation angle
                            local rainbowColors = {}
                            local saturation = 0.5
                            local value = 0.9
                            for i = 0, 6 do
                                local hue = (t + i / 10) % 1 -- Adjusted the division factor to avoid repetitions
                                table.insert(rainbowColors, ColorSequenceKeypoint.new(i / 6, Color3.fromHSV(hue, saturation, value)))
                            end
                
                            Visuals.FOVGradient.Color = ColorSequence.new(rainbowColors)
                        else
                            -- Normal lerping between color sets
                            local ColorSet1 = Visuals.ColorSets[CurrentColorSetIndex]
                            local ColorSet2 = Visuals.ColorSets[(CurrentColorSetIndex % #Visuals.ColorSets) + 1]
                
                            local LerpedColor1 = ColorSet1[1]:Lerp(ColorSet2[1], Progress)
                            local LerpedColor2 = ColorSet1[2]:Lerp(ColorSet2[2], Progress)
                
                            local Keypoint1 = ColorSequenceKeypoint.new(0, LerpedColor1)
                            local Keypoint2 = ColorSequenceKeypoint.new(1, LerpedColor2)
                
                            Visuals.FOVGradient.Color = ColorSequence.new({Keypoint1, Keypoint2})
                        end
                
                        if Progress >= 1 then
                            CurrentColorSetIndex = (CurrentColorSetIndex % #Visuals.ColorSets) + 1
                            StartTime = tick()
                            Library.Flags.TransitionDuration.Value = 0.1
                        else
                            Library.Flags.TransitionDuration.Value = OriginalTransitionDuration
                        end
                    end)
                end
            end)();
        end;
        
        do --// ESP listeners and standard text creation
            LPH_NO_VIRTUALIZE(function()
                function ESPConstructor:Text()
                    local NewLabel = Instance.new("TextLabel", Visuals.ESPContainer);
                    NewLabel.BackgroundTransparency = 1;
                    NewLabel.FontFace = Library.MenuFont;
                    NewLabel.TextSize = Library.TextSize;
                    NewLabel.TextStrokeTransparency = 0;
                    NewLabel.Size = UDim2.new(0, 20, 0, 13);
                    NewLabel.Visible = false;
                    NewLabel.Text = "";
                    return NewLabel;
                end;

                function ESPConstructor:NewListener(Arguments)
                    local Name = Arguments.Name;
                    local Parent = Arguments.Parent;
                    local CustomName = Arguments.CustomName;
                    local Flag = "ESP"..Arguments.Flag
                    local Color = Arguments.Flag.."Color";

                    local CustomChecks2 = Arguments.CustomChecks2 or function(Object) return true end;
                    for Index, Object in next, Parent:GetChildren() do 
                        task.spawn(function()
                            task.wait(0.2);
                            if ((Object.Name == Name or Object.ClassName == Arguments.Type) or type(Name) == "table" and table.find(Name, Object.Name)) and CustomChecks2(Object) then 
                                CustomObjects[Object] = {
                                    Flag = Flag; 
                                    Name = Name;
                                    Parent = Parent;
                                    Color = Color;
                                    CustomName = CustomName;
                                    GetPosition = Arguments.GetPosition;
                                    Main = ESPConstructor:Text();
                                    CustomChecks = Arguments.CustomChecks;
                                    LastTick = tick();
                                    LastTextUpdate = tick();
                                    TextUpdate = Arguments.TextUpdate;
                                };
                            end;
                        end);
                    end;

                    Parent.ChildAdded:Connect(function(Object)
                        task.spawn(function()
                            task.wait(0.3);
                            if ((Object.Name == Name or Object.ClassName == Arguments.Type) or type(Name) == "table" and table.find(Name, Object.Name)) and CustomChecks2(Object) then 
                                CustomObjects[Object] = {
                                    Flag = Flag; 
                                    Name = Name;
                                    Parent = Parent;
                                    Color = Color;
                                    CustomName = CustomName;
                                    GetPosition = Arguments.GetPosition;
                                    Main = ESPConstructor:Text();
                                    CustomChecks = Arguments.CustomChecks;
                                    LastTick = tick();
                                    LastTextUpdate = tick();
                                    TextUpdate = Arguments.TextUpdate;
                                };
                            end;
                        end);
                    end);

                    Parent.ChildRemoved:Connect(function(Object)
                        if CustomObjects[Object] then 
                            CustomObjects[Object].Main:Destroy();
                            CustomObjects[Object] = nil;
                        end;
                    end);
                end;

                function ESPConstructor:NewGrenade(Data)
                    local Constructor = {
                        TimeTick = tick();
                        Name = Data.Name;
                        TimeForExplosion = Data.TimeForExplosion;
                        IsImpact = Data.IsImpact;
                        Components = {
                            Frame = nil;
                            Image = nil;
                            Invert = nil;
                            Bar = nil;
                            Text = nil;
                        };
                        KillDistance = 0;
                        Model = Data.Model;
                        Root  = Data.Root;
                        Class = "Grenade"
                    };

                    do --// Elements
                        local ItemHolder = Instance.new("Frame")
                        local ItemIcon   = Instance.new("ImageLabel")
                        local ItemBar    = Instance.new("Frame")
                        local Invert        = Instance.new("Frame")
                        local Name          = Instance.new("TextLabel")

                        Constructor.Components.Frame  = ItemHolder;
                        Constructor.Components.Image  = ItemIcon;
                        Constructor.Components.Bar    = ItemBar;
                        Constructor.Components.Text   = Name;
                        Constructor.Components.Invert = Invert;

                        do --// Properties
                            ItemHolder.Parent = Visuals.ESPContainer;
                            ItemHolder.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                            ItemHolder.BackgroundTransparency = 1.000
                            ItemHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemHolder.BorderSizePixel = 0
                            ItemHolder.Position = UDim2.new(0.204767719, 0, 0.189737469, 0)
                            ItemHolder.Size = UDim2.new(0, 36, 0, 36)
                            ItemHolder.Visible = false;

                            ItemIcon.Parent = ItemHolder
                            ItemIcon.AnchorPoint = Vector2.new(0.5, 0)
                            ItemIcon.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                            ItemIcon.BackgroundTransparency = 1.000
                            ItemIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemIcon.BorderSizePixel = 0
                            ItemIcon.Position = UDim2.new(0.5, 0, 0.319999993, 0)
                            ItemIcon.Size = UDim2.new(0, 36, 0, 36)
                            ItemIcon.Image = ESPIcons["Grenade"];

                            ItemBar.Parent = ItemIcon
                            ItemBar.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
                            ItemBar.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemBar.Position = UDim2.new(0.5, -1, 0.5, 17)
                            ItemBar.Size = UDim2.new(1, 30, 0, 1)
                            ItemBar.AnchorPoint = Vector2.new(0.5, 0);
                            
                            Invert.Parent = ItemBar
                            Invert.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
                            Invert.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Invert.BorderSizePixel = 0
                            Invert.Size = UDim2.new(0, 0, 0, 1)
                            Invert.AnchorPoint = Vector2.new(1, 0);
                            Invert.Position = UDim2.new(1, 0, 0, 0);
                            
                            Name.Parent = ItemIcon
                            Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            Name.BackgroundTransparency = 1.000
                            Name.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Name.BorderSizePixel = 0
                            Name.Position = UDim2.new(0, 0, 0, -7)
                            Name.Size = UDim2.new(1, 0, 0, 12)
                            Name.FontFace = Library.SmallFont;
                            Name.TextSize = Library.SmallSize
                            Name.Text = Data.Name
                            Name.TextColor3 = Color3.fromRGB(255, 255, 255)
                            Name.TextStrokeTransparency = 0.000;
                        end;
                    end;

                    if Constructor.Name == "F1" then 
                        Constructor.TimeForExplosion = 3;
                    end;

                    Visuals.Items[Constructor.Model] = Constructor;
                    return Constructor;
                end;

                function ESPConstructor:NewMine(Data)
                    local Constructor = {
                        Name = Data.Name;
                        Components = {
                            Frame = nil;
                            Image = nil;
                            Text = nil;
                        };
                        Model = Data.Model;
                        Root  = Data.Root;
                        Class = "Mine"
                    };

                    do --// Elements
                        local ItemHolder = Instance.new("Frame")
                        local ItemIcon   = Instance.new("ImageLabel")
                        local Name       = Instance.new("TextLabel")

                        Constructor.Components.Frame  = ItemHolder;
                        Constructor.Components.Image  = ItemIcon;
                        Constructor.Components.Text   = Name;

                        do --// Properties
                            ItemHolder.Parent = Visuals.ESPContainer;
                            ItemHolder.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                            ItemHolder.BackgroundTransparency = 1.000
                            ItemHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemHolder.BorderSizePixel = 0
                            ItemHolder.Position = UDim2.new(0.204767719, 0, 0.189737469, 0)
                            ItemHolder.Size = UDim2.new(0, 36, 0, 36)
                            ItemHolder.Visible = false;

                            ItemIcon.Parent = ItemHolder
                            ItemIcon.AnchorPoint = Vector2.new(0.5, 0)
                            ItemIcon.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                            ItemIcon.BackgroundTransparency = 1.000
                            ItemIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemIcon.BorderSizePixel = 0
                            ItemIcon.Position = UDim2.new(0.5, 0, 0.319999993, 0)
                            ItemIcon.Size = UDim2.new(0, 18, 0, 18)
                            ItemIcon.Image = ESPIcons["Mine"];

                            Name.Parent = ItemIcon
                            Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            Name.BackgroundTransparency = 1.000
                            Name.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Name.BorderSizePixel = 0
                            Name.Position = UDim2.new(0, 0, 0, -10)
                            Name.Size = UDim2.new(1, 0, 0, 12)
                            Name.FontFace = Library.SmallFont;
                            Name.TextSize = Library.SmallSize
                            Name.Text = Data.Name
                            Name.TextColor3 = Color3.fromRGB(255, 255, 255)
                            Name.TextStrokeTransparency = 0.000;
                        end;
                    end;

                    Visuals.Items[Constructor.Model] = Constructor;
                    return Constructor;
                end;

                function ESPConstructor:NewClaymore(Data)
                    local Constructor = {
                        Name = Data.Name;
                        Components = {
                            Frame = nil;
                            Image = nil;
                            Text = nil;
                        };
                        Model = Data.Model;
                        Root  = Data.Root;
                        Class = "Claymore"
                    };

                    do --// Elements
                        local ItemHolder = Instance.new("Frame")
                        local ItemIcon   = Instance.new("ImageLabel")
                        local Name          = Instance.new("TextLabel")

                        Constructor.Components.Frame  = ItemHolder;
                        Constructor.Components.Image  = ItemIcon;
                        Constructor.Components.Text   = Name;

                        do --// Properties
                            ItemHolder.Parent = Visuals.ESPContainer;
                            ItemHolder.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                            ItemHolder.BackgroundTransparency = 1.000
                            ItemHolder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemHolder.BorderSizePixel = 0
                            ItemHolder.Position = UDim2.new(0.204767719, 0, 0.189737469, 0)
                            ItemHolder.Size = UDim2.new(0, 36, 0, 36)
                            ItemHolder.Visible = false;

                            ItemIcon.Parent = ItemHolder
                            ItemIcon.AnchorPoint = Vector2.new(0.5, 0)
                            ItemIcon.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                            ItemIcon.BackgroundTransparency = 1.000
                            ItemIcon.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ItemIcon.BorderSizePixel = 0
                            ItemIcon.Position = UDim2.new(0.5, 0, 0.319999993, 0)
                            ItemIcon.Size = UDim2.new(0, 18, 0, 18)
                            ItemIcon.Image = ESPIcons["Claymore"];

                            Name.Parent = ItemIcon
                            Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            Name.BackgroundTransparency = 1.000
                            Name.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Name.BorderSizePixel = 0
                            Name.Position = UDim2.new(0, 0, 0, -10)
                            Name.Size = UDim2.new(1, 0, 0, 12)
                            Name.FontFace = Library.SmallFont;
                            Name.TextSize = Library.SmallSize
                            Name.Text = Data.Name
                            Name.TextColor3 = Color3.fromRGB(255, 255, 255)
                            Name.TextStrokeTransparency = 0.000;
                        end;
                    end;

                    Visuals.Items[Constructor.Model] = Constructor;
                    return Constructor;
                end;

                function ESPConstructor:UpdateItems()
                    for Model, Constructor in next, Visuals.Items do
                        task.spawn(function()
                            local Components = Constructor.Components;

                            if Constructor.Class == "Grenade" then 
                                if Library.Flags.ESPGrenades and Library.Flags.ESPGrenades.Value and Constructor.Root then 
                                    local Position, IsOnScreen = Camera:WorldToViewportPoint(Constructor.Root.Position);
                                    Components.Frame.Visible = IsOnScreen;

                                    if Components.Frame.Visible then
                                        
                                        local LerpedColor = Library.Flags["GrenadeLower"].Color:lerp(Library.Flags["GrenadeHigher"].Color, (Constructor.TimeForExplosion - (tick() - Constructor.TimeTick)) / Constructor.TimeForExplosion);
                                        if IsStudio then 
                                            Constructor.TimeForExplosion = 3;
                                            if tick() - Constructor.TimeTick >= 3 then
                                                Constructor.TimeTick = tick();
                                            end;
                                        end;

                                        if tick() - Constructor.TimeTick > Constructor.TimeForExplosion or Constructor.IsImpact then 
                                            Constructor.TimeTick = tick() - Constructor.TimeForExplosion;
                                        end;

                                        local SF = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView / 2)) * 2) * 1000; 
                                        local Width = 4 * SF;
                                        local Height = 6 * SF;

                                        local Size, Pos = Visuals:FloorVector(Vector2.new(math.max(Width, 36), math.max(Height, 36))), Visuals:FloorVector(Vector2.new(Position.X - Width / 2, (Position.Y - Height / 2) + 3));
                                        local Center = Vector2.new(Pos.X + Size.X / 2 , Pos.Y + Size.Y / 2);

                                        Components.Bar.BackgroundColor3 = LerpedColor;
                                        Components.Frame.Size = UDim2.new(0, Size.X, 0, Size.Y);
                                        Components.Frame.Position = UDim2.new(0, Pos.X, 0, Pos.Y);
                                        Components.Invert.Size = UDim2.new(0, (Components.Bar.AbsoluteSize.X * (1 - (Constructor.TimeForExplosion - (tick() - Constructor.TimeTick)) / Constructor.TimeForExplosion)), 1, 0);
                                    end;
                                else
                                    Components.Frame.Visible = false;
                                end;
                            end;

                            if Constructor.Class == "Mine" then 
                                if Library.Flags.ESPMines and Library.Flags.ESPMines.Value then 
                                    local Position, IsOnScreen = Camera:WorldToViewportPoint(Constructor.Root.Position);
                                    Components.Frame.Visible = IsOnScreen;

                                    if Components.Frame.Visible then
                                        local SF = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView / 2)) * 2) * 1000; 
                                        local Width = 4 * SF;
                                        local Height = 6 * SF;

                                        local Size, Pos = Visuals:FloorVector(Vector2.new(math.max(Width, 15), math.max(Height, 15))), Visuals:FloorVector(Vector2.new(Position.X - Width / 2, (Position.Y - Height / 2) + 3));
                                        local Center = Vector2.new(Pos.X + Size.X / 2 , Pos.Y + Size.Y / 2);

                                        Components.Frame.Size = UDim2.new(0, Size.X, 0, Size.Y);
                                        Components.Frame.Position = UDim2.new(0, Pos.X, 0, Pos.Y);
                                    end;
                                else 
                                    Components.Frame.Visible = false;
                                end;
                            end;

                            if Constructor.Class == "Claymore" then 
                                if Library.Flags.ESPClaymores and Library.Flags.ESPClaymores.Value then 
                                    local Position, IsOnScreen = Camera:WorldToViewportPoint(Constructor.Root.Position);
                                    Components.Frame.Visible = IsOnScreen;

                                    if Components.Frame.Visible then
                                        local SF = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView / 2)) * 2) * 1000; 
                                        local Width = 4 * SF;
                                        local Height = 6 * SF;

                                        local Size, Pos = Visuals:FloorVector(Vector2.new(math.max(Width, 15), math.max(Height, 15))), Visuals:FloorVector(Vector2.new(Position.X - Width / 2, (Position.Y - Height / 2) + 3));
                                        local Center = Vector2.new(Pos.X + Size.X / 2 , Pos.Y + Size.Y / 2);

                                        Components.Frame.Size = UDim2.new(0, Size.X, 0, Size.Y);
                                        Components.Frame.Position = UDim2.new(0, Pos.X, 0, Pos.Y);
                                    end;
                                else 
                                    Components.Frame.Visible = false;
                                end;
                            end;
                        end);
                    end;
                end;

            end)();
        end;

        do --// Enemy ESP Functions
            LPH_NO_VIRTUALIZE(function()
                do --// Flags 
                    ESPConstructor.Flags = {};
                    function ESPConstructor:AddFlag(Arguments)
                        local Data = {
                            Text = Arguments.Text;
                            Flag = Arguments.Flag;
                            Name = Arguments.Name;
                            Allow = Arguments.Allow;
                        };

                        ESPConstructor.Flags[Data.Name] = Data;
                    end;
                end;

                do --// Grab player data
                    function ESPConstructor:GetCharacter()

                        if GameName == "Scorched Earth" then 
                            if self.Info.Data then 
                                return self.Info.Data.bodyModel
                            end 
                        end 

                        if GameName == "Games Unite" then
                            return Workspace.Playermodels:FindFirstChild(tostring(self.Object.UserId))
                        end

                        if GameName == "Frontlines" then 
                            return self.Object 
                        end 

                        if GameName == "Eastern War" or GameName == "Combat Warriors" or GameName == "State Of Anarchy" or GameName == "Korrupt Zombies" or GameName == "Lone Survival" or GameName == "Counter Blox" or GameName == "Arsenal" or GameName == "The Streets" or GameName == "Blood and Iron" or GameName == "Universal" or GameName == "Project Delta" or GameName == "Criminality" or GameName == "Fallen" or GameName == "Blackout" or GameName == "Apocalypse Rising 2"  then 
                            if self.Info.Class == "Player" then 
                                return self.Object.Character;
                            else
                                return self.Object
                            end;
                        end;

                        if GameName == "Gunfight Arena" then 
                            return Workspace:FindFirstChild(self.Object.Name);
                        end;
                        
                        if GameName == "Aftermath" then 
                            if self.Info.Class == "Player" then 
                                return self.Object.Character and self.Object.Character:FindFirstChild("WorldCharacter")
                            else 
                                return self.Object
                            end
                        end;

                        if GameName == "Bad Business" then 
                            return GameFramework.EntityList[self.Object.Name] 
                        end 


                        return nil;
                    end;

                    function ESPConstructor:GetTeam()

                        if GameName == "Bad Business" then 
                            local Beta = game:GetService("Teams").Beta.Players
                            local Omega = game:GetService("Teams").Omega.Players
                            local FFA = game:GetService("Teams").FFA.Players 
                            local Infected = game:GetService("Teams").Beta.Players 
                            local Survivors = game:GetService("Teams").Survivors.Players

                            if Beta:FindFirstChild(self.Object.Name) then 
                                return Beta 
                            end 

                            if Omega:FindFirstChild(self.Object.Name) then 
                                return Omega 
                            end 

                            if FFA:FindFirstChild(self.Object.Name) then 
                                return FFA 
                            end 

                            if Infected:FindFirstChild(self.Object.Name) then 
                                return Infected 
                            end 

                            if Survivors:FindFirstChild(self.Object.Name) then 
                                return Survivors 
                            end 
                        end 

                        if GameName == "Frontlines" then 
                            if self.Info.Character and self.Info.Character:FindFirstChild("friendly_marker") then
                                Utility.Team = "FRIENDLY" 
                                return "FRIENDLY"
                            else 
                                return "ENEMY"
                            end
                        end 

                        if self.Info.Class == "AI" then 
                            return "AI_NO_TEAM" 
                        end; 
                        
                        if GameName == "Eastern War" or GameName == "Scorched Earth" or GameName == "Lone Survival" or  GameName == "Counter Blox" or GameName == "Arsenal" or GameName == "Blood and Iron" or GameName == "Universal" or GameName == "Blackout" or GameName == "Project Delta" or GameName == "Criminality" then 
                            return self.Object.Team
                        elseif GameName == "Gunfight Arena" then 
                            return self.Object:GetAttribute("Team");
                        end;


                    end;

                    function ESPConstructor:GetRoot()

                        if GameName == "Scorched Earth" and self.Info.Character then 
                            return self.Info.Character:FindFirstChild("root") 
                        end 

                        if GameName == "Bad Business" then 
                            return self.Info.Character:FindFirstChild("Root") 
                        end 

                        if GameName == "Eastern War" or GameName == "Combat Warriors" or GameName == "Frontlines" or GameName == "Games Unite" or GameName == "State Of Anarchy" or  GameName == "Korrupt Zombies" or GameName == "Lone Survival" or  GameName == "Aftermath" or GameName == "Counter Blox" or GameName == "Arsenal" or GameName == "The Streets" or GameName == "Blood and Iron" or GameName == "Universal" or GameName == "Project Delta" or GameName == "Criminality" or GameName == "Fallen" or GameName == "Blackout" or GameName == "Apocalypse Rising 2" or GameName == "Gunfight Arena" then 
                            if self.Info.Character then 

                                if GameName == "Games Unite" then 
                                    return self.Info.Character.RootPart.root
                                end 

                                return self.Info.Character:FindFirstChild("HumanoidRootPart");
                            end;
                        end;
                
                        return nil;
                    end;

                    function ESPConstructor:GetHealth()

                        if GameName == "Scorched Earth" and self.Info.Data then 
                            return self.Info.Data.health, 100 
                        end 

                        if GameName == "Bad Business" then 
                            local Health = self.Info.Character:FindFirstChild("Health") 
                            local MaxHealth = Health and Health:FindFirstChild("MaxHealth") 

                            if MaxHealth then 
                                return Health.Value, MaxHealth.Value 
                            end 
                        end 

                        if GameName == "Eastern War" or GameName == "Combat Warriors" or GameName == "State Of Anarchy" or GameName == "Korrupt Zombies" or GameName == "Lone Survival" or  GameName == "Aftermath" or GameName == "Counter Blox" or GameName == "Arsenal" or GameName == "The Streets" or GameName == "Blood and Iron" or GameName == "Universal" or GameName == "Project Delta" or GameName == "Criminality" or GameName == "Fallen" or GameName == "Blackout" or GameName == "Gunfight Arena" then 
                            local Humanoid = self.Info.Character and self.Info.Character:FindFirstChildOfClass("Humanoid");

                            if Humanoid then 
                                if self.Info.Class == "Player" or self.Info.Class == "AI" then 
                                    return Humanoid.Health, Humanoid.MaxHealth;
                                end;
                            end;
                        end;

                        if GameName == "Apocalypse Rising 2" then 
                            local Stats = self.Object:FindFirstChild("Stats");
                            local Health = Stats and Stats:FindFirstChild("Health");

                            return Health and Health.Value or 0, 100;
                        end;
                        return 100, 100
                    end;

                    function ESPConstructor:GetWeapon()
                        local Weapon, WeaponName = nil, "None";

                        --if GameName == "Deadline" and GameFramework.EntityData and GameFramework.EntityData[self.Info.Character.Name] then 
                        --    if GameFramework.EntityData[self.Info.Character.Name] and GameFramework.EntityData[self.Info.Character.Name].animator and GameFramework.EntityData[self.Info.Character.Name].animator.weapon and GameFramework.EntityData[self.Info.Character.Name].animator.weapon.current then 
                        --        Weapon, WeaponName = GameFramework.EntityData[self.Info.Character.Name].animator.weapon.current.Name, GameFramework.EntityData[self.Info.Character.Name].animator.weapon.current.Name
                        --    end;
                        --end;

                        if GameName == "Scorched Earth" then 
                            if self.Info.Character and self.Info.Data then 
                                if self.Info.Data.equippedObjectThird and self.Info.Data.equippedObjectThird.itemData then 
                                    return self.Info.Data.equippedObjectThird.itemData, self.Info.Data.equippedObjectThird.itemData.name
                                end
                            end
                        end 

                        if GameName == "Bad Business" then 
                            for Index, Value in next, self.Info.Character:GetChildren() do 
                                if Value:IsA("Model") and Value.Name ~= "Body" and Value.Name ~= "Hitbox" then 
                                    return Value, Value.Name 
                                end
                            end
                        end 

                        if  GameName == "State Of Anarchy" then 
                            Weapon = self.Info.Character:FindFirstChild("CurrentHolding") 
                            WeaponName = (Weapon and Weapon:FindFirstChild("RealName") and Weapon:FindFirstChild("RealName").Value) or "None"
                        end 

                        if GameName == "Lone Survival" then 
                            local Tools = ReplicatedStorage.Assets.Prefabs.Tools

                            if self.Info.Character and self.Info.Character:FindFirstChild("Worldmodel") and self.Info.Character.Worldmodel:FindFirstChild("Handle") then 
                                local Id = self.Info.Character.Worldmodel:FindFirstChild("Handle").MeshId

                                if self.Info.Character.Worldmodel:FindFirstChild("Blade") then 
                                    if self.Info.Character.Worldmodel:FindFirstChild("Blade").ClassName == "MeshPart" then 
                                        if self.Info.Character.Worldmodel:FindFirstChild("Blade").MeshId == "rbxassetid://14886017435" then 
                                            Weapon = self.Info.Character.Worldmodel 
                                            WeaponName = "Improvised Pickaxe"
                                        end 

                                        if self.Info.Character.Worldmodel:FindFirstChild("Blade").MeshId == "rbxassetid://14775909545" then 
                                            Weapon = self.Info.Character.Worldmodel 
                                            WeaponName = "Improvised Pickaxe"
                                        end 
                                    end 
                                end; 

                                if self.Info.Character.Worldmodel:FindFirstChild("BackSight") then 
                                    Weapon = self.Info.Character.Worldmodel 
                                    WeaponName = "SHAK-12"
                                end; 

                                if self.Info.Character.Worldmodel:FindFirstChild("BowBase") then 
                                    Weapon = self.Info.Character.Worldmodel 
                                    WeaponName = "Wooden Bow"
                                end; 

                                if self.Info.Character.Worldmodel:FindFirstChild("handle") and self.Info.Character.Worldmodel:FindFirstChild("test.006") then 
                                    Weapon = self.Info.Character.Worldmodel 
                                    WeaponName = "Stone Spear"
                                end; 

                                if self.Info.Character.Worldmodel:FindFirstChild("Body") and self.Info.Character.Worldmodel:FindFirstChild("Body").ClassName == "MeshPart" then 
                                    
                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13813662516" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "Thumper"
                                    end 

                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13319461745" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "Double Barrel Shotgun"
                                    end 

                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13318509813" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "MP5"
                                    end;
                                end;

                                if self.Info.Character.Worldmodel:FindFirstChild("Base") and self.Info.Character.Worldmodel:FindFirstChild("Base").ClassName == "MeshPart" then 
                                    
                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13744914668" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "Stone Hatchet"
                                    end;

                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13745133273" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "Iron Hatchet"
                                    end;


                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13745011274" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "Iron Pickaxe"
                                    end;


                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13744395964" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "Stone Pickaxe"
                                    end;
                                end;
                                
                                if self.Info.Character.Worldmodel:FindFirstChild("Hammer") and self.Info.Character.Worldmodel:FindFirstChild("Hammer").ClassName == "MeshPart" then 
                                    
                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://13674795820" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "USP"
                                    end 

                                    if self.Info.Character.Worldmodel:FindFirstChild("Body").MeshId == "rbxassetid://15249045222" then 
                                        Weapon = self.Info.Character.Worldmodel 
                                        WeaponName = "M9A4"
                                    end;
                                end;

                                if self.Info.Character.Worldmodel:FindFirstChild("Scope") then 
                                    Weapon = self.Info.Character.Worldmodel 
                                    WeaponName = "M700"
                                end;

                                if Weapon and WeaponName ~= "None" then 
                                    return Weapon, WeaponName 
                                end; 

                                for Index, Value in next, Tools:GetChildren() do 
                                    if Value:IsA("Folder") and Value:FindFirstChild("Worldmodel") then 
                                        if Value.Worldmodel:FindFirstChild("Handle") and Value.Worldmodel.Handle.ClassName == "MeshPart" and Value.Worldmodel.Handle.MeshId == Id then
                                            Weapon = self.Info.Character.Worldmodel 
                                            WeaponName = Value.Name; 

                                            break
                                        end 
                                    end 
                                end;

                            end;
                        end;

                        if GameName == "Gunfight Arena" then 
                            Weapon, WeaponName = self.Object:GetAttribute("Weapon"), tostring(self.Object:GetAttribute("Weapon"));

                            if WeaponName == "nil" then 
                                WeaponName = "None";
                            end;

                            return Weapon, WeaponName
                        end;

                        if GameName == "Project Delta" then 
                            if self.Info.Character then
                                local Character = self.Info.Character
                                if self.Info.Class == "Player"  then

                                    local ModelData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                                    if not ModelData then return nil, "None" end;
                                    local Status = ModelData.Status
                                    if not Status then return nil,  "None" end;
                                    local GameplayVars = Status.GameplayVariables
                                    
                                    if GameplayVars and GameplayVars.EquippedTool then 
                                        Weapon = GameplayVars:FindFirstChild("EquippedTool").Value;
                                        if Weapon then 
                                            WeaponName = tostring(Weapon);
                                        end;
                                    end 
                                    return Weapon, WeaponName;
                                else 
                                    local Inventory = self.Object:FindFirstChild("Inventory");
                                    if Inventory then 
                                        local FoundTool = Inventory:FindFirstChildOfClass("StringValue");

                                        if FoundTool then 
                                            Weapon, WeaponName = FoundTool, FoundTool.Name;
                                        end;
                                    end
                                end;
                            end;
                        end;

                        if GameName == "Eastern War" or GameName == "Combat Warriors" or GameName == "The Streets" or GameName == "Universal" or GameName == "Criminality"  then 
                            if self.Info.Character then 
                                local Tool = self.Info.Character:FindFirstChildOfClass("Tool");
                                Weapon = Tool;
                                if Weapon then 
                                    WeaponName = Weapon.Name;
                                end;
                
                            end;
                        end;

                        if GameName == "Blackout" then 
                            if self.Info.Character then 
                                local Tool = self.Info.Character:FindFirstChildOfClass("RayValue");
                                Weapon = Tool;
                                if Weapon then 
                                    WeaponName = Weapon.Name;
                                end;
                            end;
                        end;

                        if GameName == "Blood and Iron" then 
                           -- Weapon = workspace["99str4lif"].FirearmHandler.ToolName
                           local Handler = self.Info.Character:FindFirstChild("FirearmHandler") or self.Info.Character:FindFirstChild("MeleeWeaponHandler");
                           if Handler then
                                Weapon = Handler:FindFirstChild("ToolName");
                                WeaponName = Weapon and tostring(Weapon.Value);
                                Weapon = WeaponName self.Info.Character:FindFirstChild(WeaponName);
                           end;
                        end;

                        if GameName == "Apocalypse Rising 2" then 
                            Weapon = self.Info.Character.Equipped:GetChildren()[1];
                            if Weapon then 
                                WeaponName = Weapon.Name;
                            end;

                        end;

                        if GameName == "Counter Blox" then 
                            --workspace.RobIoxShader.EquippedTool
                            local Tool = self.Info.Character and self.Info.Character:FindFirstChild("EquippedTool")
                            if Tool.Value then 
                                return Tool.Value, tostring(Tool.Value);
                            end;

                        end;

                        if GameName == "Arsenal" then 
                            --workspace.RobIoxShader.EquippedTool
                            local Tool = self.Info.Character and self.Info.Character:FindFirstChild("Gun")
                            if Tool then 
                                return Tool, tostring(Tool:GetAttribute("Real"))
                            end;

                        end;

                        if GameName == "Aftermath" then 
                            local Object = self.Object:FindFirstChild("CurrentSelectedObject")
                            local Inv = self.Object:FindFirstChild("GunInventory")
                            if Object and Inv then 
                                SlotName = tostring(Object.Value)
                                local Slotdata = Inv:FindFirstChild(SlotName)

                                Weapon = Slotdata 
                                WeaponName = Slotdata.Value and tostring(Slotdata.Value) or "None"
                            end;
                        end;

                        if GameName == "Korrupt Zombies" then 
                            if self.Info.Character:GetAttribute("ZombieType") then 
                                Weapon = self.Info.Character 
                                WeaponName = self.Info.Character:GetAttribute("ZombieType")
                            end
                        end;

                        return Weapon, WeaponName;
                    end;

                    function ESPConstructor:GetDistance()
                        if GameName == "Project Delta" then
                            if self.Info.Character and self:GetRoot() then 
                                local Distance = (Camera.CFrame.p - self:GetRoot().CFrame.p).Magnitude;

                                return math.floor(Distance / 3);
                            end;
                        end;

                        if GameName == "Eastern War" or GameName == "Scorched Earth" or GameName == "Bad Business" or GameName == "Combat Warriors" or GameName == "Frontlines" or GameName == "Games Unite" or GameName == "State Of Anarchy" or GameName == "Korrupt Zombies" or GameName == "Lone Survival" or  GameName == "Aftermath" or GameName == "Counter Blox" or GameName == "Arsenal" or GameName == "The Streets" or GameName == "Blood and Iron" or GameName == "Universal" or GameName == "Blackout" or GameName == "Criminality" or GameName == "Apocalypse Rising 2" or GameName == "Fallen" or GameName == "Gunfight Arena" then 
                            if self.Info.Character and self:GetRoot() then 
                                local Distance = (Camera.CFrame.p - self:GetRoot().CFrame.p).Magnitude;

                                return math.floor(Distance);
                            end;
                        end;

                        return 0;
                    end;

                    function ESPConstructor:GetBoxSize()
                        if Library.Flags.BoxSize.Value == "Static" then 
                            if not self.Info.Character then
                                return nil
                            end
                            
                            local BoxData = {}
                            local Root = self:GetRoot()
                            
                            if not Root then
                                return nil
                            end
                            
                            local RootPosition3D = Root.CFrame
                            if GameName == "Games Unite" then 
                                RootPosition3D = RootPosition3D * CFrame.new(0, 1.9, 0)
                            end 

                            local RootPos, RootOnScreen = Camera:WorldToViewportPoint(RootPosition3D.p)
                            local SF = 1 / (RootPos.Z * math.tan(math.rad(Camera.FieldOfView / 2)) * 2) * 1000
                            local Width = Library.Flags.BoxWidth.Value * SF
                            local Height = Library.Flags.BoxHeight.Value * SF
                            local MinWidth, MaxHeight = 0, 6

                            if Library.Flags.BoxStyle.Value == "Corner" then 
                                MinWidth = 4
                            end;
                            
                            local Size = Visuals:FloorVector(Vector2.new(math.max(Width, MinWidth), math.max(Height, MaxHeight)))
                            local Position = Visuals:FloorVector(Vector2.new(RootPos.X - Width / 2, (RootPos.Y - Height / 2) + 3))
                            local Center = Vector2.new(Position.X + Size.X / 2, Position.Y + Size.Y / 2)
                            
                            BoxData.Height = Height
                            BoxData.Width = Width
                            BoxData.Size = Size
                            BoxData.Position = Position
                            BoxData.Center2D = Center
                            BoxData.OnScreen = RootOnScreen
                            
                            return BoxData
                        elseif Library.Flags.BoxSize.Value == "SizeDynamic" then 
                            if not self.Info.Character then
                                return nil
                            end
                            
                            local BoxData = {}
                            local Root = self:GetRoot()
                            
                            if not Root then
                                return nil
                            end
                            
                            local Character = self.Info.Character
                            if GameName == "Games Unite" then 
                                RootPosition3D = RootPosition3D * CFrame.new(0, 1.9, 0)
                            end
                            
                            local BoundingBoxPosition, BoundingBoxSize = Character:GetBoundingBox()
                            local HalfSize = BoundingBoxSize / 2
                            
                            local MaxBoxWidth = 10
                            local MaxBoxHeight = 20
                            local MaxBoxDepth = 10
                            
                            local ClampedHalfSizeX = math.min(HalfSize.X, MaxBoxWidth / 2)
                            local ClampedHalfSizeY = math.min(HalfSize.Y, MaxBoxHeight / 2)
                            local ClampedHalfSizeZ = math.min(HalfSize.Z, MaxBoxDepth / 2)
                            
                            local ClampedBoundingBoxSize = Vector3.new(ClampedHalfSizeX * 2, ClampedHalfSizeY * 2, ClampedHalfSizeZ * 2)
                            local ClampedBoundingBoxPosition = BoundingBoxPosition
                            
                            local Corners = {
                                ClampedBoundingBoxPosition * CFrame.new(ClampedHalfSizeX, ClampedHalfSizeY, ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(ClampedHalfSizeX, ClampedHalfSizeY, -ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(ClampedHalfSizeX, -ClampedHalfSizeY, ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(ClampedHalfSizeX, -ClampedHalfSizeY, -ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(-ClampedHalfSizeX, ClampedHalfSizeY, ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(-ClampedHalfSizeX, ClampedHalfSizeY, -ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(-ClampedHalfSizeX, -ClampedHalfSizeY, ClampedHalfSizeZ),
                                ClampedBoundingBoxPosition * CFrame.new(-ClampedHalfSizeX, -ClampedHalfSizeY, -ClampedHalfSizeZ)
                            }
                            
                            local MinX, MinY = math.huge, math.huge
                            local MaxX, MaxY = -math.huge, -math.huge
                            local OnScreenCount = 0
                            
                            for _, corner in ipairs(Corners) do
                                local screenPos, onScreen = Camera:WorldToViewportPoint(corner.Position)
                                if onScreen then
                                    OnScreenCount = OnScreenCount + 1
                                    MinX = math.min(MinX, screenPos.X)
                                    MinY = math.min(MinY, screenPos.Y)
                                    MaxX = math.max(MaxX, screenPos.X)
                                    MaxY = math.max(MaxY, screenPos.Y)
                                end
                            end
                            
                            if OnScreenCount == 0 then
                                return {
                                    Height = 0,
                                    Width= 0, 
                                    Size = 0,
                                    Position = Vector2.new(0, 0),
                                    OnScreen = false, 
                                    Center2D = Vector2.new(),
                                }
                            end
                            
                            local Width = MaxX - MinX
                            local Height = MaxY - MinY
                            
                            local MinWidth = 0

                            if Library.Flags.BoxStyle.Value == "Corner" then 
                                MinWidth = 4
                            end
                            
                            local Size = Visuals:FloorVector(Vector2.new(math.max(Width, MinWidth), Height))
                            local Position = Visuals:FloorVector(Vector2.new(MinX, MinY))
                            local Center = Vector2.new(Position.X + Size.X / 2, Position.Y + Size.Y / 2)
                            
                            BoxData.Height = Height
                            BoxData.Width = Width
                            BoxData.Size = Size
                            BoxData.Position = Position
                            BoxData.Center2D = Center
                            BoxData.OnScreen = OnScreenCount > 3
                            
                            return BoxData                            
                            
                        elseif Library.Flags.BoxSize.Value == "Dynamic" then 
                            if not self.Info.Character then
                                return nil
                            end
                        
                            local BoxData = {}
                            local Root = self:GetRoot()
                        
                            if not Root then
                                return nil
                            end
                        
                            local RootPosition3D = Root.CFrame
                            if GameName == "Games Unite" then 
                                RootPosition3D = RootPosition3D * CFrame.new(0, 1.9, 0)
                            end 
                        
                            local RootPos, RootOnScreen = Camera:WorldToViewportPoint(RootPosition3D.p)
                            local SF = 1 / (RootPos.Z * math.tan(math.rad(Camera.FieldOfView / 2)) * 2) * 1000
                            local Width = Library.Flags.BoxWidth.Value * SF
                            local Height = Library.Flags.BoxHeight.Value * SF
                            local MinWidth, MaxHeight = 0, 6
                        
                            if Library.Flags.BoxStyle.Value == "Corner" then 
                                MinWidth = 4
                            end
                            
                            local TotalSize = Vector3.new()
                            local PartCount = 0
                            
                            for _, Part in ipairs(self.Info.Character:GetChildren()) do
                                if Part:IsA("BasePart") or Part:IsA("MeshPart") then
                                    if Part.Transparency < 1 then
                                        TotalSize = TotalSize + (Part.Size / 2)
                                        PartCount = PartCount + 1
                                    end
                                end
                            end
                            

                            PartCount = PartCount / 3.1
                            local HalfSize = Vector3.new(TotalSize.X / PartCount, TotalSize.Y / (PartCount / 2), TotalSize.Z / PartCount)

                            local Corners = {
                                RootPosition3D * CFrame.new(HalfSize.X, HalfSize.Y, HalfSize.Z),
                                RootPosition3D * CFrame.new(HalfSize.X, HalfSize.Y, -HalfSize.Z),
                                RootPosition3D * CFrame.new(HalfSize.X, -HalfSize.Y, HalfSize.Z),
                                RootPosition3D * CFrame.new(HalfSize.X, -HalfSize.Y, -HalfSize.Z),
                                RootPosition3D * CFrame.new(-HalfSize.X, HalfSize.Y, HalfSize.Z),
                                RootPosition3D * CFrame.new(-HalfSize.X, HalfSize.Y, -HalfSize.Z),
                                RootPosition3D * CFrame.new(-HalfSize.X, -HalfSize.Y, HalfSize.Z),
                                RootPosition3D * CFrame.new(-HalfSize.X, -HalfSize.Y, -HalfSize.Z)
                            }
                        
                            local MinX, MinY = math.huge, math.huge
                            local MaxX, MaxY = -math.huge, -math.huge
                            local OnScreenCount = 0
                        
                            for _, corner in ipairs(Corners) do
                                local screenPos, onScreen = Camera:WorldToViewportPoint(corner.Position)
                                if onScreen then
                                    OnScreenCount = OnScreenCount + 1
                                    MinX = math.min(MinX, screenPos.X)
                                    MinY = math.min(MinY, screenPos.Y)
                                    MaxX = math.max(MaxX, screenPos.X)
                                    MaxY = math.max(MaxY, screenPos.Y)
                                end
                            end
                        
                            if OnScreenCount == 0 then
                                return {
                                    Height = 0,
                                    Width= 0, 
                                    Size = 0,
                                    Position = Vector2.new(0, 0),
                                    OnScreen = false, 
                                    Center2D = Vector2.new(),
                                }
                            end
                            
                        
                            Width = MaxX - MinX
                            Height = MaxY - MinY
                        
                            local Size = Visuals:FloorVector(Vector2.new(math.max(Width, MinWidth), math.max(Height, MaxHeight)))
                            local Position = Visuals:FloorVector(Vector2.new(MinX, MinY))
                            local Center = Vector2.new(Position.X + Size.X / 2, Position.Y + Size.Y / 2)
                        
                            BoxData.Height = Height
                            BoxData.Width = Width
                            BoxData.Size = Size
                            BoxData.Position = Position
                            BoxData.Center2D = Center
                            BoxData.OnScreen = RootOnScreen
                        
                            return BoxData
                        end
                    end;

                    function ESPConstructor:GetMoney()
                        local Money = 0;
                        if GameName == "Project Delta" then 
                            if self.Object then 
                                local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                                if PlayerData then 
                                    for Index, Value in next, PlayerData:GetDescendants() do 
                                        if not Value:FindFirstAncestor("Vault") then 
                                            local ItemPrice = Value:GetAttribute("Price") 
                                            local Amount = Value:GetAttribute("Amount")
                                            
                                            if ItemPrice and Amount then 
                                                local TotalPrice = ItemPrice * Amount;
                                                Money = Money + tonumber(TotalPrice);
                                            elseif ItemPrice and not Amount then 
                                                Money = Money + tonumber(ItemPrice);
                                            end;
                                        end;
                                    end;
                                end;
                            end;
                        end;

                        if GameName == "Counter Blox" or GameName == "Arsenal" then 
                            --game:GetService("Players").LocalPlayer.Cash
                            local Cash = self.Object:FindFirstChild("Cash")
                            return Cash and Cash.Value or 0;

                        end;

                        return Money;
                    end;

                    function ESPConstructor:GetInventory()
                        local Text = nil

                        if self.Info.Class == "Player" then
                            local Backpack = nil
                        
                            if GameName == "The Streets" or GameName == "Universal"  then
                                Backpack = self.Object.Backpack
                                if IsStudio and self.Info.Class ~= "Player" then 
                                    Backpack = self.Object:FindFirstChild("Hotbar")
                                end
                            elseif GameName == "Criminality" then
                                Backpack = self.Object:FindFirstChild("Backpack")
                            elseif GameName == "Blackout" then 
                                local Character = self.Info.Character
                                if Character then 
                                    Backpack = Character.CurrentGear
                                end
                            elseif GameName == "Project Delta" then 
                                local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name)
                                if PlayerData then 
                                    Backpack = PlayerData:FindFirstChild("Clothing")
                                end
                            end
                        
                            if Backpack and #Backpack:GetChildren() > 0 then 
                                local Items = {}
                        
                                for _, Value in ipairs(Backpack:GetChildren()) do 
                                    if GameName == "Criminality" and (Value:IsA("Tool") and not Value.Name:find("_val") and Value.Name ~= "Lockpick" and Value.Name ~= "Fists" and Value.Name ~= "Radio" and Value.Name ~= "Knuckledusters" and Value.Name ~= "TeddyBloxpin") then 
                                        table.insert(Items, Value.Name)
                                    end
                                    if GameName == "Blackout" and Value:IsA("Folder") then 
                                        table.insert(Items, Value.Name)
                                    end
                                    if GameName == "Universal" or (GameName == "Project Delta" and not (Value.Name:find("Shirt") or Value.Name:find("Pants"))) then 
                                        table.insert(Items, Value.Name)
                                    end
                                end
                        
                                if #Items > 0 then 
                                    Text = "[" .. table.concat(Items, ", ") .. "]"
                                end
                            end
                        elseif IsStudio then 
                            local Backpack = self.Object:FindFirstChild(self.Info.Class == "Player" and "Backpack" or "Hotbar")
                        
                            if Backpack and #Backpack:GetChildren() > 0 then 
                                local Items = {}
                        
                                for _, Value in ipairs(Backpack:GetChildren()) do 
                                    if Value:IsA("Tool") then 
                                        table.insert(Items, Value.Name)
                                    end
                                    if IsStudio and Value:IsA("IntValue") then 
                                        table.insert(Items, Value.Name)
                                    end
                                end
                        
                                if #Items > 0 then 
                                    Text = "[" .. table.concat(Items, ", ") .. "]"
                                end
                            end
                        end
                        
                        return Text                        
                    end;

                    function ESPConstructor:GetAmmo(Weapon, WeaponName)
                        local Ammo, MaxAmmo, Passed = 0, 2, false
                        
                        if GameName == "Project Delta" and WeaponName ~= "None" and self.Info.Class == "Player" then
                            local Attachments = Weapon and Weapon:FindFirstChild("Attachments")
                            if Attachments then 
                                local Magazine = Attachments:FindFirstChild("Magazine")
                                if Magazine and #Magazine:GetChildren() > 0 then 
                                    local FirstMagazine = Magazine:GetChildren()[1]
                                    Ammo = FirstMagazine.ItemProperties:GetAttribute("LoadedAmmo")
                                    MaxAmmo = FirstMagazine.ItemProperties:GetAttribute("MaxLoadedAmmo")
                                    Passed = true
                                else
                                    local LoadedAmmo = Weapon:FindFirstChild("ItemProperties") and Weapon.ItemProperties:FindFirstChild("LoadedAmmo")
                                    if LoadedAmmo then
                                        Passed = true
                                        for _, Value in ipairs(LoadedAmmo:GetChildren()) do 
                                            Ammo = Ammo + Value:GetAttribute("Amount")
                                        end
                        
                                        if WeaponName:lower() == "sks" then 
                                            MaxAmmo = 10
                                        elseif WeaponName == "Mosin" or WeaponName:lower() == "izh81" then 
                                            MaxAmmo = 5
                                        elseif WeaponName == "RPG7" then 
                                            MaxAmmo = 1
                                        end
                                    end
                                end
                            end
                        elseif GameName == "Blackout" and Weapon and Weapon:FindFirstChild("GunStatus") then 
                            Ammo = Weapon.GunStatus:GetAttribute("Magazine")
                            MaxAmmo = Weapon.GunStatus:GetAttribute("MagazineCapacity")
                            Passed = true
                        elseif GameName == "Universal" and IsStudio and self.Info.Character:FindFirstChild("Ammo") then
                            Ammo = self.Info.Character:FindFirstChild("Ammo").Value
                            MaxAmmo = self.Info.Character:FindFirstChild("MaxAmmo").Value
                            Passed = true
                        elseif GameName == "Criminality" and Weapon and Weapon:FindFirstChild("IsGun") then 
                            local Values = Weapon:FindFirstChild("Values")
                            if Values and Values.SERVER_Ammo and Values.Ammo then
                                Ammo, MaxAmmo = Values.SERVER_Ammo.Value, Values.Ammo.Value
                                
                                if MaxAmmo < Ammo then 
                                    MaxAmmo = MaxAmmo + Ammo
                                end

                                if MaxAmmo == 0 then 
                                    MaxAmmo = 1
                                end;
                        
                                Passed = true
                            end
                        elseif GameName == "The Streets" and Weapon and Weapon:FindFirstChild("Ammo") then 
                            Ammo = Weapon.Ammo.Value; 
                            MaxAmmo = Weapon:FindFirstChild("MaxAmmo") and Weapon.MaxAmmo.Value or 15 
                            Passed = true
                        end;

                        if GameName == "Scorched Earth" and Weapon and self.Info.Data and self.Info.Data.equippedObjectThird and self.Info.Data.equippedObjectThird.itemData.staticData and self.Info.Data.equippedObjectThird.itemData.persistentData then 
                            MaxAmmo = self.Info.Data.equippedObjectThird.itemData.staticData.ammoCap
                            Ammo = self.Info.Data.equippedObjectThird.itemData.persistentData.ammoLoaded
                            
                            if Ammo and MaxAmmo then 
                                Passed = true 
                            end 
                        end 

                        if GameName == "Korrupt Zombies" and self.Info.Class ~= "Player" then
                            Ammo =  self.Info.Character:GetAttribute("Armor")
                            MaxAmmo = self.Info.Character:GetAttribute("MaxArmor")
                            if MaxAmmo == 0 then 
                                MaxAmmo = 1 
                            end 

                            Passed = true
                        end 

                        return Ammo, MaxAmmo, Passed
                    end;
                    
                    function ESPConstructor:IsDead()
                        local IsDead = false

                        if GameName == "Project Delta" then
                            if self.Info.CurrentHealth <= 0 then 
                                IsDead = true
                            end
                        elseif GameName == "Bad Business" or GameName == "Combat Warriors" or GameName == "State Of Anarchy" or GameName == "Universal" or GameName == "Counter Blox" or GameName == "Arsenal" then
                            if self.Info.CurrentHealth <= 0 or (self.Info.Character and self.Info.Character.Humanoid:GetState() == Enum.HumanoidStateType.Dead) then
                                IsDead = true
                            end
                        elseif GameName == "Korrupt Zombies" or GameName == "The Streets" or GameName == "Blood and Iron" or GameName == "Blackout" or GameName == "Criminality" or GameName == "Gunfight Arena" then
                            if self.Info.CurrentHealth == 0 or (self.Info.Character and self.Info.Character.Humanoid:GetState() == Enum.HumanoidStateType.Dead) then 
                                IsDead = true
                            end
                        elseif GameName == "Aftermath" then 
                            if self.Object and self.Object:GetAttribute("Dead") then 
                                IsDead = true 
                            end
                        end
                        
                        return IsDead
                    end;

                    function ESPConstructor:UpdateTeam()
                        self.Info.Team = GameFramework.EntityData[self.Info.Character.Name].replicated_data.team;
                    end;
                end;

                do --// Visibility shit
                    function ESPConstructor:Invisible()
                        local Components = self.Components;
                        if Components.Highlight then 
                            Components.Highlight.Enabled = false;
                        end;
                        Components.BoxOutline.Visible = false;
                        Components.Tracer.Visible = false;
                    end;
                end;

                do --// Update functions
                    function ESPConstructor:Update()
                        do --// Main
                            local Components = self.Components;
                            local Info = self.Info;
                            local CurrentCamera = Camera; 
                            
                            if self.Info.Character and Library.Flags.EnemiesEnabled and Library.Flags.EnemiesEnabled.Value and  ((Library.Flags.IncludeAiESP and Library.Flags.IncludeAiESP.Value and (self.Info.Class == "Player" or self.Info.Class == "AI")) or self.Info.Class == "Player") then 
                                if ((Library.Flags.ESPTeamCheck and Library.Flags.ESPTeamCheck.Value and (self.Info.Team ~= Utility.Team)) or not Library.Flags.ESPTeamCheck or (Library.Flags.ESPTeamCheck and not Library.Flags.ESPTeamCheck.Value)) then
                                    local Class = self.Info.Class;
                                    local Name = self.Info.Username;
                                    local DisplayName = self.Info.DisplayName;
                                    local Team = self.Info.Team;
                                    local ActualHealth, MaxHealth = self:GetHealth();

                                    local Offsets = self.Offsets;
                                    local RightOffset = Offsets.RightOffset;
                                    local TopOffset = Offsets.TopOffset;
                                    local BottomOffset = Offsets.BottomOffset;
                                    local LeftOffset = Offsets.LeftOffset; 

                                    local BottomBounds = 0;
                                    local TopBounds = 0;
                                    local LeftBounds = 0;
                                    local RightBounds = 0;

                                    local Root = self:GetRoot();

                                    do --// Main
                                        if Root then --// If Root (can add additional checks here);
                                            local BoxData = self:GetBoxSize();
                                            if BoxData then
                                                local Transparency = 0;
                                                local Height = BoxData.Height;
                                                local Width = BoxData.Width;
                                                local Size = BoxData.Size;
                                                local Position = BoxData.Position;
                                                local Center = UDim2.new(0, BoxData.Center2D.X, 0, BoxData.Center2D.Y);
                                                local OnScreen = BoxData.OnScreen;
                                                local Distance = self:GetDistance();
                                                local OverrideColor = nil;
                                                local TransitionColor = nil;

                                                if Library.Flags.HighlightVisible and Library.Flags.HighlightVisible.Value and self.Info.IsVisible then 
                                                    TransitionColor = Library.Flags.HighlightVisibleColor.Color
                                                end;

                                                if Library.Flags.UseRelationColors and Library.Flags.UseRelationColors.Value then 
                                                    if self.Info.IsFriendly then 
                                                        TransitionColor = Library.Flags.FriendlyColor.Color;
                                                        self.Info.LastTransitionColor = TransitionColor;
                                                    elseif Combat.Target == self.Object then 
                                                        TransitionColor = Library.Flags.TargetColor.Color;
                                                        self.Info.LastTransitionColor = TransitionColor;
                                                    elseif Combat.Target ~= self.Object and not table.find(Combat.Friendlies, self.Object) and not TransitionColor then 
                                                        TransitionColor = nil;
                                                    end;
                                                end;

                                                if not TransitionColor then 
                                                    self.Info.ColorTick = tick();
                                                else 
                                                    self.Info.NeutralTick = tick();
                                                end;

                                                local Weapon, WeaponName = self:GetWeapon();
                                                local Ammo, MaxAmmo, AmmoPassed = self:GetAmmo(Weapon, WeaponName);

                                                self.Info.CurrentAmmo = Ammo;
                                                self.Info.CurrentHealth = ActualHealth;
                                                
                                                do --// Animations
                                                    --// Death/Respawn Animations
                                                    if Library.Flags.Animations.Value and table.find(Library.Flags.SelectedAnimations.Value, "Death/Respawn Fade") then
                                                        if self:IsDead() then
                                                            if not self.Info.IsDying then
                                                                self.Info.DeathStartTick = tick()
                                                            end
                                                            self.Info.IsDying = true
                                                            local TimeDifference = tick() - self.Info.DeathStartTick
                                                            Transparency = math.min(1, TimeDifference / Library.Flags.FadeTime.Value)
                                                        elseif self.Info.CurrentHealth >= 0 then
                                                            if self.Info.IsDying then
                                                                self.Info.RespawnStartTick = tick()
                                                            end
                                                            local TimeDifference = tick() - self.Info.RespawnStartTick
                                                            Transparency = 1 - math.min(1, TimeDifference / Library.Flags.FadeTime.Value)
                                                            self.Info.IsDying = false
                                                        end
                                                        if not self.Info.IsDying then
                                                            self.Info.Tick = tick()
                                                        end
                                                    end

                                                    --// Health animations
                                                    if Library.Flags.Animations.Value and table.find(Library.Flags.SelectedAnimations.Value, "Health") then
                                                        if self.Info.CurrentOldHealth ~= self.Info.CurrentHealth or self.Info.TransitionStart ~= 0 then
                                                            if self.Info.TransitionStart == 0 then
                                                                self.Info.TransitionStart = tick()
                                                                self.Info.TransitionNewHealth = self.Info.CurrentHealth
                                                                self.Info.TransitionOldHealth = self.Info.CurrentOldHealth
                                                            elseif self.Info.TransitionOldHealth ~= self.Info.CurrentOldHealth then
                                                                local CurrentTime = tick() - self.Info.TransitionStart
                                                                local TransitionProgress = math.min(1, CurrentTime / Library.Flags.AnimChangeTime.Value)
                                                                self.Info.TransitionOldHealth = self.Info.TransitionOldHealth * (1 - TransitionProgress) + self.Info.TransitionNewHealth * TransitionProgress
                                                                self.Info.TransitionNewHealth = self.Info.CurrentHealth
                                                                self.Info.TransitionStart = tick()
                                                            end
                                                            local CurrentTime = tick() - self.Info.TransitionStart
                                                            local TransitionProgress = math.min(1, CurrentTime / Library.Flags.AnimChangeTime.Value)
                                                            self.Info.ActualHealth = self.Info.TransitionOldHealth * (1 - TransitionProgress) + self.Info.TransitionNewHealth * TransitionProgress
                                                            if TransitionProgress >= 1 then
                                                                self.Info.TransitionStart = 0
                                                                self.Info.TransitionNewHealth = 0
                                                                self.Info.TransitionOldHealth = self.Info.CurrentHealth
                                                                self.Info.CurrentOldHealth = self.Info.CurrentHealth
                                                            end
                                                        else
                                                            self.Info.ActualHealth = self.Info.CurrentHealth
                                                        end
                                                    else
                                                        self.Info.ActualHealth = ActualHealth
                                                    end

                                                    --// Ammo animations
                                                    if Library.Flags.Animations.Value and table.find(Library.Flags.SelectedAnimations.Value, "Ammo") then
                                                        if self.Info.CurrentOldAmmo ~= self.Info.CurrentAmmo or self.Info.TransitionStartAmmo ~= 0 then
                                                            if self.Info.TransitionStartAmmo == 0 then
                                                                self.Info.TransitionStartAmmo = tick()
                                                                self.Info.TransitionNewAmmo = self.Info.CurrentAmmo
                                                                self.Info.TransitionOldAmmo = self.Info.CurrentOldAmmo
                                                            elseif self.Info.TransitionOldAmmo ~= self.Info.CurrentOldAmmo then
                                                                local CurrentTime = tick() - self.Info.TransitionStartAmmo
                                                                local TransitionProgress = math.min(1, CurrentTime / Library.Flags.AnimChangeTime.Value)
                                                                self.Info.TransitionOldAmmo = self.Info.TransitionOldAmmo * (1 - TransitionProgress) + self.Info.TransitionNewAmmo * TransitionProgress
                                                                self.Info.TransitionNewAmmo = self.Info.CurrentAmmo
                                                                self.Info.TransitionStartAmmo = tick()
                                                            end
                                                            local CurrentTime = tick() - self.Info.TransitionStartAmmo
                                                            local TransitionProgress = math.min(1, CurrentTime / Library.Flags.AnimChangeTime.Value)
                                                            self.Info.ActualAmmo = self.Info.TransitionOldAmmo * (1 - TransitionProgress) + self.Info.TransitionNewAmmo * TransitionProgress
                                                            if TransitionProgress >= 1 then
                                                                self.Info.TransitionStartAmmo = 0
                                                                self.Info.TransitionNewAmmo = 0
                                                                self.Info.TransitionOldAmmo = self.Info.CurrentAmmo
                                                                self.Info.CurrentOldAmmo = self.Info.CurrentAmmo
                                                            end
                                                        else
                                                            self.Info.ActualAmmo = self.Info.CurrentAmmo
                                                        end
                                                    else
                                                        self.Info.ActualAmmo = Ammo
                                                    end

                                                end;

                                                if OnScreen and ((Library.Flags.LimitDistance.Value and Distance <= Library.Flags.RenderDistance.Value) or not Library.Flags.LimitDistance.Value) then --// OnScreen check
                                                    Components.Arrow.Visible = false;

                                                    --// Needed to be positioned for other elements.
                                                    Components.BoxOutline.Visible = true;
                                                    Components.BoxOutline.Position = UDim2.new(0, Position.X, 0, Position.Y);
                                                    Components.BoxOutline.Size = UDim2.new(0, Size.X, 0, Size.Y);

                                                    do --// Highlights
                                                        if Library.Flags.Highlights and Library.Flags.Highlights.Value and (self.Info.Class == "Player" or IsStudio) and GameName ~= "Fallen" and Components.Highlight then 
                                                            Components.Highlight.Enabled = true;

                                                            if TransitionColor ~= nil then 
                                                                Components.Highlight.FillColor = Library.Flags.FillColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick) / 0.2));
                                                                Components.Highlight.OutlineColor = Library.Flags.OutlineColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                            else 
                                                                Components.Highlight.FillColor = self.Info.LastTransitionColor:Lerp(Library.Flags.FillColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                                Components.Highlight.OutlineColor = self.Info.LastTransitionColor:Lerp(Library.Flags.OutlineColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                            end
                                                            
                                                            if not self.Info.IsDying then 
                                                                Components.Highlight.FillTransparency = Library.Flags.FillColor.Transparency;
                                                                Components.Highlight.OutlineTransparency = Library.Flags.OutlineColor.Transparency;
                                                            else 
                                                                Components.Highlight.FillTransparency = Transparency
                                                                Components.Highlight.OutlineTransparency = Transparency
                                                            end;
                                                            Components.Highlight.DepthMode = "AlwaysOnTop";
                                                            Components.Highlight.Adornee = self.Info.Character;
 
                                                        else
                                                            if Components.Highlight then 
                                                                Components.Highlight.Enabled = false;
                                                            end;
                                                        end;
                                                    end;

                                                    do --// Adornments
                                                        if tick() - self.Info.AdornmentTick > 10 then
                                                            if Library.Flags.Adornments and Library.Flags.Adornments.Value then 
                                                                for Index, Value in next, self.Info.Character:GetChildren() do 
                                                                    if Value:IsA("BasePart") and not self.Components.Adornments[Value] and not table.find({"PlayerCollision", "Hitbox","Particle Area", "Gun", "FakeHead", "HeadHB", "FaceHitBox", "humanoid_root_part", "hitbox", "HeadTopHitBox", "LeftHand", "RightHand"}, Value.Name) then 
                                                                        local AdornmentsTable = {}
                                                                        for Vis = 1, 2 do 
                                                                            if Value.Name == "Head" then 
                                                                                local Adornment = Instance.new("CylinderHandleAdornment"); do 
                                                                                    Adornment.Parent = Value;
                                                                                    Adornment.Height = 1.02;
                                                                                    Adornment.Radius = 0.65;
                                                                                    Adornment.CFrame = CFrame.new(Vector3.new(), Vector3.new(0, 1, 0));
                                                                                    Adornment.Adornee = Value;
                                                                                end;
                                                                                
                                                                                if Vis == 1 then 
                                                                                    Adornment.Radius = Adornment.Radius - 0.15;
                                                                                    Adornment.Height = Adornment.Height - 0.15;
                                                                                end;

                                                                                Adornment.Name = Vis == 1 and "Invisible" or "Visible";
                                                                                Adornment.ZIndex = Vis == 1 and 2 or 1;
                                                                                Adornment.AlwaysOnTop = Vis == 1;
                                                                                
                                                                                AdornmentsTable[Vis] = Adornment;
                                                                                self.Components.Adornments[Value] = AdornmentsTable;
                                                                            else 
                                                                                local Adornment = Instance.new("BoxHandleAdornment"); do 
                                                                                    Adornment.Parent = Value;
                                                                                    Adornment.Size = Value.Size + Vector3.new(0.1, 0.1, 0.1);
                                                                                    Adornment.Adornee = Value;
                                                                                end;

                                                                                if Vis == 1 then 
                                                                                    Adornment.Size = Adornment.Size - Vector3.new(0.15, 0.15, 0.15);
                                                                                end;

                                                                                Adornment.Name = Vis == 1 and "Invisible" or "Visible";
                                                                                Adornment.ZIndex = Vis == 1 and 2 or 1;
                                                                                Adornment.AlwaysOnTop = Vis == 1;

                                                                                AdornmentsTable[Vis] = Adornment;
                                                                                self.Components.Adornments[Value] = AdornmentsTable;
                                                                            end;
                                                                        end;
                                                                    end;

                                                                    if self.Components.Adornments[Value] then 
                                                                        --// Occluded
                                                                        self.Components.Adornments[Value][1].Visible = Library.Flags.Adornments.Value;
                                                                        self.Components.Adornments[Value][1].Color3 = Library.Flags.OccludedColor.Color;
                                                                        self.Components.Adornments[Value][1].Transparency = Library.Flags.OccludedColor.Transparency;
                                                                        --/ Visible
                                                                        self.Components.Adornments[Value][2].Visible = Library.Flags.Adornments.Value;
                                                                        self.Components.Adornments[Value][2].ZIndex = Library.Flags.GlowChams.Value and 9e9 or 1 
                                                                        self.Components.Adornments[Value][2].AlwaysOnTop = Library.Flags.GlowChams.Value and true or false
                                                                        self.Components.Adornments[Value][2].Color3 = Library.Flags.VisibleColor.Color;
                                                                        self.Components.Adornments[Value][2].Transparency = Library.Flags.VisibleColor.Transparency;
                                                                    end;
                                                                end;
                                                            end;

                                                            self.Info.AdornmentTick = tick();
                                                        end;
                                                    end;

                                                    do --// Boxes
                                                        local Corners = Components.Corner;
                                                        if Library.Flags.ESPBox and Library.Flags.ESPBox.Value then
                                                            Components.RegularStroke.Color = Library.Flags.BoxColor.Color;

                                                            if TransitionColor ~= nil then 
                                                                Components.RegularStroke.Color = Library.Flags.BoxColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                             else 
                                                                Components.RegularStroke.Color = self.Info.LastTransitionColor:Lerp(Library.Flags.BoxColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                            end;

                                                            do --// Corners
                                                                if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value == "Corner" then 
                                                                    --// Inline
                                                                    do
                                                                        Corners[1].Visible = true;
                                                                        Corners[1].ZIndex = 3;
                                                                        Corners[1].BackgroundTransparency = Transparency;
                                                                        Corners[1].BackgroundColor3 = Components.RegularStroke.Color;

                                                                        Corners[2].Visible = true;
                                                                        Corners[2].ZIndex = 3;
                                                                        Corners[2].BackgroundTransparency = Transparency;
                                                                        Corners[2].BackgroundColor3 = Components.RegularStroke.Color;

                                                                        Corners[3].Visible = true;
                                                                        Corners[3].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[3].BackgroundTransparency = Transparency;
                                                                        Corners[3].ZIndex = 3;
                                                                    
                                                                        Corners[4].Visible = true;
                                                                        Corners[4].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[4].ZIndex = 3;
                                                                        Corners[4].BackgroundTransparency = Transparency;

                                                                        Corners[5].Visible = true;
                                                                        Corners[5].ZIndex = 3;
                                                                        Corners[5].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[5].BackgroundTransparency = Transparency;

                                                                        Corners[6].Visible = true;
                                                                        Corners[6].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[6].ZIndex = 3;
                                                                        Corners[6].BackgroundTransparency = Transparency;

                                                                        Corners[7].Visible = true;
                                                                        Corners[7].ZIndex = 3;
                                                                        Corners[7].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[7].BackgroundTransparency = Transparency;

                                                                        Corners[8].Visible = true;
                                                                        Corners[8].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[8].BackgroundTransparency = Transparency;
                                                                        Corners[8].ZIndex = 3;
                                                                    end;
                                                                
                                                                    --// Outline
                                                                    do
                                                                        Corners[9].Visible = true;
                                                                        Corners[9].ZIndex = 2;
                                                                        Corners[9].BackgroundTransparency = Transparency;
                                                                        Corners[9].BorderSizePixel = 1;
                                                                        Corners[9].BackgroundColor3 = Components.RegularStroke.Color;

                                                                        Corners[10].Visible = true;
                                                                        Corners[10].ZIndex = 2;
                                                                        Corners[10].BorderSizePixel = 1;
                                                                        Corners[10].BackgroundTransparency = Transparency;
                                                                        Corners[10].BackgroundColor3 = Components.RegularStroke.Color;

                                                                        Corners[11].BorderSizePixel = 1;
                                                                        Corners[11].Visible = true;
                                                                        Corners[11].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[11].BackgroundTransparency = Transparency;
                                                                        Corners[11].ZIndex = 2;
                                                                        
                                                                        Corners[12].BorderSizePixel = 1;
                                                                        Corners[12].Visible = true;
                                                                        Corners[12].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[12].ZIndex = 2;
                                                                        Corners[12].BackgroundTransparency = Transparency;

                                                                        Corners[13].BorderSizePixel = 1;
                                                                        Corners[13].Visible = true;
                                                                        Corners[13].ZIndex = 2;
                                                                        Corners[13].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[13].BackgroundTransparency = Transparency;

                                                                        Corners[14].BorderSizePixel = 1;
                                                                        Corners[14].Visible = true;
                                                                        Corners[14].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[14].ZIndex = 2;
                                                                        Corners[14].BackgroundTransparency = Transparency;

                                                                        Corners[15].BorderSizePixel = 1;
                                                                        Corners[15].Visible = true;
                                                                        Corners[15].ZIndex = 2;
                                                                        Corners[15].BackgroundColor3 = Components.RegularStroke.Color;
                                                                        Corners[15].BackgroundTransparency = Transparency;

                                                                        Corners[16].BorderSizePixel = 1;
                                                                        Corners[16].Visible = true;
                                                                        Corners[16].BackgroundColor3 = Color3.fromRGB();
                                                                        Corners[16].BackgroundTransparency = Transparency;
                                                                        Corners[16].ZIndex = 2;
                                                                    end;
                                                                else
                                                                    if Corners[1].Visible then
                                                                        for Index = 1, 16 do 
                                                                            Corners[Index].Visible = false;
                                                                        end;
                                                                    end;
                                                                end;
                                                            end;

                                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value == "Corner" then 
                                                                Components.RegularStroke.Transparency = 1;
                                                                Components.OutlineStroke.Transparency = 1;
                                                            else 
                                                                Components.RegularStroke.Transparency = Transparency;
                                                                Components.OutlineStroke.Transparency = Transparency;
                                                            end;
                                                        else
                                                            if Corners[1].Visible then 
                                                                for Index = 1, 16 do 
                                                                    Corners[Index].Visible = false;
                                                                end;
                                                            end;
                                                            Components.RegularStroke.Transparency = 1;
                                                            Components.OutlineStroke.Transparency = 1;
                                                        end;
                                                    end;

                                                    do --// Healthbar
                                                        if self.Info.ActualHealth < 0 then 
                                                            self.Info.ActualHealth = 0;
                                                        end;

                                                        if Library.Flags.ESPHealthBar and Library.Flags.ESPHealthBar.Value then
                                                            local LerpedColor = Library.Flags["HealthBarColorLower"].Color:lerp(Library.Flags["HealthBarColorHigher"].Color, self.Info.ActualHealth / MaxHealth);

                                                            if (self.Info.ActualHealth < MaxHealth and Library.Flags.HealthWhenDamaged.Value or not Library.Flags.HealthWhenDamaged.Value) and Library.Flags.ESPHealth and Library.Flags.ESPHealth.Value and Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Left" and (Library.Flags.ESPAmmoBar and (((Library.Flags.ESPAmmoBar.Value == false and Library.Flags.AmmobarPosition.Value ~= "Left") or Library.Flags.ESPAmmoBar.Value == false) or Library.Flags.AmmobarPosition.Value ~= "Left") or not Library.Flags.ESPAmmoBar) then
                                                                Components.HealthValue.Visible = true;
                                                                Components.HealthValue.Text = tostring(math.floor(self.Info.ActualHealth));
                                                                Components.HealthValue.TextColor3 = Library.Flags.HealthColor.Color;
                                                                Components.HealthValue.TextTransparency = Transparency;
                                                                Components.HealthValue.TextSize = Library.SmallSize;
                                                                Components.HealthValue.FontFace = Library.SmallFont;
                                                            else 
                                                                Components.HealthValue.Visible = false;
                                                            end;

                                                            do --// Sizing for custom positions
                                                                if Library.Flags.HealthbarPosition and (Library.Flags.HealthbarPosition.Value == "Bottom" or Library.Flags.HealthbarPosition.Value == "Top") then 
                                                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                                        Components.Healthbar.Size = UDim2.new(1, 4, 0, 1);
                                                                    else 
                                                                        Components.Healthbar.Size = UDim2.new(1, 0, 0, 1);
                                                                    end;
                                                                    Components.HealthbarInvert.Size = UDim2.new(0, (Components.Healthbar.AbsoluteSize.X * (1 - self.Info.ActualHealth / MaxHealth)), 0, 1);
                                                                    Components.HealthbarInvert.AnchorPoint = Vector2.new(1, 0);
                                                                else 
                                                                    Components.HealthbarInvert.AnchorPoint = Vector2.new(0, 0);
                                                                    Components.Healthbar.Size = UDim2.new(0, 1, 1, 4)
                                                                    Components.HealthbarInvert.Size = UDim2.new(1, 0, 0, (Components.Healthbar.AbsoluteSize.Y* (1 - self.Info.ActualHealth / MaxHealth)));
                                                                end;
                                                            end;

                                                            do --// Positioning for custom positions 
                                                                if Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Bottom" then 
                                                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                                        Components.Healthbar.Position = BottomOffset + UDim2.new(0, -2, 0, BottomBounds + 2);
                                                                    else 
                                                                        Components.Healthbar.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds + 2);
                                                                    end;
                                                                    Components.HealthbarInvert.Position = UDim2.new(1, 0, 0, 0);
                                                                    BottomBounds = BottomBounds + 6;
                                                                elseif Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Top" then 
                                                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                                        Components.Healthbar.Position = TopOffset + UDim2.new(0, -2, 0, 12 + 1 - TopBounds);
                                                                    else 
                                                                        Components.Healthbar.Position = TopOffset + UDim2.new(0, 0, 0, 12 + 1 - TopBounds);
                                                                    end;
                                                                    Components.HealthbarInvert.Position = UDim2.new(1, 0, 0, 0);
                                                                    TopBounds = TopBounds + 1 + 4;
                                                                elseif Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Left" then
                                                                    Components.Healthbar.Position = LeftOffset + UDim2.new(0, LeftBounds, 0, 0);
                                                                    Components.HealthbarInvert.Position = UDim2.new(0, 0, 0, 0);
                                                                    LeftBounds = LeftBounds - (1 + 4);
                                                                elseif Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Right" then
                                                                    Components.Healthbar.Position = RightOffset + UDim2.new(0, RightBounds, 0, 0);
                                                                    Components.HealthbarInvert.Position = UDim2.new(0, 0, 0, 0);
                                                                    RightBounds = RightBounds + 1 + 6;
                                                                end;
                                                            end;

                                                            Components.Healthbar.BackgroundColor3 = LerpedColor;
                                                            Components.Healthbar.Visible = true;

                                                            Components.Healthbar.BackgroundTransparency  = Transparency;
                                                            Components.HealthbarInvert.BackgroundTransparency  = Transparency;
                                                        else 
                                                            Components.Healthbar.Visible = false;
                                                        end;
                                                    end;

                                                    do --// Ammobar 
                                                        if Library.Flags.ESPAmmoBar and Library.Flags.ESPAmmoBar.Value and WeaponName ~= "None" and AmmoPassed then
                                                            local LerpedColor = Library.Flags["AmmobarColorLower"].Color:lerp(Library.Flags["AmmobarColorHigher"].Color, self.Info.ActualAmmo / MaxAmmo);
                                                            do --// Sizing for custom positions
                                                                if Library.Flags.AmmobarPosition and (Library.Flags.AmmobarPosition.Value == "Bottom" or Library.Flags.AmmobarPosition.Value == "Top") then
                                                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                                        Components.Ammobar.Size = UDim2.new(1, 4, 0, 1);
                                                                    else 
                                                                        Components.Ammobar.Size = UDim2.new(1, 0, 0, 1);
                                                                    end;
                                                                    Components.AmmobarInvert.Size = UDim2.new(0, (Components.Ammobar.AbsoluteSize.X * (1 - self.Info.ActualAmmo / MaxAmmo)), 0, 1);
                                                                    Components.AmmobarInvert.AnchorPoint = Vector2.new(1, 0);
                                                                else 
                                                                    Components.AmmobarInvert.AnchorPoint = Vector2.new(0, 0);
                                                                    Components.Ammobar.Size = UDim2.new(0, 1, 1, 4)
                                                                    Components.AmmobarInvert.Size = UDim2.new(1, 0, 0, (Components.Ammobar.AbsoluteSize.Y* (1 - self.Info.ActualAmmo / MaxAmmo)));
                                                                end;
                                                            end;

                                                            do --// Positioning for custom positions 
                                                                if Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Bottom" then
                                                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                                        Components.Ammobar.Position = BottomOffset + UDim2.new(0, -2, 0, BottomBounds + 1 + 2);
                                                                        Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                                                    else 
                                                                        Components.Ammobar.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds + 1 + 2);
                                                                        Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                                                    end;
                                                                    BottomBounds = BottomBounds + 1 + 6;
                                                                elseif Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Top" then 

                                                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                                        Components.Ammobar.Position = TopOffset + UDim2.new(0, -2, 0, 12 + 1 - TopBounds);
                                                                        Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                                                    else 
                                                                        Components.Ammobar.Position = TopOffset + UDim2.new(0, 0, 0, 12 + 1 - TopBounds);
                                                                        Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                                                    end;
                                                                    TopBounds = TopBounds + 1 + 4;
                                                                elseif Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Left" then
                                                                    Components.AmmobarInvert.Position = UDim2.new(0, 0, 0, 0);
                                                                    Components.Ammobar.Position = LeftOffset + UDim2.new(0, LeftBounds, 0, 0);
                                                                    LeftBounds = LeftBounds - (1 + 6);
                                                                elseif Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Right" then
                                                                    Components.AmmobarInvert.Position = UDim2.new(0, 0, 0, 0);
                                                                    Components.Ammobar.Position = RightOffset + UDim2.new(0, RightBounds, 0, 0);
                                                                    RightBounds = RightBounds + 1 + 6;
                                                                end;
                                                            end;
                                                            Components.Ammobar.BackgroundColor3 = LerpedColor;
                                                            Components.Ammobar.Visible = true;

                                                            Components.Ammobar.BackgroundTransparency  = Transparency;
                                                            Components.AmmobarInvert.BackgroundTransparency  = Transparency;
                                                        else 
                                                            Components.Ammobar.Visible = false;
                                                        end;
                                                    end;
                                                    
                                                    do --// Flags
                                                        local TotalFlags = 0;

                                                        if Library.Flags.ESPFlags and Library.Flags.ESPFlags.Value then 
                                                            Components.Flags.Visible = true
                                                            Components.Flags.FontFace = Library.SmallFont
                                                            Components.Flags.TextSize = Library.SmallSize
                                                            Components.Flags.Position = RightOffset + UDim2.new(0, RightBounds, 0, -3)
                                                            Components.Flags.TextTransparency = Transparency
                                                            Components.Flags.RichText = true 
                                                            Components.Flags.TextYAlignment = Enum.TextYAlignment.Top
                                                        
                                                            local FlagsText = ""
                                                        
                                                            for _, Value in next, ESPConstructor.Flags do
                                                                if table.find(Library.Flags.Flags.Value, Value.Flag) and Value.Allow(self) then
                                                                    local Text = Value.Text(self)
                                                                    local Color = Library.Flags["Flag"..Value.Flag].Color
                                                                    Color = string.format("#%02X%02X%02X", Color.R * 255, Color.G * 255, Color.B * 255)
                                                                    if Text then
                                                                        TotalFlags = TotalFlags + 1
                                                                        if TotalFlags <= 2 or Distance < 263 then
                                                                            FlagsText = FlagsText .. string.format('<font color="%s">%s</font>\n', Color, Text)
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        
                                                            Components.Flags.Text = FlagsText
                                                            RightBounds = RightBounds + 10
                                                        else 
                                                            Components.Flags.Visible = false
                                                        end
                                                    end;

                                                    do --// Username
                                                        if Library.Flags.ESPName and Library.Flags.ESPName.Value then
                                                            Components.Username.Visible = true;
                                                            Components.Username.Text = self.Info.Username;
                                                            if TransitionColor ~= nil then 
                                                                Components.Username.TextColor3 = Library.Flags.NameColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                            else 
                                                                Components.Username.TextColor3 = self.Info.LastTransitionColor:Lerp(Library.Flags.NameColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                            end;
                                                            Components.Username.TextTransparency  = Transparency;

                                                            if Library.Flags.UsernamePosition and Library.Flags.UsernamePosition.Value == "Bottom" then 
                                                                Components.Username.TextYAlignment = Enum.TextYAlignment.Top;
                                                                Components.Username.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                                                BottomBounds = BottomBounds + Components.Username.TextSize + 1;
                                                            else 
                                                                Components.Username.TextYAlignment = Enum.TextYAlignment.Center;
                                                                Components.Username.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                                                TopBounds = TopBounds + Components.Username.TextSize + 1;

                                                            end;
                                                        else 
                                                            Components.Username.Visible = false;
                                                        end;
                                                    end;

                                                    do --// Inventory / Hotbar 
                                                        if Library.Flags.ESPInventory and Library.Flags.ESPInventory.Value then 
                                                            local Inventory = self:GetInventory()
                                                            if self.Object and Inventory then
                                                                Components.Inventory.Visible = true;

                                                                if TransitionColor ~= nil then 
                                                                    Components.Inventory.TextColor3 = Library.Flags.InventoryColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                                else 
                                                                    Components.Inventory.TextColor3 = self.Info.LastTransitionColor:Lerp(Library.Flags.InventoryColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                                end;

                                                                local ReturnedText = Inventory;
                                                                Components.Inventory.Text = ReturnedText;

                                                                Components.Inventory.TextTransparency = Transparency;

                                                                if Library.Flags.InventoryPosition and Library.Flags.InventoryPosition.Value == "Top" then 
                                                                    Components.Inventory.TextYAlignment = Enum.TextYAlignment.Center;
                                                                    Components.Inventory.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                                                    TopBounds = TopBounds + Components.Inventory.TextSize + 1;
                                                                else
                                                                    Components.Inventory.TextYAlignment = Enum.TextYAlignment.Top;
                                                                    Components.Inventory.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                                                    BottomBounds = BottomBounds + Components.Inventory.TextSize + 1;
                                                                end;
                                                            else 
                                                                Components.Inventory.Visible = false;
                                                            end;
                                                        else 
                                                            Components.Inventory.Visible = false;
                                                        end;

                                                    end;

                                                    do --// Weapon
                                                        if Library.Flags.ESPWeapon and Library.Flags.ESPWeapon.Value and WeaponName ~= "None" then
                                                            Components.Weapon.Visible = true;
                                                            Components.Weapon.Text = WeaponName;

                                                            if AmmoPassed then 
                                                                Components.Weapon.Text = Components.Weapon.Text .. " ["..tostring(Ammo).."/"..tostring(MaxAmmo).."]";
                                                            end;

                                                            if TransitionColor ~= nil then 
                                                                Components.Weapon.TextColor3 = Library.Flags.WeaponColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                            else 
                                                                Components.Weapon.TextColor3 = self.Info.LastTransitionColor:Lerp(Library.Flags.WeaponColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                            end;

                                                            Components.Weapon.TextTransparency  = Transparency;

                                                            if Library.Flags.WeaponPosition and Library.Flags.WeaponPosition.Value == "Top" then 
                                                                Components.Weapon.TextYAlignment = Enum.TextYAlignment.Center;
                                                                Components.Weapon.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                                                TopBounds = TopBounds + Components.Weapon.TextSize + 1;
                                                            else
                                                                Components.Weapon.TextYAlignment = Enum.TextYAlignment.Top;
                                                                Components.Weapon.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                                                BottomBounds = BottomBounds + Components.Weapon.TextSize + 1;
                                                            end;
                                                        else 
                                                            Components.Weapon.Visible = false;
                                                        end;
                                                    end;

                                                    do --// Weapon Image 
                                                        if Library.Flags.ESPWeaponImage and Library.Flags.ESPWeaponImage.Value and WeaponName ~= "None" and WeaponIcons[WeaponName:upper()] and GameName ~= "Fallen" then 
                                                            Components.WeaponImage.Image = WeaponIcons[WeaponName:upper()];
                                                            Components.WeaponImage.Visible = true;
                                                            Components.WeaponImage.ImageTransparency = Transparency;
                                                            Components.WeaponImage.Position = BottomOffset + UDim2.new(0.5, 0, 0, BottomBounds);
                                                            BottomBounds = BottomBounds + Components.WeaponImage.Size.Y.Offset;
                                                        else 
                                                            Components.WeaponImage.Visible = false;
                                                        end;
                                                    end;
                                                    
                                                    do --// Distance
                                                        if Library.Flags.ESPDistance and Library.Flags.ESPDistance.Value then
                                                            Components.Distance.Visible = true;
                                                            Components.Distance.Text = tostring(Distance) .. "".. DistanceConversions[PreferredDistances[GameName]].Suffix;

                                                            if TransitionColor ~= nil then 
                                                                Components.Distance.TextColor3 = Library.Flags.DistanceColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                            else 
                                                                Components.Distance.TextColor3 = self.Info.LastTransitionColor:Lerp(Library.Flags.DistanceColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                            end;
                                                            Components.Distance.TextTransparency  = Transparency;

                                                            if Library.Flags.DistancePosition and Library.Flags.DistancePosition.Value == "Top" then 
                                                                Components.Distance.TextYAlignment = Enum.TextYAlignment.Center;
                                                                Components.Distance.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                                                TopBounds = TopBounds + Components.Distance.TextSize + 1;
                                                            else
                                                                Components.Distance.TextYAlignment = Enum.TextYAlignment.Top;
                                                                Components.Distance.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                                                BottomBounds = BottomBounds + Components.Distance.TextSize + 1;
                                                            end;
                                                        else 
                                                            Components.Distance.Visible = false;
                                                        end;
                                                    end; 

                                                    do --// Tracers 
                                                        if Library.Flags.ESPTracers and Library.Flags.ESPTracers.Value then 
                                                            Components.Tracer.Visible = true
                                                            Components.Tracer.BackgroundTransparency = Transparency 
                                                            if TransitionColor ~= nil then 
                                                                Components.Tracer.BackgroundColor3 = Library.Flags.NameColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick)/ 0.2));
                                                            else 
                                                                Components.Tracer.BackgroundColor3 = self.Info.LastTransitionColor:Lerp(Library.Flags.TracerColor.Color, math.min(1, (tick() - self.Info.NeutralTick)/ 0.2));
                                                            end;
                                                            local To = Center + BottomOffset
                                                            local ScreenSize = Visuals.ESPContainer.AbsoluteSize
                                                            local From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)

                                                            To = Vector2.new(To.X.Offset, To.Y.Offset)

                                                            Visuals:RotateLine(Components.Tracer, 1, From, To)
                                                        else 
                                                            Components.Tracer.Visible = false
                                                        end 

                                                    end 

                                                else
                                                    --// Offscreen
                                                    self:Invisible();

                                                    local Arrow = Components.Arrow;

                                                    do --// Arrows 
                                                        if not OnScreen and ((not Library.Flags.LimitDistance.Value) or (Library.Flags.LimitDistance.Value and Distance <= Library.Flags.RenderDistance.Value)) and Library.Flags.ESPOffscreen and Library.Flags.ESPOffscreen.Value then
                                                            Arrow.Visible = true
                                                            if TransitionColor then
                                                                Arrow.ImageColor3 = Library.Flags.OffscreenColor.Color:Lerp(TransitionColor, math.min(1, (tick() - self.Info.ColorTick) / 0.2))
                                                            else
                                                                Arrow.ImageColor3 = self.Info.LastTransitionColor:Lerp(Library.Flags.OffscreenColor.Color, math.min(1, (tick() - self.Info.NeutralTick) / 0.2))
                                                            end
                                                            
                                                            if Transparency ~= 0 then
                                                                Arrow.ImageTransparency = Transparency
                                                            else 
                                                                Arrow.ImageTransparency = Library.Flags.OffscreenColor.Transparency;
                                                            end;

                                                            local RootPosition = Root.CFrame.p
                                                            local CameraPosition = Camera.CFrame.p
                                                            local ViewAngle = Camera.CFrame.LookVector
                                                        
                                                            local Projection = (RootPosition - ViewAngle)
                                                            local Dot = ViewAngle:Dot(Projection)
                                                        
                                                            if Dot <= 0 then
                                                                RootPosition = (ViewAngle + (Projection - ((ViewAngle * Dot) * 1.01)))
                                                            end
                                                        
                                                            local ScreenPos, _ = Camera:WorldToScreenPoint(RootPosition)
                                                        
                                                            local Center = Camera.ViewportSize / 2
                                                            local Direction = (Vector2.new(ScreenPos.X, ScreenPos.Y) - Vector2.new(Center.X, Center.Y)).Unit
                                                            local Radian = math.atan2(Direction.X, Direction.Y)
                                                            local Angle = (((math.pi * 2) / Library.Flags.OOVFOV.Value) * Radian)
                                                        
                                                            local ClampedPosition = (Vector2.new(Center.X, Center.Y) + (Direction * math.min(math.abs(((Center.Y - Library.Flags.OOVFOV.Value) / math.sin(Angle)) * Library.Flags.OOVFOV.Value), math.abs((Center.X - Library.Flags.OOVFOV.Value) / (math.cos(Angle)) / 2))))
                                                            Arrow.Position = UDim2.new(0, (ClampedPosition.X - (Arrow.Size.X.Offset / 2)), 0, ((ClampedPosition.Y - (Arrow.Size.Y.Offset / 2))))
                                                            Arrow.Rotation = (-math.deg(Radian) + 180)
                                                        
                                                            if Library.Flags.ArrowPoints.Value == "Three" then
                                                                Arrow.Image = "http://www.roblox.com/asset/?id=282305485"
                                                            else
                                                                Arrow.Image = "http://www.roblox.com/asset/?id=15000587389"
                                                            end
                                                        
                                                            if Library.Flags.DynamicArrows and Library.Flags.DynamicArrows.Value then
                                                                local Magnitude = ((1 / (Distance * 3)) * Library.Flags.RenderDistance.Value)
                                                                Magnitude = math.clamp(Magnitude, 14, 40)
                                                                Arrow.Size = UDim2.new(0, Magnitude, 0, Magnitude)
                                                            else
                                                                Arrow.Size = UDim2.new(0, Library.Flags.ArrowWidth.Value, 0, Library.Flags.ArrowHeight.Value)
                                                            end
                                                        else
                                                            Arrow.Visible = false
                                                        end
                                                        
                                                    end;
                                                end;
                                            else
                                                Components.Arrow.Visible = false;

                                                self:Invisible();
                                            end;
                                        else
                                            Components.Arrow.Visible = false;
                                            self:Invisible();
                                        end;
                                    end;
                                else 
                                    self:Invisible();
                                    self.Components.Arrow.Visible = false;
                                end;
                            else 
                                self:Invisible();
                                self.Components.Arrow.Visible = false;
                            end;
                        end
                    end;
                end;
                
                do --// Remove/Add
                    function ESPConstructor:Remove()
                        local Components = self.Components;

                        for Index, Value in next, Components.BoxOutline:GetChildren() do 
                            Value:Destroy();
                        end;

                        Components.Arrow:Destroy();
                        Components.BoxOutline:Destroy();
                        if type(Components.Highlight) ~= "boolean" then
                            Components.Highlight:Destroy()
                        end 

                        Visuals.Enemies[self.Object] = nil;
                    end;

                    function ESPConstructor:New(Enemy)
                        --// Components
                        local Tracer = Instance.new("Frame");

                        local BoxOutline = Instance.new("Frame");
                        local OutlineStroke = Instance.new("UIStroke");
                        local RegularStroke = Instance.new("UIStroke");

                        local Box = Instance.new("Frame");
                        local Username = ESPConstructor:Text();
                        local Weapon = ESPConstructor:Text();
                        local Distance = ESPConstructor:Text();
                        local Inventory = ESPConstructor:Text();

                        local Healthbar = Instance.new("Frame");
                        local HealthbarInvert = Instance.new("Frame");

                        local Ammobar = Instance.new("Frame");
                        local AmmobarInvert = Instance.new("Frame");


                        local Look = Instance.new("Frame"); 

                        local HealthValue = ESPConstructor:Text();
                        local Flags = ESPConstructor:Text();
                        local Highlight = Instance.new("Highlight");
                        local WeaponImage = Instance.new("ImageLabel");

                        local Arrow = Instance.new("ImageLabel");

                        local function NewLine()
                            local Frame = Instance.new("Frame", Visuals.ESPContainer);
                            Frame.Visible = false;
                            Frame.BorderSizePixel = 0;
                            Frame.BorderColor3 = Color3.new();
                            Frame.ZIndex = 2;
                            Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                            return Frame;
                        end;

                        do --// Components Properties
                            do --// Highlight
                                if Highlight then 
                                    Highlight.Parent = gethui();
                                    Highlight.Enabled = false;
                                    Highlight.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
                                end; 

                            end;

                            do --// Tracer 
                                Tracer.Parent = Visuals.ESPContainer;
                                Tracer.BackgroundColor3 = Color3.new(1, 1, 1);
                                Tracer.BorderSizePixel = 1;
                                Tracer.BorderColor3 = Color3.new(0, 0, 0);
                            end;

                            do --// Weapon Image 
                                WeaponImage.Parent = BoxOutline;
                                WeaponImage.Visible = false;
                                WeaponImage.Size = UDim2.new(0, 40, 0, 16);
                                WeaponImage.ScaleType = Enum.ScaleType.Crop;
                                WeaponImage.BackgroundTransparency = 1;
                                WeaponImage.Position = UDim2.new(0.5, 0, 0, 0);
                                WeaponImage.AnchorPoint = Vector2.new(0.5, 0);
                            end;

                            do --// Look 
                                Look.Parent = Visuals.ESPContainer;
                                Look.BackgroundColor3 = Color3.new(1, 1, 1);
                                Look.BorderSizePixel = 1;
                                Look.BorderColor3 = Color3.new(0, 0, 0);
                            end 

                            do --// Box
                                BoxOutline.Parent = Visuals.ESPContainer;
                                BoxOutline.BackgroundTransparency = 1.000;
                                BoxOutline.ZIndex = 2;
                                BoxOutline.Visible = false;

                                OutlineStroke.Parent = BoxOutline;
                                OutlineStroke.LineJoinMode = "Miter";
                                OutlineStroke.Thickness = 3;
                                OutlineStroke.Color = Color3.fromRGB();

                                RegularStroke.Parent = Box;
                                RegularStroke.LineJoinMode = "Miter";
                                RegularStroke.Thickness = 1;
                                RegularStroke.Color = Color3.fromRGB(255, 255, 255);

                                Box.Parent = BoxOutline;
                                Box.BackgroundTransparency = 1.000;
                                Box.Position = UDim2.new(0, -1, 0, -1);
                                Box.Size = UDim2.new(1, 2, 1, 2);
                                Box.ZIndex = 3;
                            end;

                            do --// Top Offset (Username)
                                Username.Parent = Box;
                                Username.Position = UDim2.new(0, 0, 0, -24);
                                Username.Size = UDim2.new(1, 0, 0, 24);
                            end;

                            do --// Bottom Offset (Distance)
                                Distance.Parent = Box
                                Distance.Position = UDim2.new(0, 0, 1, 0)
                                Distance.Size = UDim2.new(1, 0, 0, 24)
                            end;

                            do --// Bottom Offset (Weapon)
                                Weapon.Parent = Box
                                Weapon.Position = UDim2.new(0, 0, 1, 15);
                                Weapon.Size = UDim2.new(1, 0, 0, 24);
                            end;

                            do -- Inventory
                                Inventory.Parent = Box;
                                Inventory.Position = UDim2.new(0, 0, 1, 30);
                                Inventory.Size = UDim2.new(1, 0, 0, 24);
                            end;

                            do --// Healthbar
                                Healthbar.Parent = BoxOutline;
                                Healthbar.BackgroundColor3 = Color3.fromRGB(0, 255, 115);
                                Healthbar.BorderColor3 = Color3.fromRGB(0, 0, 0);
                                Healthbar.Position = UDim2.new(0, -6, 0, -2);
                                Healthbar.Size = UDim2.new(0, 2, 1, 4);
                                Healthbar.Visible = false;

                                HealthbarInvert.Parent = Healthbar;
                                HealthbarInvert.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
                                HealthbarInvert.BorderColor3 = Color3.fromRGB(0, 0, 0);
                                HealthbarInvert.BorderSizePixel = 0;
                                HealthbarInvert.Size = UDim2.new(1, 0, 0, 0);
                                
                            end;

                            do --// Ammobar
                                Ammobar.Parent = BoxOutline;
                                Ammobar.BackgroundColor3 = Color3.fromRGB(0, 255, 115);
                                Ammobar.BorderColor3 = Color3.fromRGB(0, 0, 0);

                                Ammobar.Position = UDim2.new(0, -6, 0, -2);
                                Ammobar.Size = UDim2.new(0, 2, 1, 4);
                                Ammobar.Visible = false;
                                
                                AmmobarInvert.Parent = Ammobar;
                                AmmobarInvert.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
                                AmmobarInvert.BorderColor3 = Color3.fromRGB(0, 0, 0);
                                AmmobarInvert.BorderSizePixel = 0;
                                AmmobarInvert.Size = UDim2.new(1, 0, 0, 0);
                            end;

                            do --// Health Value
                                HealthValue.Parent = HealthbarInvert;
                                HealthValue.Position = UDim2.new(0, -20, 1, 0);
                                HealthValue.Size = UDim2.new(0, 24, 0, 3);
                                HealthValue.TextXAlignment = Enum.TextXAlignment.Center;
                            end;

                            do --// Flags
                                Flags.Parent = BoxOutline;
                                Flags.Position = UDim2.new(0, -30, 1, 0);
                                Flags.Size = UDim2.new(0, 24, 0, 16);
                                Flags.TextXAlignment = Enum.TextXAlignment.Left;
                                Flags.Text = "Flags";
                            end;

                            do --// Arrow
                                Arrow.Visible = false;
                                Arrow.BackgroundTransparency = 1;
                                Arrow.Size = UDim2.new(0, 16, 0, 16);
                                Arrow.Parent = Visuals.ESPContainer;
                            end;
                        end;

                        --// Setting Components
                        local Components = {
                            Flags = Flags,
                            BoxOutline = BoxOutline;
                            Arrow = Arrow;
                            OutlineStroke = OutlineStroke;
                            RegularStroke = RegularStroke;
                            Box = Box;
                            Weapon = Weapon;
                            Username = Username;
                            Distance = Distance;
                            Ammobar = Ammobar;
                            Look = Look;
                            AmmobarInvert = AmmobarInvert;
                            Healthbar = Healthbar;
                            HealthbarInvert = HealthbarInvert;
                            HealthValue = HealthValue;
                            Highlight = Highlight;
                            Tracer = Tracer;
                            WeaponImage = WeaponImage;
                            Inventory = Inventory;
                            Corner = {};
                            Adornments = {};
                        };


                        do --// Corners creation
                            local Corners = Components.Corner
                            do --// Inline
                                Corners[1] = Instance.new("Frame");
                                Corners[1].Parent = BoxOutline
                                Corners[1].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[1].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[1].BorderSizePixel = 0
                                Corners[1].Size = UDim2.new(0.3, 0, 0, 1)
                                Corners[1].Position = UDim2.new(0, 0, 0, -2);

                                Corners[2] = Instance.new("Frame");
                                Corners[2].Parent = BoxOutline
                                Corners[2].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[2].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[2].BorderSizePixel = 0
                                Corners[2].Size = UDim2.new(0, 1, 0.3, 0)
                                Corners[2].Position = UDim2.new(0, 0, 0, -2)

                                Corners[3] = Instance.new("Frame");
                                Corners[3].Parent = BoxOutline
                                Corners[3].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[3].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[3].BorderSizePixel = 0
                                Corners[3].Position = UDim2.new(0.7, -1, 0, -2)
                                Corners[3].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[4] = Instance.new("Frame");
                                Corners[4].Parent = BoxOutline
                                Corners[4].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[4].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[4].BorderSizePixel = 0
                                Corners[4].Position = UDim2.new(1, -1, 0, -2)
                                Corners[4].Size = UDim2.new(0, 1, 0.3, 1)

                                Corners[5] = Instance.new("Frame");
                                Corners[5].Parent = BoxOutline
                                Corners[5].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[5].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[5].BorderSizePixel = 0
                                Corners[5].Position = UDim2.new(0, 0, 0.7, 1)
                                Corners[5].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[6] = Instance.new("Frame");
                                Corners[6].Parent = BoxOutline
                                Corners[6].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[6].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[6].BorderSizePixel = 0
                                Corners[6].Position = UDim2.new(0, 0, 1, 1)
                                Corners[6].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[7] = Instance.new("Frame");
                                Corners[7].Parent = BoxOutline
                                Corners[7].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[7].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[7].BorderSizePixel = 0
                                Corners[7].Position = UDim2.new(1, -1, 0.7, 1)
                                Corners[7].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[8] = Instance.new("Frame");
                                Corners[8].Parent = BoxOutline
                                Corners[8].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[8].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[8].BorderSizePixel = 0
                                Corners[8].Position = UDim2.new(0.7, 0, 1, 1)
                                Corners[8].Size = UDim2.new(0.3, 0, 0, 1);
                            end;

                            do --// Outline
                                Corners[9] = Instance.new("Frame");
                                Corners[9].Parent = BoxOutline
                                Corners[9].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[9].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[9].BorderSizePixel = 1
                                Corners[9].Size = UDim2.new(0.3, 0, 0, 1)
                                Corners[9].Position = UDim2.new(0, 0, 0, -2)

                                Corners[10] = Instance.new("Frame");
                                Corners[10].Parent = BoxOutline
                                Corners[10].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[10].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[10].BorderSizePixel = 1
                                Corners[10].Size = UDim2.new(0, 1, 0.3, 0)
                                Corners[10].Position = UDim2.new(0, 0, 0, -2);

                                Corners[11] = Instance.new("Frame");
                                Corners[11].Parent = BoxOutline
                                Corners[11].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[11].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[11].BorderSizePixel = 1
                                Corners[11].Position = UDim2.new(0.7, -1, 0, -2)
                                Corners[11].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[12] = Instance.new("Frame");
                                Corners[12].Parent = BoxOutline
                                Corners[12].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[12].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[12].BorderSizePixel = 1
                                Corners[12].Position = UDim2.new(1, -1, 0, -2)
                                Corners[12].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[13] = Instance.new("Frame");
                                Corners[13].Parent = BoxOutline
                                Corners[13].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[13].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[13].BorderSizePixel = 1
                                Corners[13].Position = UDim2.new(0, 0, 0.7, 1)
                                Corners[13].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[14] = Instance.new("Frame");
                                Corners[14].Parent = BoxOutline
                                Corners[14].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[14].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[14].BorderSizePixel = 1
                                Corners[14].Position = UDim2.new(0, 0, 1, 1)
                                Corners[14].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[15] = Instance.new("Frame");
                                Corners[15].Parent = BoxOutline
                                Corners[15].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[15].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[15].BorderSizePixel = 1
                                Corners[15].Position = UDim2.new(1, -1, 0.7, 1)
                                Corners[15].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[16] = Instance.new("Frame");
                                Corners[16].Parent = BoxOutline
                                Corners[16].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[16].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[16].BorderSizePixel = 1
                                Corners[16].Position = UDim2.new(0.7, 0, 1, 1)
                                Corners[16].Size = UDim2.new(0.3, 0, 0, 1);
                            end;
                        end;


                        --// Metatable
                        local Constructor = setmetatable({
                            Object = Enemy;
                            Components = Components;
                            Offsets = {
                                BottomOffset = UDim2.new(0, 0, 1, 3);
                                TopOffset = UDim2.new(0, 0, 0, -20);
                                LeftOffset = UDim2.new(0, -6, 0, -2);
                                RightOffset = UDim2.new(1, 6, 0, -2);
                            };

                            Info = {
                                --// Users Information
                                IsFriendly = false;
                                LastUpdate = tick();
                                Username = Enemy.Name;
                                DisplayName = Enemy:IsA("Player") and Enemy.DisplayName or Enemy.Name;
                                Class = Players:FindFirstChild(Enemy.Name) and "Player" or "AI";
                                LastHeldItem = nil;
                                LastKnownPosition = Vector3.new();
                                Character = nil;
                                Team = nil;

                                --// Adornment stuff
                                AdornmentTick = tick();

                                --// Fade animations
                                Tick = tick();
                                DeathStartTick = 0;
                                RespawnStartTick = 0;

                                --// Transition Color Anim
                                ColorTick = tick();
                                NeutralTick = tick();
                                LastTransitionColor = Color3.fromRGB(255, 255, 255);

                                --// Health Animations
                                CurrentHealth = 100;
                                CurrentOldHealth = 100;
                                TransitionStart = 0;
                                TransitionOldHealth = 100;
                                TransitionNewHealth = 100;
                                ActualHealth = 100;

                                --// Ammo Animations
                                CurrentAmmo = 1;
                                CurrentOldAmmo = 1;
                                TransitionStartAmmo = 0;
                                TransitionOldAmmo = 1;
                                TransitionNewAmmo = 1;
                                ActualAmmo = 1;
                            };
                        }, ESPConstructor);

                        if GameName == "Gunfight Arena" then 
                            Constructor.Info.Class = "Player";
                        end;


                        Visuals.Enemies[Enemy] = Constructor;
                        --// Return Constructor for useful cases;
                        return Constructor;
                    end;
                end;
            end)();
        end;

        do --// Targetting info 
            local InfoBorder = Instance.new("Frame")
            local InfoInner = Instance.new("Frame")
            local Accent = Instance.new("Frame")
            local Container = Instance.new("Frame")
            local UIListLayout = Instance.new("UIListLayout")
            local UIPadding = Instance.new("UIPadding")
            local InfoText = Instance.new("TextLabel", Container);

            do --// Component Properties
                InfoBorder.Parent = Visuals.InfoContainer;
                InfoBorder.BackgroundColor3 = Color3.fromRGB(45, 45, 45);
                InfoBorder.BorderColor3 = Color3.fromRGB(0, 0, 0);
                InfoBorder.Position = UDim2.new(0.0113074202, 0, 0.198780492, 0);
                InfoBorder.Size = UDim2.new(0, 208, 0, 350);
                InfoBorder.Visible = false;

                InfoInner.Parent = InfoBorder;
                InfoInner.BackgroundColor3 = Color3.fromRGB(17, 17, 17);
                InfoInner.BorderColor3 = Color3.fromRGB(0, 0, 0);
                InfoInner.Position = UDim2.new(0, 2, 0, 2);
                InfoInner.Size = UDim2.new(1, -4, 1, -4);

                Accent.Parent = InfoInner;
                Accent.BackgroundColor3 = Color3.fromRGB(93, 131, 255);
                Accent.BorderColor3 = Color3.fromRGB(0, 0, 0);
                Accent.BorderSizePixel = 0;
                Accent.Size = UDim2.new(1, 0, 0, 1);

                Container.Parent = InfoInner;
                Container.BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                Container.BackgroundTransparency = 1.000;
                Container.BorderColor3 = Color3.fromRGB(0, 0, 0);
                Container.BorderSizePixel = 0;
                Container.Size = UDim2.new(0, 204, 0, 346);

                UIPadding.Parent = Container;
                UIPadding.PaddingLeft = UDim.new(0, 4);
                UIPadding.PaddingTop = UDim.new(0, 2);

                InfoText.FontFace = Library.MenuFont;
                InfoText.TextSize = Library.TextSize;
                InfoText.BackgroundTransparency = 1;
                InfoText.TextColor3 = Color3.fromRGB(255, 255, 255);
                InfoText.RichText = true;
                InfoText.Size = UDim2.new(1, -4, 0, 9);
                InfoText.Position = UDim2.new(0, 2, 0, 3);
                InfoText.TextXAlignment = Enum.TextXAlignment.Left;
                InfoText.TextYAlignment = Enum.TextYAlignment.Top;
            end;

            do --// Functions

                function Visuals:UpdatePosition()
                    if Library.Flags.InfoPositionX then 
                        InfoBorder.Position = UDim2.new(Library.Flags.InfoPositionX.Value / 100, 0, Library.Flags.InfoPositionY.Value / 100, 0);
                    end 

                    if Library.Flags.RadarPositionX then 
                        Visuals.RadarFrame.Position = UDim2.new(Library.Flags.RadarPositionX.Value / 100, 0, Library.Flags.RadarPositionY.Value / 100, 0);
                    end
                end;

                function Visuals:UpdateInfo(Part, Target, Health, Inventory, Hotbar, Options)
                    InfoText.Text = "";

                    local InventoryList = Inventory ~= nil and Inventory:GetChildren() or {};
                    local HotbarList = Hotbar ~= nil and Hotbar:GetChildren() or {};

                    local Name = Target.Name;
                    local DistanceType = PreferredDistances[GameName];
                    local Conversion = DistanceConversions[DistanceType]
                    local Distance = math.floor((Part.Position - Camera.CFrame.p).Magnitude / Conversion.Conversion);
                    local Whitespace = "   ";
                    local TextBounds = 0;

                    do --// Looping through options
                        for Index, Value in next, Options do
                            task.spawn(function()
                                do --// Name 
                                    if Value == "Name" then
                                        InfoText.Text = InfoText.Text.. "[Name]      : "..Name.."\n";
                                        TextBounds = TextBounds + 14
                                    end;
                                end;

                                do --// Health
                                    if Value == "Health" then 
                                        InfoText.Text = InfoText.Text.."[Health]    : "..tostring(math.floor(Health)).."hp\n"
                                        TextBounds = TextBounds + 14
                                    end;
                                end;

                                do --/ Distance
                                    if Value == "Distance" then  
                                        InfoText.Text = InfoText.Text.. "[Distance]  : "..tostring(Distance)..Conversion.Suffix.."\n";
                                        TextBounds = TextBounds + 14
                                    end;
                                end; 

                                do --// Hotbar 
                                    if Value == "Hotbar" then 
                                        InfoText.Text = InfoText.Text.."[Hotbar]    :\n";
                                        TextBounds = TextBounds + 14
                                        for Index, Item in next, HotbarList do 
                                            InfoText.Text = InfoText.Text.. Whitespace .. Item.Name.."\n";
                                            TextBounds = TextBounds + 14
                                        end;
                                    end;
                                end;
                                do --// Inventory
                                    if Value == "Inventory" then 
                                        InfoText.Text = InfoText.Text.."[Inventory] :\n";
                                        TextBounds = TextBounds + 14
                                        for Index, Item in next, InventoryList do
                                            
                                            if not Library.Flags.FilterPlayers.Value then 
                                                TextBounds = TextBounds + 14
                                                if Item:FindFirstChild("Inventory") and #Item:FindFirstChild("Inventory"):GetChildren() ~= 0 then 
                                                    InfoText.Text = InfoText.Text..Whitespace.."["..Item.Name.."]\n";
                                                    for Index, Item in next, Item:FindFirstChild("Inventory"):GetChildren() do
                                                        InfoText.Text = InfoText.Text..Whitespace..Whitespace..Item.Name.."\n";
                                                        TextBounds = TextBounds + 14
                                                    end;
                                                else 
                                                    InfoText.Text = InfoText.Text..Whitespace.."["..Item.Name.."]\n";
                                                end;
                                            else 
                                                if Item:FindFirstChild("Inventory") and #Item:FindFirstChild("Inventory"):GetChildren() ~= 0 then
                                                    local WasParentAllowed = false;

                                                    if table.find(Library.Flags.FilteredItems.Value, Item.Name) then 
                                                        WasParentAllowed = true;
                                                        InfoText.Text = InfoText.Text..Whitespace.."["..Item.Name.."]\n";
                                                        TextBounds = TextBounds + 14
                                                    end;

                                                    for Index, Item in next, Item:FindFirstChild("Inventory"):GetChildren() do
                                                        if table.find(Library.Flags.FilteredItems.Value, Item.Name) then 
                                                            TextBounds = TextBounds + 14
                                                            if WasParentAllowed then 
                                                                InfoText.Text = InfoText.Text..Whitespace..Whitespace..Item.Name.."\n";
                                                            else 
                                                                InfoText.Text = InfoText.Text..Whitespace..Item.Name.."\n";
                                                            end;
                                                        end;
                                                    end;
                                                else

                                                    if table.find(Library.Flags.FilteredItems.Value, Item.Name) then 
                                                        TextBounds = TextBounds + 14
                                                        InfoText.Text = InfoText.Text..Whitespace.."["..Item.Name.."]\n";
                                                    end;
                                                end;
                                            end;
                                        end;
                                    end;
                                end;
                            end);
                        end;
                    end;

                    do --// Sizing 
                        InfoBorder.Size = UDim2.new(0, 208, 0, TextBounds + 10)
                    end;
                    Visuals:UpdatePosition()
                end;
            end;

            Visuals.InfoFrame = InfoBorder;
            Visuals.InfoContainer = Container;
            Visuals.InfoAccent = Accent;
            Visuals.InfoText = InfoText;
        end;

        do --// Standard flag creation
            ESPConstructor:AddFlag({
                Name = "Visible",
                Flag = "Visible",
                Text = function(self, IsPreview)
                    if IsPreview then 
                        return "VIS";
                    end;

                    local IsVisible = self.Info.IsVisible 

                    return IsVisible and "VIS" or nil
                end;

                Allow = function(self)
                    return true;
                end;
            });


            ESPConstructor:AddFlag({
                Name = "Staff",
                Flag = "Staff",
                Text = function(self, IsPreview)
                    if IsPreview then 
                        return "STAFF | ADMIN";
                    end;

                    if self.Info.Class == "Player" then 
                        if Staff.Detected[self.Object.UserId] then 
                            return "STAFF | "..Staff.Detected[self.Object.UserId].Role
                        end 
                    end 
                end;

                Allow = function(self)
                    if self.Info.Class == "Player" then 
                        if Staff.Detected[self.Object.UserId] then 
                            return true
                        end 
                    end 
                end;
            });

            ESPConstructor:AddFlag({
                Name = "Telemetry",
                Flag = "Telemetry",
                Text = function(self, IsPreview)
                    if IsPreview then 
                        return "ETHEREAL";
                    end;

                    if self.Info.Class == "Player" then 
                        if Websocket.ConnectedUsers[self.Object.Name] then 
                            return "ETHEREAL";
                        end
                    end 
                end;

                Allow = function(self)
                    if IsPreview then 
                        return true
                    end 

                    if self.Info.Class == "Player" then 
                        if Websocket.ConnectedUsers[self.Object.Name] then 
                            return true;
                        end
                    end 
                end;
            });

            if GameName == "Scorched Earth" then 
                ESPConstructor:AddFlag({
                    Name = "Class",
                    Flag = "Class",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "GUNNER";
                        end;
    
                        local Class = self.Info.Data and self.Info.Data.class 
    
                        return Class and Class or nil
                    end;
    
                    Allow = function(self)
                        return true;
                    end;
                });
            end

            if GameName == "Aftermath" then 
                ESPConstructor:AddFlag({
                    Name = "Squad",
                    Flag = "Squad",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "SQUAD: OSCAR";
                        end;
    
                        local SQUAD = self.Object:GetAttribute("SquadName")
    
                        return SQUAD and "SQUAD: "..self.Object:GetAttribute("SquadName") or "SQUAD: OSCAR"
                    end;
    
                    Allow = function(self)
                        return self.Object:GetAttribute("SquadName");
                    end;
                });
            end 

            if GameName == "Lone Survival" then 
                ESPConstructor:AddFlag({
                    Name = "KD",
                    Flag = "KD",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "KD 10.0";
                        end;
    
                        local Kills = self.Object:GetAttribute("PKD_K")
                        local Deaths = self.Object:GetAttribute("PKD_D")

                        if Deaths < 1 then 
                            Deaths = 1
                        end; 

                        local KD = Kills / Deaths
                        KD = math.floor(KD * 10 + 0.5) / 10

                        return "KD " .. tostring(KD)
                    end;
    
                    Allow = function(self)
                        return true;
                    end;
                });
            end;

            if GameName == "The Streets" then 
                ESPConstructor:AddFlag({
                    Name = "Vest",
                    Flag = "Vest",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "VEST";
                        end;
    
                        local Character = self.Info.Character 
                        
                        if Character and Character:FindFirstChild("BulletResist") then 
                            return "VEST";
                        end;
                    end;
    
                    Allow = function(self, IsPreview)
                        if IsPreview then return true end;
                        local Character = self.Info.Character 

                        if Character and Character:FindFirstChild("BulletResist") then 
                            return true;
                        end;

                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Stamina",
                    Flag = "Stamina",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "S: 100";
                        end;
    
                        local Character = self.Info.Character 
                        
                        if Character and Character:FindFirstChild("Stamina") then 
                            return "S: "..tostring(math.floor(Character.Stamina.Value))
                        end;
                    end;
    
                    Allow = function(self)
                        return true
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "KO",
                    Flag = "KO",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "KO: 100";
                        end;
    
                        local Character = self.Info.Character 
                        
                        if Character and Character:FindFirstChild("KO") then 
                            return "KO: "..tostring(math.floor(Character.KO.Value))
                        end;
                    end;
    
                    Allow = function(self, IsPreview)
                        return true
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Displayed Clan",
                    Flag = "Displayed Clan",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "PROJECT EDEL";
                        end;
    
                        local Character = self.Info.Character 
                        
                        if Character and Character:FindFirstChildOfClass("Model") then 
                            local Model = Character:FindFirstChildOfClass("Model")
                            if Model.Name ~= Character.Name then 
                                local ClanName = Model.Name; 
                                ClanName = string.match(ClanName, "^(.-)\n")

                                if ClanName then 
                                    return "CLAN: "..ClanName
                                end;
                            end;
                        end;
                    end;
    
                    Allow = function(self)
                        local Character = self.Info.Character 

                        if Character and Character:FindFirstChildOfClass("Model") then 
                            local Model = Character:FindFirstChildOfClass("Model")
                            if Model.Name ~= Character.Name then 
                                local ClanName = Model.Name; 
                                ClanName = string.match(ClanName, "^(.-)\n")

                                if ClanName then 
                                    return true
                                end;
                            end;
                        end;

                        return false
                    end;
                });

                
                ESPConstructor:AddFlag({
                    Name = "Reloading",
                    Flag = "Reloading",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "Reloading";
                        end;
    
                        local Character = self.Info.Character 
                        local Root = self:GetRoot() 

                        if Root and Root:FindFirstChild("Reload") then 
                            if Root:FindFirstChild("Reload") then 
                                return "RELOADING"
                            end;
                        end;
                    end;
    
                    Allow = function(self, IsPreview)
                        if IsPreview then return true end;

                        local Character = self.Info.Character 
                        local Root = self:GetRoot() 

                        if Root and Root:FindFirstChild("Reload") then 
                            if Root:FindFirstChild("Reload") then 
                                return true
                            end;
                        end;

                        return false
                    end;
                });
            end;

            if GameName == "Counter Blox"  then 
                ESPConstructor:AddFlag({
                    Name = "Money",
                    Flag = "Money",
                    Text = function(self, IsPreview)
                        if IsPreview then return "39130$" end;
                        local Money = self:GetMoney()

                        if Money then 
                            return tostring(Money).."$"
                        end;
                        return nil;
                    end;
                    Allow = function(self)
                        return true
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Ping",
                    Flag = "Ping",
                    Text = function(self, IsPreview)
                        if IsPreview then return "60ms" end;
                        local Ping = self.Object:FindFirstChild("Ping")

                        if Ping then 
                            return Ping.Value .. "ms"
                        end;
                        return nil;
                    end;
                    Allow = function(self)
                        return true
                    end;
                });
            end;

            if GameName == "Arsenal"  then 
                ESPConstructor:AddFlag({
                    Name = "Ping",
                    Flag = "Ping",
                    Text = function(self, IsPreview)
                        if IsPreview then return "60ms" end;
                        local Ping = self.Object:FindFirstChild("Ping")

                        if Ping then 
                            return Ping.Value .. "ms"
                        end;
                        return nil;
                    end;
                    Allow = function(self)
                        return true
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "FPS",
                    Flag = "FPS",
                    Text = function(self, IsPreview)
                        if IsPreview then return "60 FPS" end;
                        local FPS = self.Object:FindFirstChild("FPS")

                        if FPS then 
                            return FPS.Value .. " FPS"
                        end;
                        return nil;
                    end;
                    Allow = function(self)
                        return true
                    end;
                });
            end;

            if GameName == "Gunfight Arena" then 
                ESPConstructor:AddFlag({
                    Name = "Platform",
                    Flag = "Platform",
                    Text = function(self, IsPreview)
                        if IsPreview then return "PC"; end;
                        local Object = self.Object;
                        local Platform = Object:GetAttribute("Platform");
                        return Platform and tostring(Platform) or "PC";
                        
                    end;

                    Allow = function(self)
                        return true;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Ping",
                    Flag = "Ping",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "100ms";
                        end;

                        local Object = self.Object;
                        local Ping = Object:GetAttribute("Ping");
                        return Ping and tostring(Ping).."ms" or "100ms";
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });
            end;

            if GameName == "Project Delta" then 
                ESPConstructor:AddFlag({
                    Name = "Money",
                    Flag = "Money",
                    Text = function(self, IsPreview)
                        if IsPreview then return "39130 RUB" end;
                        local Money = self:GetMoney()

                        if Money then 
                            return "RUB. "..tostring(math.floor(Money))
                        end;
                        return nil;
                    end;
                    Allow = function(self)
                        if Combat.Target == self.Object and self.Info.Class == "Player" then 
                            return true;
                        end;
                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Clan",
                    Flag = "Clan",
                    Text = function(self, IsPreview)
                        if IsPreview then return "CLAN"; end;
                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Clan = PlayerData:FindFirstChild("Status").Journey.Clan:GetAttribute("CurrentClan")
                            
                            if Clan and tostring(Clan) ~= "nil" then 
                                return tostring(Clan);
                            end;
                        end;
                        return nil;
                    end;
                    Allow = function(self)
                        if self.Info.Class == "Player" then 
                            return true;
                        end;
                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "KD",
                    Flag = "KD",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "10.0 KD";
                        end;

                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Kills = PlayerData:FindFirstChild("Status").Journey.Statistics:GetAttribute("Kills");
                            local Deaths = PlayerData:FindFirstChild("Status").Journey.Statistics:GetAttribute("Deaths");
                            if Deaths < 1 then 
                                Deaths = 1;
                            end;

                            local KDRaw = Kills/Deaths;
                            return "K/D: ".. string.sub(tostring(KDRaw), 1, 4);
                        end;

                        return nil;
                    end;
                    Allow = function(self)
                        if self.Info.Class == "Player" then 
                            return true;
                        end;
                        return false;
                    end;
                });

                --[[ESPConstructor:AddFlag({
                    Flag = "Stance",
                    Name = "Stance", 
                    Text = function(self, IsPreview)
                        if IsPreview then return "CROUCH" end;
                        local Character = self.Info.Character; 
                        local Humanoid = Character and self.Info.Character:FindFirstChild("Humanoid");

                        if Humanoid then
                            local CrouchId = "rbxassetid://8544373208";
                            for Index, Value in next, Humanoid:GetPlayingAnimationTracks() do 
                                if Value.Animation.AnimationId == CrouchId then 
                                    return "CROUCH"
                                end;
                            end;
                        end;
                    end;

                    Allow = function(self, IsPreview)
                        if IsPreview then return true end
                        local Character = self.Info.Character; 
                        local Humanoid = Character and self.Info.Character:FindFirstChild("Humanoid");

                        if Humanoid then
                            local CrouchId = "rbxassetid://8544373208";
                            for Index, Value in next, Humanoid:GetPlayingAnimationTracks() do 
                                if Value.Animation.AnimationId == CrouchId then 
                                    return true
                                end;
                            end;
                        end;
                        return false;
                    end;
                });]]
                
                ESPConstructor:AddFlag({
                    Flag = "Aiming",
                    Name = "Aiming", 
                    Text = function(self, IsPreview)
                        if IsPreview then return "SCOPE"; end;
                        local Character = self.Info.Character; 
                        local Humanoid = Character and self.Info.Character:FindFirstChild("Humanoid");

                        if Humanoid then
                            local Weapon = self:GetWeapon();

                            if Weapon and Weapon:FindFirstChild("SettingsModule") then 
                                local Module = require(Weapon.SettingsModule);
                                local AimId = Module.Animations.ThirdPerson.Aim;

                                for Index, Value in next, Humanoid:GetPlayingAnimationTracks() do 
                                    if Value.Animation.AnimationId == AimId then 
                                        return "SCOPED"
                                    end;
                                end;
                            end;
                        end;
                    end;

                    Allow = function(self, IsPreview)
                        if IsPreview then return true end
                        local Character = self.Info.Character; 
                        local Humanoid = Character and self.Info.Character:FindFirstChild("Humanoid");

                        if Humanoid then
                            local Weapon = self:GetWeapon();

                            if Weapon and Weapon:FindFirstChild("SettingsModule")  then 
                                local Module = require(Weapon.SettingsModule);
                                local AimId = Module.Animations.ThirdPerson.Aim;

                                for Index, Value in next, Humanoid:GetPlayingAnimationTracks() do 
                                    if Value.Animation.AnimationId == AimId then 
                                        return true
                                    end;
                                end;
                            end;
                        end;

                        return false
                    end;
                });

                --[[ESPConstructor:AddFlag({
                    Flag = "Prime",
                    Name = "Prime", 
                    Text = function(self, IsPreview)
                        if IsPreview then return "PRIME"; end;
                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Passes = PlayerData.Status.Purchases.Passes
                            if Passes:GetAttribute("GivenPrimePass") then 
                                return "PRIME"
                            end;
                        end;
                    end;

                    Allow = function(self)
                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Passes = PlayerData.Status.Purchases.Passes
                            if Passes:GetAttribute("GivenPrimePass") then 
                                return true
                            end;
                        end;

                        return false
                    end;
                });]]

                ESPConstructor:AddFlag({
                    Name = "Extracting",
                    Flag = "Extracting",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "EXTRACT - 5s";
                        end;

                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Exiting = PlayerData.Status.GameplayVariables.Exiting
                            if Exiting:GetAttribute("Value") ~= -1 then 
                                return "EXTRACT - "..tostring(Exiting:GetAttribute("Value"))
                            end;
                        end;
                    end;

                    Allow = function(self)
                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Exiting = PlayerData.Status.GameplayVariables.Exiting
                            if Exiting:GetAttribute("Value") ~= -1 then 
                                return true
                            end;
                        end;

                        return false
                    end;
                })

                ESPConstructor:AddFlag({
                    Flag = "Elite",
                    Name = "Elite", 
                    Text = function(self, IsPreview)
                        if IsPreview then return "ELITE" end;
                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Passes = PlayerData.Status.Purchases.Passes
                            if Passes:GetAttribute("GivenElitePass") then 
                                return "ELITE"
                            end;
                        end;
                    end;

                    Allow = function(self)
                        local PlayerData = ReplicatedStorage.Players:FindFirstChild(self.Object.Name);
                        if PlayerData then
                            local Passes = PlayerData.Status.Purchases.Passes
                            if Passes:GetAttribute("GivenElitePass") then 
                                return true
                            end;
                        end;

                        return false
                    end;
                });
            end;

            if GameName == "Combat Warriors" then 
                ESPConstructor:AddFlag({
                    Name = "Level",
                    Flag = "Level",
                    Text = function(self, IsPreview)
                        if IsPreview then return "LVL: 20"; end;
                        local Level = self.Object.leaderstats.Level.Value;

                        return "LVL: "..tostring(Level);
                    end;

                    Allow = function(self)
                        if self.Info.Class == "Player" then 
                            return true;
                        end;
                        return false;
                    end;
                });

            end

            if GameName == "Blackout" then 
                ESPConstructor:AddFlag({
                    Name = "Bounty",
                    Flag = "Bounty",
                    Text = function(self, IsPreview)
                        if IsPreview then return "BTY: 200$" end;
                        local Bounty = self.Object:GetAttribute("Bounty");

                        return "BTY: "..tostring(Bounty);
                    end;
                    Allow = function(self)
                        if self.Info.Class == "Player" then 
                            return true;
                        end;
                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Level",
                    Flag = "Level",
                    Text = function(self, IsPreview)
                        if IsPreview then return "LVL: 20"; end;
                        local Level = self.Object:GetAttribute("Level");

                        return "LVL: "..tostring(Level);
                    end;

                    Allow = function(self)
                        if self.Info.Class == "Player" then 
                            return true;
                        end;
                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Stance",
                    Flag = "Stance",
                    Text = function(self, IsPreview) 
                        if IsPreview then return "CROUCH" end;

                        if self.Object and self.Object:GetAttribute("Sliding") then 
                            return "SLIDE";
                        end;

                        if self.Object and self.Object:GetAttribute("ServerCrouching") then 
                            return "CROUCH";
                        end;
                    end;

                    Allow = function(self, IsPreview) 
                        if IsPreview then return true; end;

                        if self.Object and self.Object:GetAttribute("Sliding") then 
                            return true;
                        end;

                        if self.Object and self.Object:GetAttribute("ServerCrouching") then 
                            return true;
                        end;

                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Aiming",
                    Flag = "Aiming",
                    Text = function(self, IsPreview) 
                        if IsPreview then return "SCOPE" end;

                        if self.Object and self.Object:GetAttribute("ServerAiming") then 
                            return "SCOPE";
                        end;
                    end;

                    Allow = function(self, IsPreview) 
                        if IsPreview then return true; end;

                        if self.Object and self.Object:GetAttribute("ServerAiming") then 
                            return true;
                        end;

                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Energized",
                    Flag = "Energized",
                    Text = function(self, IsPreview) 
                        if IsPreview then return "ENERG." end;

                        if self.Object and self.Object:GetAttribute("Energized") then 
                            return "ENERG.";
                        end;
                    end;

                    Allow = function(self, IsPreview) 
                        if IsPreview then return true; end;

                        if self.Object and self.Object:GetAttribute("Energized") then 
                            return true;
                        end;

                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Looting",
                    Flag = "Looting",
                    Text = function(self, IsPreview) 
                        if IsPreview then return "LOOT." end;

                        if self.Object and self.Object:GetAttribute("Looting") then 
                            return "LOOT.";
                        end;
                    end;

                    Allow = function(self, IsPreview) 
                        if IsPreview then return true; end;

                        if self.Object and self.Object:GetAttribute("Looting") then 
                            return true;
                        end;

                        return false;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Lockpicking",
                    Flag = "Lockpicking",
                    Text = function(self, IsPreview) 
                        if IsPreview then return "LOCKPICK" end;

                        if self.Object and self.Object:GetAttribute("Minigaming") then 
                            return "LOCKPICK";
                        end;
                    end;

                    Allow = function(self, IsPreview) 
                        if IsPreview then return true; end;

                        if self.Object and self.Object:GetAttribute("Minigaming") then 
                            return true;
                        end;

                        return false;
                    end;
                });
            end;

            if GameName == "Criminality" then 
                --SlayerArmour
                --[[ESPConstructor:AddFlag({
                    Name = "Fallen",
                    Flag = "Fallen",
                    Text = function(self, IsPreview)
                        if IsPreview then return "FALLEN"; end;
                        local Character = self.Info.Character;
                        if Character then 
                            local IsFallen = Character:FindFirstChild("Fallen");
                            return IsFallen and "FALLEN" or nil;
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });]]

                --[[ESPConstructor:AddFlag({
                    Name = "Necromancer",
                    Flag = "Necromancer",
                    Text = function(self, IsPreview)
                        if IsPreview then 
                            return "NECROMANCER"; 
                        end;

                        local Character = self.Info.Character;
                        if Character then 
                            local IsFallen = Character:FindFirstChild("Necromancer");
                            return IsFallen and "NECROMANCER" or nil;
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });]]

                --[[ESPConstructor:AddFlag({
                    Name = "Thermals",
                    Flag = "Thermals",
                    Text = function(self, IsPreview)
                        if IsPreview then return "THERM." end
                        local Character = self.Info.Character;
                        if Character then 
                            local HasT7 = Character:FindFirstChild("T7-1");
                            return HasT7 and "THERM." or nil;
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });]]

                --[[ESPConstructor:AddFlag({
                    Name = "Bounty",
                    Flag = "Bounty",
                    Text = function(self)
                        local Character = self.Info.Character;
                        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid");
                        if Humanoid then 
                            local Display = Humanoid.DisplayName;
                            local RealName = self.Object.Name;

                            if GameFramework.CrimBounties[Display] then 
                                return "BTY: "..GameFramework.CrimBounties[Display];
                            end;

                            if GameFramework.CrimBounties[RealName] then 
                                return "BTY: "..GameFramework.CrimBounties[RealName];
                            end;
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });]]

                --[[ESPConstructor:AddFlag({
                    Name = "Relic", 
                    Flag = "Relic",

                    Text = function(self, IsPreview)
                        if IsPreview then return "RELIC" end
                        local Character = self.Info.Character;
                        local Backpack = self.Object.Backpack; 

                        if Character then 
                            local Relic = Character:FindFirstChild("Relic")  or Backpack:FindFirstChild("Relic")
                            if Relic then 
                                return "RELIC";
                            end;
                        end;
                        
                    end;

                    Allow = function(self)
                        local Character = self.Info.Character;
                        local Backpack = self.Object.Backpack; 

                        if Character then 
                            local Relic = Character:FindFirstChild("Relic")  or Backpack:FindFirstChild("Relic")
                            if Relic then 
                                return true;
                            end;
                        end;
                        return false
                    end;
                })]]


                ESPConstructor:AddFlag({
                    Name = "Fake Name",
                    Flag = "Fake Name",
                    Text = function(self, IsPreview)
                        if IsPreview then return "#019l" end;
                        local Character = self.Info.Character;
                        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid");
                        if Humanoid then 
                            local Display = Humanoid.DisplayName;
                            local RealName = self.Object.Name;

                            if Display:find("#") then 
                                return Display;
                            end;
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Level",
                    Flag = "Level",
                    Text = function(self, IsPreview)
                        if IsPreview then return "LVL 63"; end;
                        local LeaderStats = self.Object.leaderstats
                        if LeaderStats then 
                            local Level = LeaderStats:FindFirstChild("Level")
                            return Level and "LVL " .. tostring(Level.Value) or "LVL 1";
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Rage",
                    Flag = "Rage",
                    Text = function(self, IsPreview)
                        if IsPreview then return "RAGE" end;
                        local Character = self.Info.Character;
                        local CanReturn = false;
                        local Text = ""
                        if Character and Character:FindFirstChild("Rage-potion") then 
                            local ProgressBar = Character["Rage-potion"].ProgressBar;
                            if ProgressBar.Value ~= 0 then 
                                Text = "RAGING";
                                CanReturn = true;
                            end;
                        end;

                        if Character and Character:FindFirstChild("Left Arm") and Character["Left Arm"]:FindFirstChild("RageParticle") then
                            Text = "RAGED";
                            CanReturn = true;
                        end;

                        return Text;
                    end;
                    Allow = function(self)
                        local Character = self.Info.Character;
                        local CanReturn = false;
                        local Text = ""
                        if Character and Character:FindFirstChild("Rage-potion") then 
                            local ProgressBar = Character["Rage-potion"].ProgressBar;
                            if ProgressBar.Value ~= 0 then 
                                Text = "RAGING";
                                CanReturn = true;
                            end;
                        end;

                        if Character and Character:FindFirstChild("Left Arm") and Character["Left Arm"]:FindFirstChild("RageParticle") then
                            Text = "RAGED";
                            CanReturn = true;
                        end;

                        return CanReturn
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Slayer",
                    Flag = "Slayer",
                    Text = function(self, IsPreview)
                        if IsPreview then return "SLAYER" end;
                        local Character = self.Info.Character;
                        if Character then 
                            local IsSlayer = Character:FindFirstChild("SlayerArmour");
                            return IsSlayer and "SLAYER" or nil;
                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Vest",
                    Flag = "Vest",
                    Text = function(self, IsPreview)
                        if IsPreview then return "VEST LVL 2" end;
                        local Character = self.Info.Character;
                        if Character then 
                            local Vest = Character:FindFirstChild("VestB_1") or Character:FindFirstChild("VestB_2") or Character:FindFirstChild("VestA_1") or Character:FindFirstChild("VestA_2");

                            if Vest then 
                                if Vest.Name:find("_1") then 
                                    return "Vest LVL 1";
                                else 
                                    return "Vest LVL 2";
                                end;

                                return "VEST";
                            end;

                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });

                ESPConstructor:AddFlag({
                    Name = "Helmet",
                    Flag = "Helmet",
                    Text = function(self, IsPreview)
                        if IsPreview then return "HELMET LVL 2"; end;
                        local Character = self.Info.Character;
                        if Character then 
                            local Vest = Character:FindFirstChild("HelmetB_1") or Character:FindFirstChild("HelmetB_2") or Character:FindFirstChild("HelmetA_1") or Character:FindFirstChild("HelmetA_2");

                            if Vest then 
                                if Vest.Name:find("_1") then 
                                    return "HELMET LVL 1";
                                else 
                                    return "HELMET LVL 2";
                                end;

                                return "HELMET";
                            end;

                        end;
                    end;
                    Allow = function(self)
                        return true;
                    end;
                });
            end;
        end;

        do --// Crosshair
            function Visuals:UpdateCrosshair(Distance, Origin, LookVector, Parent)
                task.spawn(function()
                    if Library.Flags.Crosshair and Library.Flags.Crosshair.Value then 
                        local Ray = Workspace:Raycast(Origin, LookVector * Distance, RayParams);
                        if Ray and Ray.Position and Ray.Normal then
                            Visuals.CrosshairPart.Parent = Parent;
                            --[[Visuals.CrosshairPart.CFrame = CFrame.fromMatrix(
                                Ray.Position,
                                -Ray.Normal:Cross(Visuals.CrosshairPart.CFrame.RightVector),
                                Ray.Normal
                            );]]

                            local RightVector = -Ray.Normal:Cross(Visuals.CrosshairPart.CFrame.RightVector);
                            if tostring(RightVector):find("nan") then 
                                RightVector = Vector3.new(0, -1, 0);
                            end;


                            local CorrectedCFrame = CFrame.fromMatrix(Ray.Position, RightVector, Ray.Normal);

                            Visuals.CrosshairPart.CFrame = CorrectedCFrame
                            Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            Visuals.CrossAdornee.Transparency = 0;
                        else
                            Visuals.CrossAdornee.Transparency = 1;
                            Visuals.CrosshairPart.Parent = nil;
                        end;
                    else
                        if Visuals.CrossAdornee then 
                            Visuals.CrossAdornee.Transparency = 1;
                            Visuals.CrosshairPart.Parent = nil;
                        end;
                    end;
                end);
            end;
        end;

        do --// Radar

            function Visuals:GetNearby(Radius)
                local ClientCharacter = Client.Character;
                local ClientPosition = ClientCharacter and ClientCharacter:FindFirstChild("HumanoidRootPart").CFrame.p;
    
                if ClientPosition then 
                    local Region = Region3.new(ClientPosition - Vector3.new(Radius, Radius, Radius), ClientPosition + Vector3.new(Radius, Radius, Radius));
                    local Parts = workspace:FindPartsInRegion3(Region, nil, math.huge);
            
                    local NearbyPlayers = {};
                    for _, Part in pairs(Parts) do
                        if Part:IsA("BasePart") and Part.Parent:IsA("Model") then 
                            if Visuals.Enemies[Part.Parent] and not NearbyPlayers[Part.Parent] then
                                NearbyPlayers[Visuals.Enemies[Part.Parent]] = Part.Parent;
                            end;
    
                            if Players:FindFirstChild(Part.Parent.Name) and Visuals.Enemies[Players:FindFirstChild(Part.Parent.Name)] and not NearbyPlayers[Part.Parent] then
                                if Visuals.Enemies[Part.Parent] then 
                                    NearbyPlayers[Visuals.Enemies[Part.Parent]] = Part.Parent;
                                end 

                                if Visuals.Enemies[Players:FindFirstChild(Part.Parent.Name)] then 
                                    NearbyPlayers[Visuals.Enemies[Players:FindFirstChild(Part.Parent.Name)]] = Part.Parent;
                                end
                            end;
                        end;
                    end;
                    
                    return NearbyPlayers;
                end;
            end;
            
            function Visuals:GetRelative(pos)
                local char = Client.Character
                if char ~= nil and char.PrimaryPart ~= nil then
                    local pmpart = char.PrimaryPart
                    local camerapos = Vector3.new(Camera.CFrame.Position.X, pmpart.Position.Y, Camera.CFrame.Position.Z)
                    local newcf = CFrame.new(pmpart.Position, camerapos)
                    local r = newcf:PointToObjectSpace(pos)
                    return r.X, r.Z
                else
                    return 0, 0
                end
            end
            
            function Visuals:UpdateRadar()
                local RadarFrameRadius = Visuals.RadarFrame.Size.X.Offset / 2
                local Radius = Library.Flags.RadarDistance and Library.Flags.RadarDistance.Value or 100
    
                local NearbyPlayers = Visuals:GetNearby(Radius)
    
                for Index, Value in pairs(Visuals.RadarFrame:GetChildren()) do
                    if Value ~= Visuals.RadarClient and Value.ClassName == "Frame" then
                        Value:Destroy()
                    end
                end
    
                if NearbyPlayers then
                    local ClientCharacter = Client.Character
                    local ClientRoot = ClientCharacter and ClientCharacter:FindFirstChild("HumanoidRootPart")
                    local ClientPosition = ClientRoot and ClientRoot.Position
    
                    if ClientPosition then
                        for Index, Player in pairs(NearbyPlayers) do
                            local PlayerPosition = Player.PrimaryPart.Position
    
                            -- Get relative position using the GetRelative function
                            local RelX, RelZ = Visuals:GetRelative(PlayerPosition)
    
                            -- Invert the coordinates as necessary to match the radar's orientation
                            local X = -RelX / Radius * RadarFrameRadius
                            local Y = -RelZ / Radius * RadarFrameRadius
    
                            -- Check if the point is within the radar circle
                            if math.sqrt(X * X + Y * Y) <= RadarFrameRadius then
                                local PlayerFrame = Instance.new("Frame")
                                PlayerFrame.Size = UDim2.new(0, 5, 0, 5)
                                PlayerFrame.Position = UDim2.new(0.5, X, 0.5, Y)
                                PlayerFrame.Parent = Visuals.RadarFrame
    
                                if Index.Info.Class == "AI" then
                                    PlayerFrame.BackgroundColor3 = Library.Flags.RadarAIColor.Color
                                else
                                    PlayerFrame.BackgroundColor3 = Library.Flags.RadarPlayerColor.Color
                                end
    
                                local UICorner = Instance.new("UICorner", PlayerFrame)
                                UICorner.CornerRadius = UDim.new(1, 9999)
                            end
                        end
                    end
                end
            end
    
    
        end;
    end;
end;

do --// Chatbot 
    Chatbot.LastTick = tick();

    Chatbot.Emojis = {"ðŸ˜€", "ðŸ˜ƒ", "ðŸ˜„", "ðŸ˜", "ðŸ˜†", "ðŸ˜…", "ðŸ¤£", "ðŸ˜‚", "ðŸ™‚", "ðŸ™ƒ", "ðŸ˜‰", "ðŸ˜Š", "ðŸ˜‡", "ðŸ¥°", "ðŸ˜", "ðŸ¤©", "ðŸ˜˜", "ðŸ˜—", "ðŸ˜š", "ðŸ˜™", "ðŸ˜‹", "ðŸ˜›", "ðŸ˜œ", "ðŸ¤ª", "ðŸ˜", "ðŸ¤‘", "ðŸ¤—", "ðŸ¤­", "ðŸ¤«", "ðŸ¤”", "ðŸ¤", "ðŸ¤¨", "ðŸ˜", "ðŸ˜‘", "ðŸ˜¶", "ðŸ˜", "ðŸ˜’", "ðŸ™", "â˜¹ï¸", "ðŸ˜”", "ðŸ˜Ÿ", "ðŸ˜•", "ðŸ™ƒ", "ðŸ˜£", "ðŸ˜–", "ðŸ˜«", "ðŸ˜©", "ðŸ¥º", "ðŸ˜¢", "ðŸ˜­", "ðŸ˜¤", "ðŸ˜ ", "ðŸ˜¡", "ðŸ¤¬", "ðŸ¤¯", "ðŸ˜³", "ðŸ¥µ", "ðŸ¥¶", "ðŸ˜±", "ðŸ˜¨", "ðŸ˜°", "ðŸ˜¥", "ðŸ˜“", "ðŸ¤—", "ðŸ¤”", "ðŸ¤­", "ðŸ¤«", "ðŸ¤¥", "ðŸ˜¶", "ðŸ˜", "ðŸ˜‘", "ðŸ˜¬", "ðŸ™„", "ðŸ˜¯", "ðŸ˜¦", "ðŸ˜§", "ðŸ˜®", "ðŸ˜²", "ðŸ˜´", "ðŸ¤¤", "ðŸ˜ª", "ðŸ˜µ", "ðŸ¤", "ðŸ¥´", "ðŸ¤¢", "ðŸ¤®", "ðŸ¤§", "ðŸ˜·", "ðŸ¤’", "ðŸ¤•", "ðŸ¤‘", "ðŸ¤ ", "ðŸ˜ˆ", "ðŸ‘¿", "ðŸ’¤", "ðŸ‘‹", "ðŸ¤š", "ðŸ–ï¸", "âœ‹"};
    Chatbot.Symbols = {"!", "#", "$", "?",'"',"'"};
    Chatbot.Phrases = {
        ["British"] = {
            "Fancy a tea mate?",
            "Im bound to the chippy!",
            "â˜•â˜•",
            "Why are you looking at my teeth?",
            "BLOODY HELL MATE! THAT DRIVES ME BONKERS!",
            "Headed down to the pub!",
            "AKSHUALLY ITS FOOTBALL NOT SOCCER",
            "God save the queen and bless the British!"
        };
        ["Ethereal"] = {
            "Ethereal > All",
            "Ethereal Owns me and all others",
            "Number 1 Project Delta -> BUY TODAY! Ethereal",
            "Ethereal on top",
            "Just bought Ethereal today, I can actually hit my shots now!",
            "Uno all it takes with Ethereal",
        };
        ["Trashtalk"] = {
            "STOP TRYING YOU ARE AN EMBARRASMENT",
            "GET GOOD HOLY",
            "WOW LOL YOURE ACTUALLY SO TRASH",
            "I CANT BELIEVE THATS YOUR AIM",
            "AINT A WAY YOU AIM LIKE THAT LOOOOOOL",
            "MY GRANDMA CAN AIM BETTER THAN THAT LOOOOOOOOOOOOOL",
            "WOW, I STARTED TO FALL ASLEEP YOURE SO BAD"
        },
    };

    function Chatbot:WrapMessage(Text, Phrases, Emojis, Symbols)
        local Chat = "";

        for i = 1, 3 do 
            Chat = Chat..Text;
            local random = math.random(1, 10);
            if random <= 5 then
                Chat = Chat .. ""..Emojis[math.random(#Emojis)].." ";
            else 
                Chat = Chat .. ""..Symbols[math.random(#Symbols)].. " ";
            end;

            local Phrase = Phrases[math.random(#Phrases)];
            Chat = Chat .. Phrase
        end;

        return Chat;
    end;
end;

do --// Combat 
    LPH_NO_VIRTUALIZE(function()
        function Combat:CameraLookAt(Point)
            local PointRay = Camera:ViewportPointToRay(Point.X, Point.Y)
            Camera.CFrame = CFrame.lookAt(Camera.CFrame.Position, PointRay.Origin + PointRay.Direction)
        end;

        function Combat:MouseMoveRel(X, Y)
            mousemoverel(X, Y)
        end;

        function Combat:MouseMoveABS(X, Y)
            Combat:CameraLookAt(Vector2.new(X, Y))
        end;

        function Combat:CreateQuadraticBezier(t, Origin, Destination, Point)
            return (1 - t) ^ 2 * Origin + 2 * (1 - t) * t * (Origin + (Destination - Origin) * Point) + t ^ 2 * Destination;        
        end;

        --[[function Combat:AimAssist(DeltaTime)
            if Library.Flags.AimMode and Library.Flags.AimMode.Value == "Aimbot" and (Library.Flags.Aimbot and Library.Flags.Aimbot.Value) then 
                if Combat.Target and Combat.TargetPart then
                    if Combat.LastCurvedTarget ~= Combat.Target then
                        Combat.LastCurvePoint = 0;
                        Combat.LastCurvedTarget = Combat.Target;
                    end;
                    local TargetPosition = Camera:WorldToViewportPoint(Combat.TargetPart.Position);
        
                    local MouseLocation = UserInputService:GetMouseLocation();
                    local MousePosition = Vector2.new(MouseLocation.X, MouseLocation.Y);
        
                    local MagnitudeX = MousePosition.X - TargetPosition.X / 1
                    local MagnitudeY = MousePosition.Y - TargetPosition.Y / 1;
        
                    local CurvingPoint = Vector2.new(Library.Flags.CurveX.Value, Library.Flags.CurveY.Value);
                    local Curve = Combat:CreateQuadraticBezier(Combat.LastCurvePoint, MousePosition, Vector2.new(TargetPosition.X, TargetPosition.Y), CurvingPoint) - MousePosition;
                    local Humaniser = Library.Flags.HumanizationScale and Library.Flags.HumanizationScale.Value or 1.5;
        
                    local MouseMovementX = DeltaTime * (20.1 - Humaniser) * Curve.X
                    local MouseMovementY = DeltaTime * (20.1 - Humaniser) * Curve.Y
        
                    Combat:MouseMoveRel(MouseMovementX, MouseMovementY);
        
                    Combat.LastCurvePoint = math.clamp(Combat.LastCurvePoint + DeltaTime, 0, 1);
                else
                    Combat.LastCurvePoint = 0;
                end;
            else
                Combat.LastCurvePoint = 0;
            end;
        end;]]

        function Combat:AimAssist(DeltaTime)
            if Library.Flags.AimMode and Library.Flags.AimMode.Value == "Aimbot" and Library.Flags.Aimbot and Library.Flags.Aimbot.Value then
                if Combat.TargetPart then
                    if Combat.LastCurvedTarget ~= Combat.Target then
                        Combat.LastCurvePoint = 0;
                        Combat.LastCurvedTarget = Combat.Target;
                    end;
                    local Pos3D = Combat.TargetPart.CFrame
                    if GameName == "Games Unite" then 

                        Pos3D = Pos3D * CFrame.new(0, 4.7, 0)
                    end 

                    local TargetPosition = Camera:WorldToViewportPoint(Pos3D.p);
                    local MousePosition = UserInputService:GetMouseLocation();
                    local CurvingPoint = Vector2.new(Library.Flags.CurveX.Value, Library.Flags.CurveY.Value);

                    local Curve = Combat:CreateQuadraticBezier(Combat.LastCurvePoint, MousePosition, Vector2.new(TargetPosition.X, TargetPosition.Y), CurvingPoint) - MousePosition;
                    local Humaniser = Library.Flags.HumanizationScale and Library.Flags.HumanizationScale.Value or 1.5;
    
                    Combat:MouseMoveRel(Curve.X, Curve.Y)
                    Combat.LastCurvePoint = math.clamp(Combat.LastCurvePoint + DeltaTime * (2.1 - Humaniser) or 1.5, 0, 1);
                else
                    Combat.LastCurvePoint = 0;
                end;
            else
                Combat.LastCurvePoint = 0;
            end;
        end;
    end)();
end;

do --// Utility
    Utility.FireportPosition = Vector3.new(0, 0, 0);
    Utility.CurrentViewmodel = nil;
    Utility.CurrentAimPart   = Vector3.new(0, 0, 0);
    Utility.VMConnections = {};
    Utility.Team = nil;
    Utility.ViewmodelHighlight = Instance.new("Highlight"); do 
        Utility.ViewmodelHighlight.FillTransparency = 1;
        Utility.ViewmodelHighlight.OutlineTransparency = 0;
        Utility.ViewmodelHighlight.DepthMode = "AlwaysOnTop";
        Utility.ViewmodelHighlight.Parent = gethui();
    end;

    do --// Functions

        function Utility:DeepCopy(Table)
            local Copy = {}
            for k, v in pairs(Table) do
                if type(v) == "table" then
                    Copy[k] = Utility:DeepCopy(v)
                else
                    Copy[k] = v
                end
            end
            return Copy
        end

        function Utility:GetBulletStats(Ammo)
            if GameName == "Project Delta" then 
                local Types = ReplicatedStorage.AmmoTypes
                local Info = Types:FindFirstChild(Ammo);

                if Info then 
                    return {Damage = Info:GetAttribute("Damage"), Penetration = Info:GetAttribute("ArmorPen")}
                end;
            end;
        end; 

        function Utility:CalculateDamage(BulletDamage, ArmorPentration, ArmorProtection, IsHeadshot)
            local Multiplier = IsHeadshot and 2 or 1;

            local ArmorReduction = (ArmorProtection - ArmorPentration) / 100

            local EffectiveDamage = BulletDamage * (1 - ArmorReduction)

            local FinalDamage = EffectiveDamage * Multiplier;

            return FinalDamage;
        end;
        

        function Utility:GetArmor(Part)
            if Part.Name:find("Head") or Part.Name:find("Face") then 
                for Index, Value in next, Part.Parent:GetChildren() do 
                    if Value:IsA("Model") and Value:GetAttribute("ItemType") then 
                        if Value:GetAttribute("ItemType") == "Headware" then 
                            return Value.Name; 
                        end;
                    end;
                end;

            elseif Part.Name:find("Torso") then 
                for Index, Value in next, Part.Parent:GetChildren() do 
                    if Value:IsA("Model") and Value:GetAttribute("ItemType") then 
                        if Value:GetAttribute("ItemType") == "ChestRig" then 
                            return Value.Name; 
                        end;
                    end;
                end;
            elseif Part.Name:find("Leg") then 
                for Index, Value in next, Part.Parent:GetChildren() do 
                    if Value:IsA("Model") and Value:GetAttribute("ItemType") then 
                        if Value:GetAttribute("ItemType") == "LegArmor" then 
                            return Value.Name; 
                        end;
                    end;
                end;
            end;

            return nil;
        end;

        function Utility:GetArmorProtection(ArmorName, PlayerName)
            if ReplicatedStorage.Players:FindFirstChild(PlayerName) then 
                local Armor = ReplicatedStorage.Players[PlayerName].Clothing[ArmorName].ItemProperties.Clothing.Protection;

                return Armor:GetAttribute("Projectile")
            else
                return 1
            end;
        end;
            

        function Utility:Rotate(CF)
            local X, Y, Z = CF:ToOrientation();
            return CFrame.new(CF.Position) * CFrame.Angles(0, Y, 0);
        end;

        function Utility:UpdateViewmodel(Viewmodel)

            if GameName == "Project Delta" then 
                task.spawn(function()

                    for Index, Value in next, Utility.VMConnections do
                        Value:Disconnect();
                    end;
                    local Item = Viewmodel:WaitForChild("Item");
                    local Muzzle = Viewmodel:FindFirstChild("AimPart");
                    local Humanoid = Viewmodel:WaitForChild("Humanoid");

                    do --// Humanoid stuff 
                        Humanoid.AnimationPlayed:Connect(function(Track)
                            if Track.Name:lower():find("reload") and Library.Flags.InstantReload and Library.Flags.InstantReload.Value then
                                local EquippedItem = ReplicatedStorage.Players[Client.Name].Status.GameplayVariables.EquippedTool.Value;

                                if EquippedItem then 
                                    local WeaponName = EquippedItem.Name;
    
                                    local Attachments = EquippedItem:FindFirstChild("Attachments");
                                    local ItemProperties = EquippedItem:FindFirstChild("ItemProperties")

                                    if ItemProperties:GetAttribute("MaxLoadedAmmo") then
                                        Track:AdjustSpeed(5);
                                    else 
                                        Track:AdjustSpeed(25);
                                    end;
                                end;
                            end;
                        
                            if Track.Name == "Use" and Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                Track:AdjustSpeed(9e9);
                            end;
                        
                            if Track.Name == "Equip" and Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                                Track:AdjustSpeed(20);
                            end;
                        end);
                    end;

                    do --// Main 
                        Utility.CurrentViewmodel = Viewmodel;
                    end;

                    task.wait(0.1);
                    if Library.Flags.HighlightViewmodel and Library.Flags.HighlightViewmodel.Value then 
                        Utility.ViewmodelHighlight.Adornee = Viewmodel;
                        Utility.ViewmodelHighlight.OutlineColor = Library.Flags.ViewmodelOutlineColor.Color;
                    end;
                    do --// Visuals 
                        if Library.Flags.ViewmodelChams and Library.Flags.ViewmodelChams.Value then 

                            for Index, Part in Viewmodel:GetDescendants() do 

                                if Part:IsA("MeshPart") or Part:IsA("Part") then
                                    --[[
                                                                            if (Part.Name == "Sleeve" or Part.Name == "Armor") and Library.Flags.RemoveClothing and Library.Flags.RemoveClothing.Value then 
                                        Part.Transparency = 1; 
                                    end;
                                    
                                    if (Part.Name == "Sleeve" or Part.Name == "Armor")  and Library.Flags.ShirtChams and Library.Flags.ShirtChams.Value then 
                                        Part.TextureID = Textures[Library.Flags.Texture.Value];
                                        Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                        Part.Color = Library.Flags.ShirtColor.Color;

                                        if Part.Transparency ~= 1 then 
                                            Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or Library.Flags.ShirtColor.Transparency;

                                            if Part.Material == Enum.Material.Glass then 
                                                local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                    Part.Transparency = 0.8;
                                                end);

                                                table.insert(Utility.VMConnections, TransparencyConnection);
                                            end;    
                                        end;
                                    end; 


                                    if (Part.Name == "Glove" or Part.Name == "Wrap") and Library.Flags.GloveChams and Library.Flags.GloveChams.Value then 
                                        Part.TextureID = Textures[Library.Flags.Texture.Value];
                                        Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                        Part.Color = Library.Flags.GloveColor.Color;

                                        if Part.Transparency ~= 1 then 
                                            Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or Library.Flags.GloveColor.Transparency;

                                            if Part.Material == Enum.Material.Glass then 
                                                local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                    Part.Transparency = 0.8;
                                                end);

                                                table.insert(Utility.VMConnections, TransparencyConnection);
                                            end;
                                        end;
                                    end;

                                    if (Part.Name == "RightArm" or Part.Name == "LeftArm") and Library.Flags.ArmChams and Library.Flags.ArmChams.Value then 
                                        Part.TextureID = Textures[Library.Flags.Texture.Value];
                                        Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                        Part.Color = Library.Flags.ArmColor.Color;

                                        if Part.Transparency ~= 1 then 
                                            Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or Library.Flags.ArmColor.Transparency;

                                            if Part.Material == Enum.Material.Glass then 
                                                local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                    Part.Transparency = 0.8;
                                                end);

                                                table.insert(Utility.VMConnections, TransparencyConnection);
                                            end;
                                        end;
                                    end;
                                    ]]
                                    do --// Arms
                                        if Library.Flags.ArmChams and Library.Flags.ArmChams.Value then
                                            if Part.Name:lower():find("arm") or Part.Name:lower():find("hand") then 
                                                Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                                Part.Color = Library.Flags.ArmColor.Color;

                                                if Part.Transparency ~= 1 then 
                                                    Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or 0;

                                                    if Part.Material == Enum.Material.Glass then 
                                                        local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                            Part.Transparency = 0.8;
                                                        end);

                                                        table.insert(Utility.VMConnections, TransparencyConnection);
                                                    end;
                                                end;
                                            end;
                                        end;
                                    end;

                                    do --// Shirt 
                                        if Library.Flags.ShirtChams and Library.Flags.ShirtChams.Value and Part:IsA("MeshPart")  then 
                                            if Part:FindFirstAncestor("CamoShirt") or Part:FindFirstAncestor("CivilianShirt") or Part:FindFirstAncestor("GhillieShirt") or Part:FindFirstAncestor("GorkaShirt") or Part:FindFirstAncestor("WastelandShirt") or Part:FindFirstAncestor("LiquidatorSuitUpper") then 
                                                Part.TextureID = Textures[Library.Flags.Texture.Value];
                                                Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                                Part.Color = Library.Flags.ShirtColor.Color;
        
                                                if Part.Transparency ~= 1 then 
                                                    Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or Library.Flags.ShirtColor.Transparency;
        
                                                    if Part.Material == Enum.Material.Glass then 
                                                        local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                            Part.Transparency = 0.8;
                                                        end);
        
                                                        table.insert(Utility.VMConnections, TransparencyConnection);
                                                    end;    
                                                end;
                                            end;
                                        end;

                                        if Library.Flags.RemoveClothing and Library.Flags.RemoveClothing.Value then 
                                            if Part:FindFirstAncestor("CamoShirt") or Part:FindFirstAncestor("CivilianShirt") or Part:FindFirstAncestor("GhillieShirt") or Part:FindFirstAncestor("GorkaShirt") or Part:FindFirstAncestor("WastelandShirt") or Part:FindFirstAncestor("LiquidatorSuitUpper") then 
                                                Part:Destroy();
                                            end;
                                        end;
                                    end;

                                    do --// Gloves 
                                        if Library.Flags.GloveChams and Library.Flags.GloveChams.Value and Part:IsA("MeshPart")  then 
                                            if Part:FindFirstAncestor("CombatGloves") or Part:FindFirstAncestor("HandWraps") then 
                                                Part.TextureID = Textures[Library.Flags.Texture.Value];
                                                Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                                Part.Color = Library.Flags.GloveColor.Color;

                                                if Part.Transparency ~= 1 then 
                                                    Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or Library.Flags.GloveColor.Transparency;
        
                                                    if Part.Material == Enum.Material.Glass then 
                                                        local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                            Part.Transparency = 0.8;
                                                        end);
        
                                                        table.insert(Utility.VMConnections, TransparencyConnection);
                                                    end;
                                                end;
                                            end;
                                        end;
                                    end;

                                    do --// Item 
                                        if Library.Flags.ItemChams and Library.Flags.ItemChams.Value and  Part:FindFirstAncestor("Item") and Part:IsA("MeshPart") then 
                                            Part.Material = Enum.Material[Library.Flags.ViewmodelMaterial.Value];
                                            Part.Color = Library.Flags.ItemColor.Color;
                                            Part.TextureID = Textures[Library.Flags.Texture.Value];
    
                                            if Part.Transparency ~= 1 then 
                                                Part.Transparency = Part.Material == Enum.Material.Glass and 0.8 or Library.Flags.ItemColor.Transparency;
    
                                                if Part.Material == Enum.Material.Glass then 
                                                    local TransparencyConnection = Part:GetPropertyChangedSignal("Transparency"):Connect(function()
                                                        Part.Transparency = 0.8;
                                                    end);
    
                                                    table.insert(Utility.VMConnections, TransparencyConnection);
                                                end;
                                            end;
                                        end;

                                    end;
                                end;

                                do --// Surface Appearances
                                    if Part:IsA("SurfaceAppearance") then 
                                        if Library.Flags.ArmChams and Library.Flags.ArmChams.Value then
                                            if Part.Name:lower():find("arm") or Part.Name:lower():find("hand") then
                                                Part:Destroy();
                                            end;
                                        end;

                                        if Library.Flags.GloveChams and Library.Flags.GloveChams.Value then 
                                            if Part:FindFirstAncestor("CombatGloves") or Part:FindFirstAncestor("HandWraps") then 
                                                Part:Destroy();
                                            end;
                                        end;

                                        if Library.Flags.ShirtChams and Library.Flags.ShirtChams.Value then 
                                            if Part:FindFirstAncestor("CamoShirt") or Part:FindFirstAncestor("CivilianShirt") or Part:FindFirstAncestor("GhillieShirt") or Part:FindFirstAncestor("GorkaShirt") or Part:FindFirstAncestor("WastelandShirt") or Part:FindFirstAncestor("LiquidatorSuitUpper") then 
                                                Part:Destroy();
                                            end;
                                        end;

                                        if Library.Flags.ItemChams and Library.Flags.ItemChams.Value and Part:FindFirstAncestor("Item") then 
                                            Part:Destroy();
                                        end;
                                    end;
                                end;
                            end;
                        end;
                    end;
                end);
            end;

            if GameName == "Criminality" then
                if Library.Flags.HighlightViewmodel and Library.Flags.HighlightViewmodel.Value then 
                    Utility.ViewmodelHighlight.Adornee = Viewmodel;
                    Utility.ViewmodelHighlight.OutlineColor = Library.Flags.ViewmodelOutlineColor.Color;
                end; 
                
                task.wait(0.2);
                for Index, Value in next, Viewmodel:GetDescendants() do
                    if Viewmodel:FindFirstChild("Tool") and Value:IsDescendantOf(Viewmodel.Tool) then 
                        if Library.Flags.ItemChams.Value and (Value:IsA("Part") or Value:IsA("MeshPart")) and Value.Transparency ~= 1 then 
                            Value.Material = Library.Flags.ViewmodelMaterial.Value;
                            Value.Color = Library.Flags.ItemColor.Color;
                            Value.Transparency = Value.Material == Enum.Material.Glass and 0.8 or 0;
                            if Value:IsA("MeshPart") then 
                                Value.TextureID = "";
                            end;
                        end;
                    else 
                        if Library.Flags.ArmChams.Value and (Value:IsA("Part") or Value:IsA("MeshPart")) and Value.Name ~= "HumanoidRootPart" and not Value.Name:find("ArmHolder") and Value.Transparency ~= 1 then 
                            Value.Material = Library.Flags.ViewmodelMaterial.Value
                            Value.Color = Library.Flags.ArmColor.Color;

                            Value.Transparency = Value.Material == Enum.Material.Glass and 0.8 or 0;
                            if Value:IsA("MeshPart") then 
                                Value.TextureID = "";
                            end;
                        end;
                    end;

                    if Value:IsA("SurfaceAppearance") then 
                        Value:Destroy();
                    end;

                end;

                Viewmodel.HumanoidRootPart.Transparency = 1;
                Viewmodel.LArmHolder.Transparency = 1;
                Viewmodel.RArmHolder.Transparency = 1;
            end;
        end;
        
        function Utility:IsVisible(Destination)
            if not Destination then return false end;
            
            local RaycastResult = Workspace:Raycast(Camera.CFrame.p, (Destination.Position - Camera.CFrame.p).Unit * 10000, RayParams);
            if RaycastResult and RaycastResult.Instance then 
                if RaycastResult.Instance:IsDescendantOf(Destination.Parent) then 
                    return true;
                end;
            end;
            return false;
        end;

        function Utility:AutoWall(Origin, Destination) 
            if not Destination then return false end;
            
            CustomRayParams = RayParams;

            local RaycastResult = Workspace:Raycast(Origin.Position, (Destination.Position - Origin.Position).Unit * 10000, CustomRayParams);
            local LastStoppingPoint 

            if (Destination.Position - Origin.Position).Magnitude < Library.Flags.OverrideDistance.Value then 
                return true;
            end;


            for i = 1, Library.Flags.AutoWalls.Value do 
                if RaycastResult.Instance then 
                    if RaycastResult.Instance:IsDescendantOf(Destination.Parent) then 
                        return true;
                    else
                        LastStoppingPoint = RaycastResult.Position;
                        table.insert(CustomRayParams.FilterDescendantsInstances, RaycastResult.Instance)
                        RaycastResult = Workspace:Raycast(LastStoppingPoint, (Destination.Position - LastStoppingPoint).Unit * 10000, CustomRayParams);

                        if RaycastResult.Instance:IsDescendantOf(Destination.Parent) then 
                            return true;
                        end;
                    end;
                end;
            end;

            return false;
        end;


        function Utility:IsPartVisible(Destination, Origin)
            if not Destination then return false end;
            
            local RaycastResult = Workspace:Raycast(Origin, (Destination.Position - Origin).Unit * 10000, RayParams);
            if RaycastResult and RaycastResult.Instance then 
                if RaycastResult.Instance:IsDescendantOf(Destination.Parent) then 
                    return true;
                end;
            end;
            return false;
        end;
        
        function Utility:FindVisiblePosition(Origin, Destination)
            local OriginalDestination = Destination;

            if Utility:IsPartVisible(OriginalDestination, Origin) then
                GameFramework.Manipulated = false;
                
                return Origin
            end;

            if typeof(Destination) ~= "Vector3" then 
                Destination = Destination.CFrame.p;
            end;

            if typeof(Origin) ~= "Vector3" then 
                Origin = Origin.CFrame.p;
            end;
            
            local ManipulationAmount = Library.Flags.ManipulationDistance.Value;

            for Index = 1, ManipulationAmount do 
                local FoundSpot = false;
                local PotentialOrigins = {
                    Vector3.new(Origin.X + Index, Origin.Y, Origin.Z),
                    Vector3.new(Origin.X, Origin.Y + Index, Origin.Z),
                    Vector3.new(Origin.X, Origin.Y, Origin.Z + Index),
                    Vector3.new(Origin.X - Index, Origin.Y, Origin.Z),
                    Vector3.new(Origin.X, Origin.Y - Index, Origin.Z),
                    Vector3.new(Origin.X, Origin.Y, Origin.Z - Index)
                };
            
                for _, NewOrigin in next, PotentialOrigins do
                    if Utility:IsPartVisible(OriginalDestination, NewOrigin) then
                        GameFramework.Manipulated = true;
                        GameFramework.ManipulatedIndex = Index;
                        FoundSpot = true;
                        return NewOrigin;
                    end;

                end
                
                if FoundSpot then 
                    break
                else 
                    GameFramework.Manipulated = false;
                end;
            end;
        
            return Origin
        end

        function Utility:GetPartsBetween(Origin, Destination)
            local RaycastParameters = RaycastParams.new();
            RaycastParameters.FilterDescendantsInstances = {Client.Character, Camera};
        
            local Direction = (Destination - Origin).unit;
            local Distance = (Destination - Origin).magnitude;
        
            local RayDirection = Direction * Distance;
        
            local PartCount = 0;
            local Elapsed = tick();
        
            local RaycastResult = Workspace:Raycast(Origin, RayDirection, RaycastParameters);
        
            while RaycastResult do
                if tick() - Elapsed > 1 then 
                    break;
                end;

                if RaycastResult.Instance:IsA("Part") then
                    PartCount = PartCount + 1;
                elseif RaycastResult.Instance:IsA("BasePart") then 
                    break;
                end;
        
                Origin = RaycastResult.Position + Direction * 0.01;
                RaycastResult = Workspace:Raycast(Origin, RayDirection, RaycastParameters);
            end;
        
            return PartCount;
        end        
    end;
end; 

do --// Plugin stuff 
    UsableModules.Library        = Library;
    UsableModules.NewListener    = ESPConstructor.NewListener;
    UsableModules.AddFlag        = ESPConstructor.AddFlag;
    UsableModules.NewSky         = Visuals.NewSky;
    UsableModules.IsVisible      = Utility.IsVisible;
    UsableModules.AddESP         = ESPConstructor.New

    function UsableModules:RemoveESP(Object)
        if Visuals.Enemies[Object] then 
            Visuals.Enemies[Object]:Remove();
        end;
    end;

    function UsableModules:AddHitmarker(Name, SoundId)
        HitmarkerSounds[Name] = SoundId; 
        if Library.Flags.HeadshotDropdown then 
            Library.Flags.HeadshotDropdown:AddOption(Name)
            Library.Flags.HeadshotDropdown.Max += 1 
        end
        if Library.Flags.BodyshotDropdown then 
            Library.Flags.BodyshotDropdown:AddOption(Name)
            Library.Flags.BodyshotDropdown.Max += 1 
        end 
        if Library.Flags.KillsoundDropdown then 
            Library.Flags.KillsoundDropdown:AddOption(Name)
            Library.Flags.KillsoundDropdown.Max += 1 
        end 

    end;

    if not LPH_OBFUSCATED then 
        UsableModules.GameFramework  = GameFramework;
    end;
end;

do --// Library functions
    LPH_JIT_MAX(function()
        --// Notifications 
        local Notifications = {};

        --// For UI Dragging and Resizing
        local IsDragging;
        local DragInput;
        local DragStart 
        local StartPos; 

        local MinimumSize = Vector2.new(200, 200);
        local ResizeInput = nil;
        local IsResizing = false;
        local LastPosition, StartSize 
        
        do --// Hitmarker
            if GameName ~= "Fallen" then 
                Library.Hitmarker = Instance.new("Sound"); do 
                    Library.Hitmarker.Parent = gethui();
                    Library.Hitmarker.Volume = 5;
                end;

                function Library:UpdateSounds(Type)
                    Library.Hitmarker.Volume = Library.Flags.HitmarkerVolume.Value;
                    Headshot.Volume = Library.Flags.HitmarkerVolume.Value;
                    Bodyshot.Volume = Library.Flags.HitmarkerVolume.Value;
                    if Type == "Headshot" then
                        Headshot.SoundId = HitmarkerSounds[Library.Flags.HeadshotSound.Value];
                        Library.Hitmarker.SoundId = HitmarkerSounds[Library.Flags.HeadshotSound.Value];
                    else
                        Bodyshot.SoundId = HitmarkerSounds[Library.Flags.BodyshotSound.Value];
                        Library.Hitmarker.SoundId = HitmarkerSounds[Library.Flags.BodyshotSound.Value];
                    end;
                    Library.Hitmarker:Play();
                end;
            end;
        end;

        do  --// Keybind UI 
            local KeybindsUI;
            
            KeybindsUI = Instance.new("ScreenGui");
            KeybindsUI.Parent = gethui()
            local KeybindsOutline = Instance.new("Frame")
            local KeybindsInner = Instance.new("Frame")
            local KeybindsTitle = Instance.new("TextLabel")
            local KeybindsAccent = Instance.new("Frame")
            local KeybindsContainer = Instance.new("Frame")
            local KeybindsContainerOutline = Instance.new("Frame");

            do --// Properties
                KeybindsUI.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
                KeybindsUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                
                KeybindsOutline.Visible = false;
                KeybindsOutline.Parent = KeybindsUI
                KeybindsOutline.BackgroundColor3 = Library.Theme.LightContrast
                KeybindsOutline.BorderColor3 = Library.Theme.Border
                KeybindsOutline.Position = UDim2.new(0.161736935, 0, 0.351219505, 0)
                KeybindsOutline.Size = UDim2.new(0, 130, 0, 20)
                
                KeybindsInner.Parent = KeybindsOutline
                KeybindsInner.BackgroundColor3 = Library.Theme.MedianContrast
                KeybindsInner.BorderColor3 = Library.Theme.Border
                KeybindsInner.Position = UDim2.new(0, 2, 0, 2)
                KeybindsInner.Size = UDim2.new(1, -4, 1, -4)
                
                KeybindsTitle.Parent = KeybindsInner
                KeybindsTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                KeybindsTitle.BackgroundTransparency = 1.000
                KeybindsTitle.BorderColor3 = Library.Theme.Border
                KeybindsTitle.BorderSizePixel = 0
                KeybindsTitle.Position = UDim2.new(0, 0, 0, 2)
                KeybindsTitle.Size = UDim2.new(0, 126, 1, 0)
                KeybindsTitle.FontFace = Library.MenuFont
                KeybindsTitle.Text = "Keybinds"
                KeybindsTitle.TextColor3 = Library.Theme.ElementOn
                KeybindsTitle.TextSize = Library.TextSize
                
                KeybindsAccent.Parent = KeybindsInner
                KeybindsAccent.BackgroundColor3 = Library.Theme.Accent
                KeybindsAccent.BorderColor3 = Library.Theme.Border
                KeybindsAccent.Size = UDim2.new(1, 0, 0, 1)
                
                KeybindsContainerOutline.Visible = true;
                KeybindsContainerOutline.Parent = KeybindsOutline
                KeybindsContainerOutline.BackgroundColor3 = Library.Theme.LightContrast
                KeybindsContainerOutline.BorderColor3 = Library.Theme.Border
                KeybindsContainerOutline.Position = UDim2.new(0, 0, 0, 21)
                KeybindsContainerOutline.Size = UDim2.new(1, 0, 0, 0)
                KeybindsContainerOutline.ClipsDescendants = true;

                KeybindsContainer.Parent = KeybindsContainerOutline
                KeybindsContainer.BackgroundColor3 = Library.Theme.MedianContrast
                KeybindsContainer.BorderColor3 = Library.Theme.Border
                KeybindsContainer.Position = UDim2.new(0, 2, 0, 2)
                KeybindsContainer.Size = UDim2.new(1, -4, 1, -4)
                
                local KeybindLayout = Instance.new("UIListLayout")
                local UIPadding = Instance.new("UIPadding")
                
                KeybindLayout.Parent = KeybindsContainer
                KeybindLayout.SortOrder = Enum.SortOrder.LayoutOrder
                KeybindLayout.Padding = UDim.new(0, 2);
                UIPadding.Parent = KeybindsContainer
                UIPadding.PaddingTop = UDim.new(0, 1)

                Library.KeybindsContainer = KeybindsContainer
                Library.KeybindIndex = 0;
                Library.KeybindsGUI = KeybindsOutline;
                Library.KeybindsAccent = KeybindsAccent;
            end;

            do --// Functions
                KeybindsContainer.ChildAdded:Connect(function()
                    Library.KeybindIndex = Library.KeybindIndex + 1;
                    local Size;-- = UDim2.new(1, 0, 0, 5 + (Library.KeybindIndex * 11));

                    if Library.KeybindIndex ~= 1 then 
                        Size = UDim2.new(1, 0, 0, (11 * Library.KeybindIndex) + 3);
                    else 
                        Size = UDim2.new(1, 0, 0, 14);
                    end;

                    Library:Tween(KeybindsContainerOutline, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = Size});
                end);

                KeybindsContainer.ChildRemoved:Connect(function()
                    Library.KeybindIndex = Library.KeybindIndex - 1;
                    local Size;-- = UDim2.new(1, 0, 0, 5 + (Library.KeybindIndex * 11));

                    if Library.KeybindIndex ~= 1 then 
                        Size = UDim2.new(1, 0, 0, (11* Library.KeybindIndex) + 3);
                    else 
                        Size = UDim2.new(1, 0, 0, 14);
                    end;

                    if Library.KeybindIndex == 0 then 
                        Size = UDim2.new(1, 0, 0, 0);
                    end;

                    Library:Tween(KeybindsContainerOutline, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {Size = Size});
                end);
            end;
        end;

        do --// Watermark UI 
            local WatermarkUI;
            
            WatermarkUI = Instance.new("ScreenGui")
            WatermarkUI.Parent = gethui();
            local WatermarkOutline = Instance.new("Frame")
            local WatermarkInner = Instance.new("Frame")
            local WatermarkAccent = Instance.new("Frame")
            local WatermarkText = Instance.new("TextLabel")
            local FakeText = Instance.new("TextLabel");

            do --// Properties
                WatermarkUI.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
                WatermarkUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                
                WatermarkOutline.Name = "WatermarkOutline"
                WatermarkOutline.Visible = false;
                WatermarkOutline.Parent = WatermarkUI
                WatermarkOutline.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                WatermarkOutline.BorderColor3 = Color3.fromRGB(0, 0, 0)
                WatermarkOutline.Position = UDim2.new(0.001, 97, 0.202453986, -224);
                WatermarkOutline.Size = UDim2.new(0, 200, 0, 20)
                
                WatermarkInner.Parent = WatermarkOutline
                WatermarkInner.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
                WatermarkInner.BorderColor3 = Color3.fromRGB(0, 0, 0)
                WatermarkInner.Position = UDim2.new(0, 2, 0, 2)
                WatermarkInner.Size = UDim2.new(1, -4, 1, -4)
                
                WatermarkAccent.Parent = WatermarkInner
                WatermarkAccent.BackgroundColor3 = Library.Theme.Accent;
                WatermarkAccent.BorderColor3 = Color3.fromRGB(0, 0, 0)
                WatermarkAccent.Size = UDim2.new(1, 0, 0, 1)

                WatermarkText.Parent = WatermarkInner
                WatermarkText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                WatermarkText.BackgroundTransparency = 1.000
                WatermarkText.BorderColor3 = Color3.fromRGB(0, 0, 0)
                WatermarkText.BorderSizePixel = 0
                WatermarkText.Position = UDim2.new(0, 1, 0, 2)
                WatermarkText.Size = UDim2.new(1, 0, 1, 0)
                WatermarkText.FontFace = Library.MenuFont
                WatermarkText.TextColor3 = Color3.fromRGB(255, 255, 255)
                WatermarkText.TextSize = Library.TextSize
                WatermarkText.TextXAlignment = Enum.TextXAlignment.Center;
            end;

            WatermarkText:GetPropertyChangedSignal("Text"):Connect(function()
                WatermarkOutline.Size = UDim2.new(0, (string.len(WatermarkText.Text) * 5) + 10, 0, 20);
            end);

            WatermarkText.Text = ("Ethereal | %s | %s | Config - %s"):format(GameName, LRM_LinkedDiscordID, Library.Config);

            WatermarkOutline.Size = UDim2.new(0, 400, 0, 20);

            Library.WatermarkAccent = WatermarkAccent;
            Library.WatermarkText = WatermarkText; 
            Library.WatermarkOutline = WatermarkOutline;
        end;

        do --// Functions

            do --// Standard
                function Library:Round(Number, Divider)
                    if typeof(Number) == "Vector2" then
                        return Vector2.new(Library:Round(Number.X), Library:Round(Number.Y))
                    elseif typeof(Number) == "Vector3" then
                        return Vector3.new(Library:Round(Number.X), Library:Round(Number.Y), Library:Round(Number.Z))
                    elseif typeof(Number) == "Color3" then
                        return Library:Round(Number.r * 255), Library:Round(Number.g * 255), Library:Round(Number.b * 255)
                    else
                        return Number - Number % (Divider or 1);
                    end
                end;

                function Library:Tween(...)
                    local NewTween = TweenService:Create(...)
                    NewTween:Play();
                    return NewTween;
                end;

                function Library:MakeDraggable(Input, UI, Other)
                    UI.BackgroundColor3 = Library.Theme.Accent;
                    Other.BackgroundColor3 = Library.Theme.Accent;
                    local Delta = Input.Position - DragStart; 
                    UI.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y);
                end;
            end;
            
            do --// Keybinds
                function Library:ToggleBind(Name, Key)
                    if Name ~= "Open/Close" then 
                        if Library.KeybindsContainer:FindFirstChild(Name) then 
                            --Library.KeybindIndex = Library.KeybindIndex - 1;
                            Library.KeybindsContainer:FindFirstChild(Name):Destroy();
                        else 
                            local NewBind = Instance.new("TextLabel")
                            NewBind.Name = Name
                            NewBind.Parent = Library.KeybindsContainer;
                            --NewBind.Position = UDim2.new(0, 0, 0, 2 + (Library.KeybindIndex*10));
                            NewBind.BackgroundColor3 = Color3.fromRGB(17, 17, 17)
                            NewBind.BackgroundTransparency = 1.000
                            NewBind.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            NewBind.Size = UDim2.new(1, 0, 0, 9)
                            NewBind.FontFace = Library.MenuFont
                            NewBind.Text = Name .. (" [%s]"):format(Key);
                            NewBind.TextColor3 = Library.Theme.ElementOn;
                            NewBind.TextSize = Library.TextSize
                            NewBind.TextStrokeTransparency = 0.000
                            NewBind.TextWrapped = true
                            NewBind.TextXAlignment = Enum.TextXAlignment.Left;
                            --Library.KeybindIndex = Library.KeybindIndex+1;
                        end;
                    end;
                end;
            end;

            do --// Configs
                function Library:GetConfig()
                    local Config = {}

                    for Index, Value in pairs(Library.Flags) do 
                        if type(Value) == "table" then
                            if rawget(Value, "Value") or Value.Value then 
                                Config[Index] = Value.Value; 
                            elseif rawget(Value, "Color") then 
                                Config[Index] = {Color = {R = Value.Color.R, G = Value.Color.G, B = Value.Color.B}, Transparency = Value.Transparency};
                            elseif rawget(Value, "Key") and rawget(Value, "Name") then
                                Config[Index] = {Name = Value.Key.Name};
                            else
                                if not Config[Index] then 
                                    Config[Index] = Value.Value;
                                end;
                            end;
                        end;
                    end;
                    return Config, HttpService:JSONEncode(Config)
                end;

                function Library:SaveConfig(ConfigName)
                    local _, Encoded = Library:GetConfig();

                    if ConfigName and type(ConfigName) == "string" then 
                        writefile("Ethereal/Configs/"..ConfigName..".txt", Encoded);
                    end;
                end;

                function Library:DeleteConfig(ConfigName)
                    if isfile("Ethereal/Configs/"..ConfigName..".txt") then 
                        delfile("Ethereal/Configs/"..ConfigName..".txt");
                    end;
                end;

                function Library:LoadConfig(Config)
                    if not Config or Config == nil then
                        Library:Notify("Config not found, did you possibly delete it and not reselect a new one?");
                        return 
                    end;

                    local DecodedConfig = HttpService:JSONDecode(Config);

                    for Index, Value in pairs(DecodedConfig) do
                        task.spawn(function()
                            local Succ, Err = pcall(function()
                                local ToLib = Library.Flags[Index];

                                if ToLib then 
                                    if rawget(ToLib, "Key") and type(Value) ~= "boolean" then 
                                        if table.find({"MouseButton1","MouseWheel","MouseButton2","MouseButton3"}, tostring(Value.Name)) then
                                            ToLib:Set(Value, true)
                                        else 
                                            ToLib:Set(Value);
                                        end 
                                    elseif rawget(ToLib, "Color") then 
                                        ToLib:Set({
                                            Color = Color3.new(Value.Color.R, Value.Color.G, Value.Color.B),
                                            Transparency = Value.Transparency
                                        });
                                    elseif rawget(ToLib, "Value") and not rawget(ToLib, "Color") and not rawget(ToLib, "Key") then 
                                        if rawget(ToLib, "Multi") and type(Value) ~= "table" then 
                                            ToLib:Set({Value})
                                        else
                                            if ToLib.Min then 
                                                if Value > ToLib.Max then 
                                                    ToLib:Set(ToLib.Max);
                                                else 
                                                    ToLib:Set(Value);
                                                end;
                                            else
                                                ToLib:Set(Value);
                                            end;
                                        end
                                    else 
                                        ToLib:Set(Value)
                                    end;
                                end;
                            end);
                            if not Succ and Err then warn("[Ethereal ERROR]: "..tostring(Err)) end;
                        end);
                    end;
                end;
            end;

            function Library:NewWindow(Data)
                local Window = {
                    TabAmount = 0;
                    Name = Data.Name;
                    Tabs = {};
                    DefaultSize = Data.Size or UDim2.new(0, 583, 0, 753);
                    ImportantIndex = 9999999;
                    CurrentTab = nil;
                };

                LibraryScreenGui = Instance.new("ScreenGui");
                LibraryScreenGui.Parent = gethui();
                LibraryScreenGui.Enabled = false; 
                
                LibraryMouseGui = Instance.new("ScreenGui");
                LibraryMouseGui.Parent = gethui();
                LibraryMouseGui.Enabled = false;
                LibraryMouseGui.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
                LibraryMouseGui.IgnoreGuiInset = true;

                local MouseCursor = Instance.new("ImageLabel", LibraryMouseGui); do 
                    MouseCursor.Image = "http://www.roblox.com/asset/?id=5545698398";
                    MouseCursor.BackgroundTransparency = 1;
                    MouseCursor.Size = UDim2.new(0, 36, 0, 36);
                    MouseCursor.Parent = LibraryMouseGui;
                    Library.MouseCursor = MouseCursor;
                end;

                LibraryMouseGui.Enabled = true;

                Mouse.Move:Connect(function()
                    if LibraryScreenGui.Enabled then 
                        LibraryMouseGui.Enabled = true;
                        MouseLocation = UserInputService:GetMouseLocation();
                        MouseCursor.Position = UDim2.new(0, MouseLocation.X - 18, 0, MouseLocation.Y - 18);
                    else 
                        LibraryMouseGui.Enabled = false;
                    end;
                end);

                local TabSize = 545 / Window.TabAmount;
                local Title = Instance.new("TextLabel")
                local WindowBorder = Instance.new("TextButton");
                local BorderInner = Instance.new("Frame")
                local WorkspaceOutter = Instance.new("Frame");
                local WorkspaceInner = Instance.new("Frame");
                local Tabs = Instance.new("Frame");
                local TabsLayout = Instance.new("UIListLayout");
                local Resizer = Instance.new("ImageButton"); 

                local PageArea = Instance.new("Frame");
                local PageAreaInner = Instance.new("Frame");
                local TabTransitioner = Instance.new("Frame");
                local TabTransitioner2 = Instance.new("Frame");

                local UIShadow = Instance.new("ImageLabel");

                local VisibleBorder = Instance.new("Frame");

                Window.MainFrame = WindowBorder;
                
                do --// Element Properties
                    LibraryScreenGui.Parent = gethui();
                    LibraryScreenGui.Name = "9391203j312i3kashd9q312093ajsdokake219183213h";
                    LibraryScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;

                    WindowBorder.AutoButtonColor = false;
                    WindowBorder.Text = ""
                    WindowBorder.Parent = LibraryScreenGui
                    WindowBorder.BackgroundColor3 = Library.Theme.LightContrast
                    WindowBorder.BorderColor3 = Library.Theme.Border
                    WindowBorder.Position = UDim2.new(0.104468189, 0, 0.202439025, 0)
                    WindowBorder.Size = Window.DefaultSize;

                    UIShadow.Parent = WindowBorder;
                    UIShadow.Image = "rbxassetid://6015897843";

                    UIShadow.ScaleType = Enum.ScaleType.Slice;
                    UIShadow.SliceCenter = Rect.new(49, 49, 450, 450);
                    UIShadow.ImageColor3 = Library.Theme.Accent;
                    UIShadow.ImageTransparency = 0.5;
                    UIShadow.BackgroundTransparency = 1;
                    UIShadow.Size = UDim2.new(1, 47, 1, 47);
                    UIShadow.Position = UDim2.new(0.5, 0, 0.5, 0);
                    UIShadow.AnchorPoint = Vector2.new(0.5, 0.5);

                    VisibleBorder.Parent = WindowBorder;
                    VisibleBorder.Size = UDim2.new(1, 0, 1, 0);
                    VisibleBorder.BackgroundColor3 = Library.Theme.LightContrast;
                    VisibleBorder.BorderColor3 = Library.Theme.Border;

                    BorderInner.Parent = WindowBorder
                    BorderInner.BackgroundColor3 = Library.Theme.VeryDarkContrast
                    BorderInner.BorderColor3 = Library.Theme.Border
                    BorderInner.Position = UDim2.new(0, 2, 0, 2)
                    BorderInner.Size = UDim2.new(1, -4, 1, -4)

                    Resizer.Parent = BorderInner
                    Resizer.BackgroundColor3 = Library.Theme.Accent
                    Resizer.BackgroundTransparency = 1.000
                    Resizer.BorderColor3 = Color3.fromRGB(0, 0, 0)
                    Resizer.BorderSizePixel = 0
                    Resizer.Position = UDim2.new(1, -12, 1, -12)
                    Resizer.Size = UDim2.new(0, 12, 0, 12)
                    Resizer.Image = "rbxassetid://7368471234"
                    Resizer.ImageColor3 = Library.Theme.Accent;
                    Resizer.AutoButtonColor = false;
                    if not IsElectron then 
                        Resizer.Modal = true;
                    end
                    WorkspaceOutter.Parent = BorderInner
                    WorkspaceOutter.BackgroundColor3 = Library.Theme.LightContrast
                    WorkspaceOutter.BorderColor3 = Library.Theme.Border
                    WorkspaceOutter.Position = UDim2.new(0, 5, 0, 20)
                    WorkspaceOutter.Size = UDim2.new(1, -15, 1, -32)

                    WorkspaceInner.Parent = WorkspaceOutter
                    WorkspaceInner.BackgroundColor3 = Library.Theme.VeryDarkContrast
                    WorkspaceInner.BorderColor3 = Library.Theme.Border
                    WorkspaceInner.NextSelectionUp = WorkspaceOutter
                    WorkspaceInner.Position = UDim2.new(0, 2, 0, 2)
                    WorkspaceInner.Size = UDim2.new(1, -4, 1, -4)

                    Tabs.Parent = WorkspaceInner
                    Tabs.BackgroundColor3 = Library.Theme.ElementOn
                    Tabs.BackgroundTransparency = 1.000
                    Tabs.BorderColor3 = Library.Theme.Border
                    Tabs.BorderSizePixel = 0
                    Tabs.Position = UDim2.new(0.0136363637, 0, 0, 0)
                    Tabs.Size = UDim2.new(1, -15, 0, 24)

                    TabsLayout.Parent = Tabs
                    TabsLayout.FillDirection = Enum.FillDirection.Horizontal
                    TabsLayout.SortOrder = Enum.SortOrder.LayoutOrder

                    PageArea.Parent = WorkspaceInner
                    PageArea.BackgroundColor3 = Library.Theme.LightContrast
                    PageArea.BorderColor3 = Library.Theme.Border
                    
                    PageArea.Position = UDim2.new(0, 7, 0, 25)
                    PageArea.Size = UDim2.new(1, -13, 1, -30)

                    PageAreaInner.Parent = PageArea
                    PageAreaInner.BackgroundColor3 = Library.Theme.DarkContrast
                    PageAreaInner.BorderColor3 = Library.Theme.Border
                    PageAreaInner.Position = UDim2.new(0, 2, 0, 2)
                    PageAreaInner.Size = UDim2.new(1, -4, 1, -4)

                    TabTransitioner.Parent = PageAreaInner;
                    TabTransitioner.BackgroundColor3 = Library.Theme.DarkContrast;
                    TabTransitioner.BorderSizePixel = 0;
                    TabTransitioner.Size = UDim2.new(1, -4, 1, -4);
                    TabTransitioner.Position = UDim2.new(0, 2, 0, 2);
                    TabTransitioner.ZIndex = 1000;
                    TabTransitioner.Name = "TabTransitioner";

                    TabTransitioner2.Parent = PageAreaInner;
                    TabTransitioner2.BackgroundColor3 = Library.Theme.DarkContrast;
                    TabTransitioner2.BorderSizePixel = 0;
                    TabTransitioner2.Size = UDim2.new(1, -4, 1, -24);
                    TabTransitioner2.Position = UDim2.new(0, 2, 0, 26);
                    TabTransitioner2.ZIndex = 1000;
                    TabTransitioner2.Name = "TabTransitioner2";

                    Title.Parent = WindowBorder
                    Title.BackgroundColor3 = Library.Theme.ElementOn
                    Title.BackgroundTransparency = 1.000
                    Title.BorderColor3 = Library.Theme.Border
                    Title.BorderSizePixel = 0
                    Title.Position = UDim2.new(0, 0, 0, 5);
                    Title.Size = UDim2.new(1, 0, 0, 15)
                    Title.FontFace = Library.MenuFont
                    Title.RichText = true;
                    Title.Text = ("Ethereal | <font color =\"rgb(%d, %d, %d)\"> %s</font>"):format(Library.Theme.Accent.R * 255, Library.Theme.Accent.G * 255, Library.Theme.Accent.B * 255, GameName);
                    Window.TitleLabel = Title;
                    Title.TextColor3 = Library.Theme.ElementOn
                    Title.TextSize = Library.TextSize
                end;

                do --// Setting some stuff in the window table (ignore)
                    Window.ResizeButton = Resizer;
                    Window.Border = WindowBorder;
                   -- Window.Image = PageAreaInner;
                end;

                do --// Window functions
                    do  --// Window connections
                        do  --// Dragging
                            WindowBorder.InputBegan:Connect(function(Input)
                                if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then 
                                    Dragging = true;
                                    DragStart = Input.Position;
                                    StartPos = WindowBorder.Position;
                
                                    Input.Changed:Connect(function()
                                        if Input.UserInputState == Enum.UserInputState.End then 
                                            Dragging = false;
                                            VisibleBorder.BackgroundColor3 = Library.Theme.LightContrast
                                            WindowBorder.BackgroundColor3 = Library.Theme.LightContrast
                                        end;
                                    end);
                                end;
                            end);
                
                            WindowBorder.InputChanged:Connect(function(Input)
                                if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then 
                                    DragInput = Input;
                                end;
                            end);
                        end;

                        do --// Resizer
                            Resizer.InputBegan:Connect(function(Input)
                                if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                                    IsResizing = true;
                                    if not LastPosition then 
                                        StartSize = WindowBorder.AbsoluteSize;
                                        LastPosition = Vector2.new(Mouse.X, Mouse.Y);
                                    end;
                                    Input.Changed:Connect(function()
                                        if Input.UserInputState == Enum.UserInputState.End then 
                                            IsResizing = false;
                                            StartSize = WindowBorder.AbsoluteSize;
                                            LastPosition = nil;
                                        end;
                                    end);
                                end;
                            end);
        
                            Resizer.InputChanged:Connect(function(Input)
                                if Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch then 
                                    ResizeInput = Input;
                                end;
                            end);
                        end;

                        do --// UserinputService
                            UserInputService.InputChanged:Connect(function(Input)
                                if Input == DragInput and Dragging then 
                                    Library:MakeDraggable(Input, WindowBorder, VisibleBorder);
                                end;

                                if Input == ResizeInput and IsResizing then 
                                    if LastPosition then 
                                        local MousePos = Vector2.new(Mouse.X, Mouse.Y);
                                        local Displacement = Vector2.new(MousePos.X - LastPosition.X, MousePos.Y - LastPosition.Y);
            
                                        local Scale = StartSize + Displacement;
                                        
                                        local ScaleX = Scale.X;
                                        local ScaleY = Scale.Y;

                                        if ScaleX > Window.DefaultSize.X.Offset then 
                                            WindowBorder.Size = UDim2.fromOffset(ScaleX, WindowBorder.Size.Y.Offset);
                                        end;
                                        
                                        if ScaleY > Window.DefaultSize.Y.Offset then 
                                            WindowBorder.Size = UDim2.fromOffset(WindowBorder.Size.X.Offset, ScaleY);
                                        end;
                                    end;
                                end;
                            end);

                        end;
                    end;

                    function Window:TransitionTab(IsNested, IsPrevious)
                        if not IsNested then
                            if not IsPrevious then 
                                Library:Tween(TabTransitioner, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0});
                                Library:Tween(TabTransitioner2, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0});
                                task.wait(0.1);
                                Library:Tween(TabTransitioner, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                                Library:Tween(TabTransitioner2, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                            else 
                                Library:Tween(TabTransitioner, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0});
                                task.wait(0.1);
                                Library:Tween(TabTransitioner, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                            end;
                        else
                            if not IsPrevious then 
                                Library:Tween(TabTransitioner2, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0});
                                task.wait(0.1);
                                Library:Tween(TabTransitioner2, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                            end;
                        end;
                    end;    

                    function Window:CreateColorpicker(Parent, Name)
                        local ColorFrame = Instance.new("Frame")
                        local Innercolor = Instance.new("Frame")
                        local HueOutline = Instance.new("Frame")
                        local HuePicker = Instance.new("TextButton")
                        local UIGradient = Instance.new("UIGradient")
                        local HuePick = Instance.new("Frame")
                        local PickerOutline_3 = Instance.new("Frame")
                        local ColorPicker = Instance.new("ImageButton")
                        local ColorPick = Instance.new("Frame")
                        local TOutline = Instance.new("Frame")
                        local TransparencyPicker = Instance.new("ImageButton")
                        local TransparencyColor = Instance.new("ImageLabel")
                        local TransparencyPick = Instance.new("Frame")
                        local TitleFrame = Instance.new("Frame")
                        local ColorpickerTitle_2 = Instance.new("TextLabel")
                        
                        local CopyButtonOutter = Instance.new("Frame");
                        local CopyButton = Instance.new("TextButton");
                        local PasteButtonOutter = Instance.new("Frame");
                        local PasteButton = Instance.new("TextButton")

                        local SetBoxOutter = Instance.new("Frame");
                        local SetBox = Instance.new("TextBox");

                        --// Properties (its long)
                        do	
                            ColorFrame.Name = "ColorFrame"
                            ColorFrame.Parent = Parent 
                        
                            ColorFrame.BackgroundColor3 = Library.Theme.LightContrast
                            ColorFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ColorFrame.BorderSizePixel = 0
                            --{-10, 0},{3, 0}
                            ColorFrame.Position = UDim2.new(-10, 20, 3, 0)
                            ColorFrame.Size = UDim2.new(0, 200, 0, 240);

                            ColorFrame.Visible = false
                            ColorFrame.ZIndex = 11;

                            Innercolor.Name = "Innercolor"
                            Innercolor.Parent = ColorFrame
                            Innercolor.BackgroundColor3 = Library.Theme.DarkContrast
                            Innercolor.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            Innercolor.BorderSizePixel = 1
                            Innercolor.Position = UDim2.new(0, 2, 0, 2)
                            Innercolor.Size = UDim2.new(1, -4, 1, -4)

                            HueOutline.Name = "HueOutline"
                            HueOutline.Parent = Innercolor
                            HueOutline.BackgroundColor3 = Library.Theme.LightContrast
                            HueOutline.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            HueOutline.BorderSizePixel = 1
                            HueOutline.Position = UDim2.new(0.899999976, -5, 0.00600000005, 0)
                            HueOutline.Size = UDim2.new(0, 23, 0, 162)

                            HuePicker.Name = "HuePicker"
                            HuePicker.Parent = HueOutline
                            HuePicker.BackgroundColor3 = Color3.fromRGB(255,255,255)
                            HuePicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            HuePicker.BorderSizePixel = 1
                            HuePicker.Position = UDim2.new(0, 2, 0, 2)
                            HuePicker.Size = UDim2.new(1, -4, 1, -4)
                            HuePicker.AutoButtonColor = false
                            HuePicker.FontFace  = Library.MenuFont
                            HuePicker.Text = ""
                            HuePicker.TextColor3 = Color3.fromRGB(0, 0, 0)
                            HuePicker.TextSize = Library.TextSize

                            UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)), ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(0.33, Color3.fromRGB(0, 0, 255)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 255, 0)), ColorSequenceKeypoint.new(0.83, Color3.fromRGB(255, 255, 0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 0))}
                            UIGradient.Rotation = 90
                            UIGradient.Parent = HuePicker

                            HuePick.Name = "HuePick"
                            HuePick.Parent = HuePicker
                            HuePick.BackgroundColor3 = Library.Theme.ElementOn
                            HuePick.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            HuePick.Size = UDim2.new(1, 0, 0, 1)

                            PickerOutline_3.Name = "PickerOutline"
                            PickerOutline_3.Parent = Innercolor
                            PickerOutline_3.BackgroundColor3 = Library.Theme.LightContrast
                            PickerOutline_3.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            PickerOutline_3.BorderSizePixel = 1
                            PickerOutline_3.Position = UDim2.new(0, 2, 0, 2) 
                            PickerOutline_3.Size = UDim2.new(0, 162, 0, 162)

                            ColorPicker.Name = "ColorPicker"
                            ColorPicker.Parent = PickerOutline_3
                            ColorPicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            ColorPicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ColorPicker.BorderSizePixel = 1
                            ColorPicker.Position = UDim2.new(0, 2, 0, 2)
                            ColorPicker.Size = UDim2.new(1, -4, 1, -4)
                            ColorPicker.Image = "rbxassetid://4155801252"
                            ColorPicker.ImageColor3 = Color3.fromRGB(255, 0, 2)
                            ColorPicker.AutoButtonColor = false;
                            
                            ColorPick.Name = "ColorPick"
                            ColorPick.Parent = ColorPicker
                            ColorPick.BackgroundColor3 = Library.Theme.ElementOn
                            ColorPick.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ColorPick.Size = UDim2.new(0, 1, 0, 1)

                            TOutline.Name = "TOutline"
                            TOutline.Parent = Innercolor
                            TOutline.BackgroundColor3 = Library.Theme.LightContrast
                            TOutline.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            TOutline.BorderSizePixel = 1
                            TOutline.Position = UDim2.new(0, 2, 0, 169)
                            TOutline.Size = UDim2.new(1, -4, 0, 20)

                            TransparencyPicker.Name = "TransparencyPicker"
                            TransparencyPicker.Parent = TOutline
                            TransparencyPicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TransparencyPicker.BackgroundTransparency = 0
                            TransparencyPicker.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            TransparencyPicker.BorderSizePixel = 0;
                            TransparencyPicker.Position = UDim2.new(0, 2, 0, 2)
                            TransparencyPicker.Size = UDim2.new(1, -4, 1, -4)
                            TransparencyPicker.ScaleType = Enum.ScaleType.Tile
                            TransparencyPicker.TileSize = UDim2.new(0, 10, 0, 10)
                            TransparencyPicker.AutoButtonColor = false;

                            TransparencyColor.Name = "TransparencyColor"
                            TransparencyColor.Parent = TransparencyPicker
                            TransparencyColor.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TransparencyColor.BackgroundTransparency = 0;
                            TransparencyColor.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            TransparencyColor.BorderSizePixel = 1;
                            TransparencyColor.Size = UDim2.new(1, 0, 1, 0)
                            TransparencyColor.Position = UDim2.new(0, 0, 0, 0)
                            TransparencyColor.Image = "rbxassetid://3887017050"
                            TransparencyColor.ImageColor3 = Color3.fromRGB(255, 0, 0)

                            TransparencyPick.Name = "TransparencyPick"
                            TransparencyPick.Parent = TransparencyPicker
                            TransparencyPick.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TransparencyPick.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            TransparencyPick.Size = UDim2.new(0, 1, 1, 0)

                            TitleFrame.Name = "TitleFrame"
                            TitleFrame.Parent = ColorFrame
                            TitleFrame.BackgroundColor3 = Library.Theme.LightContrast
                            TitleFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            TitleFrame.BorderSizePixel = 0
                            TitleFrame.Position = UDim2.new(0, 0, 0, -14)
                            TitleFrame.Size = UDim2.new(1, 0, 0, 15)

                            ColorpickerTitle_2.Name = "ColorpickerTitle"
                            ColorpickerTitle_2.Parent = TitleFrame
                            ColorpickerTitle_2.BackgroundColor3 = Library.Theme.MedianContrast
                            ColorpickerTitle_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            ColorpickerTitle_2.BorderSizePixel = 1
                            ColorpickerTitle_2.Position = UDim2.new(0, 2, 0, 2)
                            ColorpickerTitle_2.Size = UDim2.new(1, -4, 1, -4)
                            ColorpickerTitle_2.FontFace  = Library.MenuFont
                            ColorpickerTitle_2.Text = Name
                            ColorpickerTitle_2.TextColor3 = Library.Theme.ElementOn
                            ColorpickerTitle_2.TextSize = Library.TextSize
                            ColorpickerTitle_2.TextWrapped = true;

                            CopyButtonOutter.Name = "Copy"
                            CopyButtonOutter.Parent = Innercolor
                            CopyButtonOutter.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                            CopyButtonOutter.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            CopyButtonOutter.Position = UDim2.new(0, 2, 0, 193)
                            CopyButtonOutter.Size = UDim2.new(0, 93, 0, 18)
    
                            CopyButton.Name = "CopyButton"
                            CopyButton.Parent = CopyButtonOutter
                            CopyButton.BackgroundColor3 = Library.Theme.MedianContrast
                            CopyButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            CopyButton.Position = UDim2.new(0, 2, 0, 2)
                            CopyButton.Size = UDim2.new(1, -4, 1, -4)
                            CopyButton.FontFace = Library.MenuFont;
                            CopyButton.Text = "Copy"
                            CopyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                            CopyButton.TextSize = Library.TextSize
                            CopyButton.AutoButtonColor = false;
    
                            PasteButtonOutter.Name = "Paster"
                            PasteButtonOutter.Parent = Innercolor
                            PasteButtonOutter.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                            PasteButtonOutter.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            PasteButtonOutter.Position = UDim2.new(0, 101, 0, 193)
                            PasteButtonOutter.Size = UDim2.new(0, 93, 0, 18)
    
                            PasteButton.Name = "PasteButton"
                            PasteButton.Parent = PasteButtonOutter
                            PasteButton.BackgroundColor3 = Library.Theme.MedianContrast
                            PasteButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            PasteButton.Position = UDim2.new(0, 2, 0, 2)
                            PasteButton.Size = UDim2.new(1, -4, 1, -4)
                            PasteButton.FontFace = Library.MenuFont;
                            PasteButton.AutoButtonColor = false;
                            PasteButton.Text = "Paste"
                            PasteButton.TextColor3 = Color3.fromRGB(255, 255, 255)
                            PasteButton.TextSize = Library.TextSize

                            SetBoxOutter.Name = "Setbox"
                            SetBoxOutter.Parent = Innercolor
                            SetBoxOutter.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                            SetBoxOutter.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            SetBoxOutter.Position = UDim2.new(0, 2, 0, 216)
                            SetBoxOutter.Size = UDim2.new(0, 192, 0, 18)
    
                            SetBox.Name = "SetBox"
                            SetBox.Parent = SetBoxOutter
                            SetBox.BackgroundColor3 = Library.Theme.MedianContrast
                            SetBox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                            SetBox.Position = UDim2.new(0, 2, 0, 2)
                            SetBox.Size = UDim2.new(1, -4, 1, -4)
                            SetBox.FontFace = Library.MenuFont;
                            SetBox.Text = "";
                            SetBox.TextColor3 = Color3.fromRGB(255, 255, 255)
                            SetBox.TextSize = Library.TextSize
                        end;

                        return ColorFrame, InnerColor, HueOutline, HuePicker, UIGradient, HuePick, PickerOutline_3, HuePick, ColorPicker, ColorPick, TOutline, TransparencyPicker, TransparencyColor, TransparencyPick, TitleFrame, ColorpickerTitle_2, PasteButton, CopyButton, SetBox

                    end;

                    function Window:SetTab(Name)
                        Window.CurrentTab = Name;
                        Window:TransitionTab(false, false);
                        for Index, Value in next, Window.Tabs do
                            if not Value.Name:find("Nested") then
                                local TabName = Value.Name;
                                local TabButton = Value.Button;
                                --local Underline = Value.Underline;
                                if Name ~= TabName then
                                    Library:Tween(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                    --Library:Tween(Underline, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                                    Value.Page.Visible = false;
                                    Value.IsOpen = false;
                                    if Value.IncludeNested then
                                        for Index2, Value2 in next, Value.NestedTabs do 
                                            Value2.Page.Visible = false;
                                            Value2.IsOpen = false;

                                            if Value2.Button then 
                                                Library:Tween(Value2.Button, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                --Library:Tween(Value2.Underline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0});
                                            end;
                                        end;
                                    end;
                                else 
                                    Library:Tween(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                    --Library:Tween(Underline, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 0});
                                    Value.Page.Visible = true;
                                    Value.IsOpen = true;
                                    if Value.LastOpenedTab then 
                                        Value:SetTab(Value.LastOpenedTab, true)
                                    end;
                                end;
                            end;
                        end;
                    end;

                    function Window:UpdateTabs()
                        local TabSize = Tabs.AbsoluteSize.X / Window.TabAmount;
                        for Index, Value in next, Window.Tabs do 
                            Value.Button.Size = UDim2.new(0, TabSize, 0, 26);
                        end;
                    end;

                    function Window:NewTab(Data)
                        local Tab = {
                            Name = Data.Name;
                            Sections = {};
                            NestedTabs = {};
                            Page = nil;
                            IsOpen = false;
                            SectionZIndex = 1000;
                            IncludeNested = Data.IncludeNested;
                            Left = nil;
                            Right = nil;
                            TabAmount = 0;
                            LastOpenedTab = nil;
                            IsPlayerlist = Data.IsPlayerlist;
                            Playerlist = {};
                            SelectedPlayer = nil;
                        };
                        Window.TabAmount = Window.TabAmount + 1;

                        Tab.__index = Tab;

                        local Left, Right
                        local CurrentPage = Instance.new("ImageLabel");
                        local NestedTabsOutline, NestedTabs = nil, nil

                        do --// Elements
                            local TabButton = Instance.new("TextButton");
                            --local TabUnderline = Instance.new("Frame");
                            local TabGradient = Instance.new("UIGradient");

                            Left = Instance.new("Frame");
                            local LeftPadding = Instance.new("UIPadding");
                            local LeftListLayout = Instance.new("UIListLayout");

                            Tab.Left = Left;

                            Right = Instance.new("Frame");
                            local RightListLayout = Instance.new("UIListLayout");
                            local RightPadding = Instance.new("UIPadding");

                            Tab.Right = Right;

                            do --// Tab element properties
                                CurrentPage.Name = "Page"..Data.Name;
                                CurrentPage.Parent = PageAreaInner
                                CurrentPage.BackgroundColor3 = Library.Theme.ElementOn
                                CurrentPage.BackgroundTransparency = 1.000;
                                CurrentPage.ImageTransparency = 1;
                                CurrentPage.BorderColor3 = Library.Theme.Border
                                CurrentPage.BorderSizePixel = 0
                                CurrentPage.Position = UDim2.new(0, 0, 0, 0)
                                CurrentPage.Size = UDim2.new(1, 0, 1, -5);
        
                                CurrentPage.Visible = false;

                                Left.Name = "Left"
                                Left.Parent = CurrentPage
                                Left.BackgroundColor3 = Library.Theme.ElementOn
                                Left.BackgroundTransparency = 1.000
                                Left.BorderColor3 = Library.Theme.Border
                                Left.BorderSizePixel = 0
                                Left.Size = UDim2.new(0.5, -3, 1, 0)

                                LeftPadding.Name = "LeftPadding"
                                LeftPadding.Parent = Tab.Left
                                LeftPadding.PaddingTop = UDim.new(0, 9)
                                LeftPadding.PaddingLeft = UDim.new(0, 2);

                                LeftListLayout.Name = "LeftListLayout"
                                LeftListLayout.Parent = Tab.Left
                                LeftListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                LeftListLayout.Padding = UDim.new(0, 8);

                                Right.Name = "Right"
                                Right.Parent = CurrentPage
                                Right.BackgroundColor3 = Library.Theme.ElementOn
                                Right.BackgroundTransparency = 1.000
                                Right.BorderColor3 = Library.Theme.Border
                                Right.BorderSizePixel = 0
                                Right.Position = UDim2.new(0.5, 3, 0, 0)
                                Right.Size = UDim2.new(0.5, -3, 1, 0)

                                RightListLayout.Name = "RightListLayout"
                                RightListLayout.Parent = Tab.Right
                                RightListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                RightListLayout.Padding = UDim.new(0, 8);

                                RightPadding.Name = "RightPadding";
                                RightPadding.Parent = Tab.Right;
                                RightPadding.PaddingTop = UDim.new(0, 9);
                                RightPadding.PaddingRight = UDim.new(0, 2);

                                TabButton.Name = "TabButton"
                                TabButton.Parent = Tabs
                                TabButton.BackgroundColor3 = Library.Theme.ElementOn
                                TabButton.BackgroundTransparency = 1.000
                                TabButton.BorderColor3 = Library.Theme.Border
                                TabButton.BorderSizePixel = 0
                                TabButton.Size = UDim2.new(0, TabSize, 0, 26)
                                TabButton.FontFace = Library.MenuFont
                                TabButton.Text = Tab.Name;
                                Tab.Button = TabButton;

                                TabButton.TextColor3 = Library.Theme.ElementOff
                                TabButton.TextSize = Library.TextSize

                                --[[TabUnderline.Name = "TabUnderline"
                                TabUnderline.Parent = TabButton
                                TabUnderline.BackgroundColor3 = Library.Theme.ElementOn
                                TabUnderline.BorderColor3 = Library.Theme.Border
                                TabUnderline.BorderSizePixel = 0
                                TabUnderline.Position = UDim2.new(0, 0, 1, -5)
                                TabUnderline.Size = UDim2.new(1, 0, 0, 1)
                                TabUnderline.BackgroundTransparency = 1;
                                TabUnderline.Visible = true;]]

                                --Tab.Underline = TabUnderline;
                                --TabGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Library.Theme.DarkContrast), ColorSequenceKeypoint.new(0.50, Library.Theme.Accent), ColorSequenceKeypoint.new(1.00, Library.Theme.DarkContrast)}
                                --TabGradient.Name = "TabGradient"
                                --TabGradient.Parent = TabUnderline

                                TabButton.MouseButton1Down:Connect(function()
                                    Window:SetTab(Tab.Name);
                                end);
                                TabButton.MouseEnter:Connect(function()
                                    Library:Tween(TabButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                end);
                                TabButton.MouseLeave:Connect(function()
                                    if Tab.IsOpen == false or not Tab.IsOpen then 
                                        Library:Tween(TabButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                    end;
                                end);
                            end;

                            do --// If is nested
                                if Data.IncludeNested then 
                                    NestedTabsOutline = Instance.new("Frame");
                                    NestedTabs = Instance.new("Frame");

                                    local NestedLayout = Instance.new("UIListLayout");

                                    do --// Properties
                                        
                                        NestedTabsOutline.Parent = CurrentPage;
                                        NestedTabsOutline.BorderColor3 = Library.Theme.Border;
                                        NestedTabsOutline.Size = UDim2.new(1, 0, 0, 24);
                                        NestedTabsOutline.BackgroundColor3 = Library.Theme.LightContrast;

                                        NestedTabs.Parent = NestedTabsOutline;
                                        NestedTabs.Size = UDim2.new(1, -4, 1, -4);
                                        NestedTabs.Position = UDim2.new(0, 2, 0, 2);
                                        NestedTabs.BackgroundColor3 = Library.Theme.DarkContrast;
                                        NestedTabs.BorderColor3 = Library.Theme.Border;

                                        NestedLayout.Parent = NestedTabs
                                        NestedLayout.FillDirection = Enum.FillDirection.Horizontal
                                        NestedLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                    end;
                                end;
                            end;

                            Tab.Page = CurrentPage;

                            if Tab.IsPlayerlist then 
                                Left:Destroy();
                                Right:Destroy();

                                local PlayerlistBorder = Instance.new("Frame")
                                local PlayerlistInner = Instance.new("Frame")
                                local PlayerlistTitle = Instance.new("TextLabel")
                                local ScrollingBorder = Instance.new("Frame")
                                local PlayersList = Instance.new("ScrollingFrame")

                                local UIPadding = Instance.new("UIPadding")
                                local UIListLayout = Instance.new("UIListLayout")
                                local PlayerInteractionBorder = Instance.new("Frame")
                                local InteractionInner = Instance.new("Frame")
                                local PlayerBorder = Instance.new("Frame")
                                local Headshot = Instance.new("ImageLabel");
                                local PlayerId = Instance.new("TextLabel");
                                local PlayerName_2 = Instance.new("TextLabel");
                                local PlayerDisplay = Instance.new("TextLabel");
                                local FriendlyBorder = Instance.new("Frame")
                                local MakeFriendly = Instance.new("TextButton")
                                local NeutralBorder = Instance.new("Frame")
                                local MakeNeutral = Instance.new("TextButton")
                                
                                Tab.PlayerTitle = PlayerlistTitle;
                                do --// Elements
                                    do --// Element Properties
                                        PlayerlistBorder.Name = "PlayerlistBorder"
                                        PlayerlistBorder.Parent = CurrentPage
                                        PlayerlistBorder.BackgroundColor3 = Library.Theme.LightContrast;
                                        PlayerlistBorder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerlistBorder.Position = UDim2.new(0, 2, 0, 2)
                                        PlayerlistBorder.Size = UDim2.new(1, -4, 1, 1)

                                        PlayerlistInner.Name = "PlayerlistInner"
                                        PlayerlistInner.Parent = PlayerlistBorder
                                        PlayerlistInner.BackgroundColor3 = Library.Theme.DarkContrast
                                        PlayerlistInner.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerlistInner.Position = UDim2.new(0, 2, 0, 2)
                                        PlayerlistInner.Size = UDim2.new(1, -4, 1, -4)

                                        PlayerlistTitle.Name = "PlayerlistTitle"
                                        PlayerlistTitle.Parent = PlayerlistInner
                                        PlayerlistTitle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerlistTitle.BackgroundTransparency = 1.000
                                        PlayerlistTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerlistTitle.BorderSizePixel = 0
                                        PlayerlistTitle.Position = UDim2.new(0, 6, 0, 4)
                                        PlayerlistTitle.Size = UDim2.new(0, 50, 0, 14)
                                        PlayerlistTitle.FontFace = Library.MenuFont
                                        PlayerlistTitle.Text = "Player List (Displaying ??)"
                                        PlayerlistTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerlistTitle.TextSize = Library.TextSize
                                        PlayerlistTitle.TextXAlignment = Enum.TextXAlignment.Left
                                        PlayerlistTitle.TextYAlignment = Enum.TextYAlignment.Top

                                        ScrollingBorder.Name = "ScrollingBorder"
                                        ScrollingBorder.Parent = PlayerlistInner
                                        ScrollingBorder.BackgroundColor3 = Library.Theme.LightContrast
                                        ScrollingBorder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        ScrollingBorder.Position = UDim2.new(0, 6, 0, 18)
                                        ScrollingBorder.Size = UDim2.new(1, -12, 0.5, 0)

                                        PlayersList.Name = "PlayersList"
                                        PlayersList.Parent = ScrollingBorder
                                        PlayersList.Active = true
                                        PlayersList.BackgroundColor3 = Library.Theme.DarkContrast
                                        PlayersList.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayersList.Position = UDim2.new(0, 2, 0, 2)
                                        PlayersList.Size = UDim2.new(1, -4, 1, -4)
                                        PlayersList.ScrollBarThickness = 0
                                        PlayersList.AutomaticCanvasSize = Enum.AutomaticSize.Y;

                                        UIPadding.Parent = PlayersList
                                        UIPadding.PaddingLeft = UDim.new(0, 4)
                                        UIPadding.PaddingTop = UDim.new(0, 2)

                                        UIListLayout.Parent = PlayersList
                                        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                        UIListLayout.Padding = UDim.new(0, 2)

                                        PlayerInteractionBorder.Name = "PlayerInteractionBorder"
                                        PlayerInteractionBorder.Parent = PlayerlistInner
                                        PlayerInteractionBorder.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                                        PlayerInteractionBorder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerInteractionBorder.BorderSizePixel = 0
                                        PlayerInteractionBorder.Position = UDim2.new(0, 6, 0.5, 23)
                                        PlayerInteractionBorder.Size = UDim2.new(1, -12, 0.5, -249)

                                        InteractionInner.Name = "InteractionInner"
                                        InteractionInner.Parent = PlayerInteractionBorder
                                        InteractionInner.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
                                        InteractionInner.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        InteractionInner.Position = UDim2.new(0, 2, 0, 2)
                                        InteractionInner.Size = UDim2.new(1, -4, 1, -4)

                                        PlayerBorder.Name = "PlayerBorder"
                                        PlayerBorder.Parent = InteractionInner
                                        PlayerBorder.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                                        PlayerBorder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerBorder.Position = UDim2.new(0, 4, 0, 3)
                                        PlayerBorder.Size = UDim2.new(0, 100, 0, 100)

                                        Headshot.Name = "Headshot"
                                        Headshot.Parent = PlayerBorder
                                        Headshot.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
                                        Headshot.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        Headshot.Position = UDim2.new(0, 2, 0, 2)
                                        Headshot.Size = UDim2.new(1, -4, 1, -4)
                                        if GameName ~= 'Fallen' then 
                                            Headshot.Image = ""
                                        end;
                                        PlayerId.Name = "PlayerId"
                                        PlayerId.Parent = PlayerBorder
                                        PlayerId.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerId.BackgroundTransparency = 1.000
                                        PlayerId.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerId.BorderSizePixel = 0
                                        PlayerId.Position = UDim2.new(0, 106, 0, 4)
                                        PlayerId.Size = UDim2.new(0, 50, 0, 9)
                                        PlayerId.FontFace = Library.MenuFont;
                                        PlayerId.Text = ""
                                        PlayerId.TextColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerId.TextSize = Library.TextSize
                                        PlayerId.TextXAlignment = Enum.TextXAlignment.Left
                                        PlayerId.TextYAlignment = Enum.TextYAlignment.Top

                                        PlayerName_2.Name = "PlayerName"
                                        PlayerName_2.Parent = PlayerBorder
                                        PlayerName_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerName_2.BackgroundTransparency = 1.000
                                        PlayerName_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerName_2.BorderSizePixel = 0
                                        PlayerName_2.Position = UDim2.new(0, 106, 0, 14)
                                        PlayerName_2.Size = UDim2.new(0, 50, 0, 9)
                                        PlayerName_2.FontFace = Library.MenuFont;
                                        PlayerName_2.Text = ""
                                        PlayerName_2.TextColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerName_2.TextSize = Library.TextSize
                                        PlayerName_2.TextXAlignment = Enum.TextXAlignment.Left
                                        PlayerName_2.TextYAlignment = Enum.TextYAlignment.Top

                                        PlayerDisplay.Name = "PlayerDisplay"
                                        PlayerDisplay.Parent = PlayerBorder
                                        PlayerDisplay.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerDisplay.BackgroundTransparency = 1.000
                                        PlayerDisplay.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        PlayerDisplay.BorderSizePixel = 0
                                        PlayerDisplay.Position = UDim2.new(0, 106, 0, 24)
                                        PlayerDisplay.Size = UDim2.new(0, 50, 0, 9)
                                        PlayerDisplay.FontFace = Library.MenuFont;
                                        PlayerDisplay.Text = ""
                                        PlayerDisplay.TextColor3 = Color3.fromRGB(255, 255, 255)
                                        PlayerDisplay.TextSize = Library.TextSize
                                        PlayerDisplay.TextXAlignment = Enum.TextXAlignment.Left
                                        PlayerDisplay.TextYAlignment = Enum.TextYAlignment.Top

                                        FriendlyBorder.Name = "FriendlyBorder"
                                        FriendlyBorder.Parent = InteractionInner
                                        FriendlyBorder.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                                        FriendlyBorder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        FriendlyBorder.Position = UDim2.new(1, -104, 0, 4)
                                        FriendlyBorder.Size = UDim2.new(0, 100, 0, 18)

                                        MakeFriendly.Name = "MakeFriendly"
                                        MakeFriendly.Parent = FriendlyBorder
                                        MakeFriendly.BackgroundColor3 = Library.Theme.MedianContrast
                                        MakeFriendly.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        MakeFriendly.Position = UDim2.new(0, 2, 0, 2)
                                        MakeFriendly.Size = UDim2.new(1, -4, 1, -4)
                                        MakeFriendly.FontFace = Library.MenuFont;
                                        MakeFriendly.Text = "Make Friendly"
                                        MakeFriendly.TextColor3 = Color3.fromRGB(60, 255, 0)
                                        MakeFriendly.TextSize = Library.TextSize
                                        MakeFriendly.AutoButtonColor = false;

                                        NeutralBorder.Name = "Neutral Border"
                                        NeutralBorder.Parent = InteractionInner
                                        NeutralBorder.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                                        NeutralBorder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        NeutralBorder.Position = UDim2.new(1, -104, 0, 26)
                                        NeutralBorder.Size = UDim2.new(0, 100, 0, 18)

                                        MakeNeutral.Name = "MakeNeutral"
                                        MakeNeutral.Parent = NeutralBorder
                                        MakeNeutral.BackgroundColor3 = Library.Theme.MedianContrast
                                        MakeNeutral.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        MakeNeutral.Position = UDim2.new(0, 2, 0, 2)
                                        MakeNeutral.Size = UDim2.new(1, -4, 1, -4)
                                        MakeNeutral.FontFace = Library.MenuFont;
                                        MakeNeutral.AutoButtonColor = false;
                                        MakeNeutral.Text = "Make Neutral"
                                        MakeNeutral.TextColor3 = Color3.fromRGB(255, 255, 255)
                                        MakeNeutral.TextSize = Library.TextSize
                                    end;
                                end;

                                do --// Connections
                                    MakeFriendly.MouseButton1Down:Connect(function()
                                        if Tab.SelectedPlayer then
                                            Visuals.Enemies[Tab.SelectedPlayer.Player].Info.IsFriendly = true;
                                            Tab.SelectedPlayer.CurrentStatus = "Friendly";
                                            Tab.SelectedPlayer.PlayerRelation.Text = "Friendly";
                                            Library:Tween(Tab.SelectedPlayer.PlayerRelation, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(0, 255, 0)});
                                        end;
                                        Library:Tween(MakeFriendly, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(0, 255, 0)});
                                        task.wait(0.1)
                                        Library:Tween(MakeFriendly, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                    end);

                                    MakeFriendly.MouseEnter:Connect(function()
                                        Library:Tween(MakeFriendly, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Color3.fromRGB(0, 255, 0)});
                                    end);

                                    MakeFriendly.MouseLeave:Connect(function()
                                        Library:Tween(MakeFriendly, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Border});
                                    end);

                                    MakeNeutral.MouseButton1Down:Connect(function()
                                        if Tab.SelectedPlayer then
                                            Visuals.Enemies[Tab.SelectedPlayer.Player].Info.IsFriendly = false;
                                            Tab.SelectedPlayer.CurrentStatus = "Neutral";
                                            Tab.SelectedPlayer.PlayerRelation.Text = "Neutral";
                                            Library:Tween(Tab.SelectedPlayer.PlayerRelation, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Color3.fromRGB(255, 255, 255)});
                                        end;
                                        Library:Tween(MakeNeutral, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                        task.wait(0.1)
                                        Library:Tween(MakeNeutral, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                    end);

                                    MakeNeutral.MouseEnter:Connect(function()
                                        Library:Tween(MakeNeutral, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Accent});
                                    end);

                                    MakeNeutral.MouseLeave:Connect(function()
                                        Library:Tween(MakeNeutral, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Border});
                                    end);
                                end;
                                
                                do --// Functions
                                    function Tab.Playerlist:SetCurrent(Name)
                                        local PlayerData = Tab.Playerlist[Name];
                                        if not PlayerData then 
                                            Library:Notify("ERROR: PLAYER_DATA <"..Name.."> NOT FOUND! FUNCTION <tab.Playerlist:SetCurrent>", 5, Color3.fromRGB(255, 0, 0));
                                            return;
                                        end;

                                        Tab.SelectedPlayer = PlayerData;
                                        
                                        local Username     = Name;
                                        local ActualPlayer = PlayerData.Player;
                                        local DisplayName  = PlayerData.DisplayName;
                                        local UserId       = PlayerData.UserId;

                                        PlayerId.Text = "ID:" .. tostring(UserId);
                                        PlayerName_2.Text = "Name: "..Username;
                                        PlayerDisplay.Text = "Display: "..DisplayName;
                                        
                                        local ThumbnailType = Enum.ThumbnailType.HeadShot
                                        local ThumbnailSize = Enum.ThumbnailSize.Size420x420
                                        local Content, IsReady = Players:GetUserThumbnailAsync(UserId, ThumbnailType, ThumbnailSize)

                                        if Content and IsReady and GameName ~= "Fallen" then 
                                            Headshot.Image = Content;
                                        end;
                                    end;

                                    function Tab.Playerlist:Add(Data)
                                        local PlayerData = {
                                            Name = Data.Name;
                                            DisplayName = Data.DisplayName;
                                            Player = Data.Player;
                                            UserId = Data.UserId;
                                            CurrentStatus = "Neutral";
                                        };

                                        do --// Elements
                                            local NewPlayer = Instance.new("Frame")
                                            local InnerPlayer = Instance.new("TextButton")
                                            local PlayerName = Instance.new("TextLabel")
                                            local PlayerRelation = Instance.new("TextLabel")
                                            
                                            PlayerData.MainFrame = NewPlayer;
                                            PlayerData.InnerFrame = InnerPlayer;
                                            PlayerData.PlayerName = PlayerName;
                                            PlayerData.PlayerRelation = PlayerRelation;
                                            
                                            do --// Properties
                                                NewPlayer.Name = "NewPlayer"
                                                NewPlayer.Parent = PlayersList
                                                NewPlayer.BackgroundColor3 = Library.Theme.LightContrast
                                                NewPlayer.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                                NewPlayer.Size = UDim2.new(1, -4, 0, 24)

                                                InnerPlayer.Name = "InnerPlayer"
                                                InnerPlayer.Parent = NewPlayer
                                                InnerPlayer.BackgroundColor3 = Library.Theme.MedianContrast
                                                InnerPlayer.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                                InnerPlayer.Position = UDim2.new(0, 2, 0, 2)
                                                InnerPlayer.Size = UDim2.new(1, -4, 1, -4)
                                                InnerPlayer.AutoButtonColor = false;
                                                InnerPlayer.Text = "";

                                                PlayerName.Name = "PlayerName"
                                                PlayerName.Parent = InnerPlayer
                                                PlayerName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                                PlayerName.BackgroundTransparency = 1.000
                                                PlayerName.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                                PlayerName.BorderSizePixel = 0
                                                PlayerName.Position = UDim2.new(0, 4, 0, 2)
                                                PlayerName.Size = UDim2.new(0, 50, 1, -4)
                                                PlayerName.FontFace = Library.MenuFont;
                                                PlayerName.Text = Data.Name;
                                                PlayerName.TextColor3 = Color3.fromRGB(255, 255, 255)
                                                PlayerName.TextSize = Library.TextSize
                                                PlayerName.TextXAlignment = Enum.TextXAlignment.Left

                                                PlayerRelation.Name = "PlayerRelation"
                                                PlayerRelation.Parent = InnerPlayer
                                                PlayerRelation.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                                PlayerRelation.BackgroundTransparency = 1.000
                                                PlayerRelation.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                                PlayerRelation.BorderSizePixel = 0
                                                PlayerRelation.Position = UDim2.new(1, -52, 0, 2)
                                                PlayerRelation.Size = UDim2.new(0, 50, 1, -4)
                                                PlayerRelation.FontFace = Library.MenuFont;
                                                PlayerRelation.Text = "Neutral"
                                                PlayerRelation.TextColor3 = Color3.fromRGB(255, 255, 255)
                                                PlayerRelation.TextSize = Library.TextSize
                                                PlayerRelation.TextXAlignment = Enum.TextXAlignment.Right;
                                            end;

                                        end;

                                        do --// Functions/Connections
                                            PlayerData.InnerFrame.MouseButton1Down:Connect(function()
                                                Tab.Playerlist:SetCurrent(PlayerData.Name);

                                                Library:Tween(PlayerData.InnerFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                                task.wait(0.1)
                                                Library:Tween(PlayerData.InnerFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                            end);

                                            PlayerData.InnerFrame.MouseEnter:Connect(function()
                                                Library:Tween(PlayerData.InnerFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Accent});
                                            end);

                                            PlayerData.InnerFrame.MouseLeave:Connect(function()
                                                Library:Tween(PlayerData.InnerFrame, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Border});
                                            end);
                                        end;
                                        Tab.Playerlist[Data.Name] = PlayerData;
                                    end;

                                    --[[Tab.Playerlist:Add({
                                        Name = "DranghetaLurk";
                                        DisplayName = "lurk";
                                        Player = Client;
                                        UserId = Client.UserId;
                                    });]]

                                    Players.PlayerAdded:Connect(function(Player)
                                        if Player:IsA("Player") then 
                                            Tab.Playerlist:Add({
                                                Name = Player.Name,
                                                DisplayName = Player.DisplayName,
                                                UserId = Player.UserId,
                                                Player = Player
                                            });

                                            Tab.PlayerTitle.Text = "Player List (Displaying "..tostring(#Players:GetPlayers() - 1)..")"
                                        end;
                                    end);
                                    
                                    Players.PlayerRemoving:Connect(function(Player)
                                        Tab.Playerlist[Player.Name].MainFrame:Destroy();
                                        Tab.Playerlist[Player.Name] = nil;
                                        Tab.PlayerTitle.Text = "Player List (Displaying "..tostring(#Players:GetPlayers() - 1)..")"
                                    end);

                                    for Index, Player in next, Players:GetChildren() do 
                                        if Player ~= Client and Player:IsA("Player") then 
                                            Tab.Playerlist:Add({
                                                Name = Player.Name,
                                                DisplayName = Player.DisplayName,
                                                UserId = Player.UserId,
                                                Player = Player
                                            });
                                        end;
                                        Tab.PlayerTitle.Text = "Player List (Displaying "..tostring(#Players:GetPlayers() - 1)..")"
                                    end;
                                end;
                            end;
                        end;

                        function Tab:Update()
                            Tab.TabAmount = Tab.TabAmount + 1;

                            for Index, Value in next, Tab.NestedTabs do
                                Value.Button.Size = UDim2.new(0, NestedTabs.AbsoluteSize.X / Tab.TabAmount, 0, Value.Button.Size.Y.Offset);
                            end;
                        end;

                        function Tab:Add(Data)
                            local NewTab = {
                                Name = Data.Name;
                                Page = nil;
                                SectionZIndex = 1000;
                                Sections = {};
                                Parent = Tab;
                                IsOpen = false;
                                Left = nil;
                                Right = nil;
                                CurrentTab = nil;
                            };

                            do --// Elements
                                local NewPage = Instance.new("ImageLabel");

                                local TabButton = Instance.new("TextButton");
                               -- local TabUnderline = Instance.new("Frame");
                                local TabGradient = Instance.new("UIGradient");
    
                                Left = Instance.new("Frame");
                                local LeftPadding = Instance.new("UIPadding");
                                local LeftListLayout = Instance.new("UIListLayout");
    
                                NewTab.Left = Left;
    
                                Right = Instance.new("Frame");
                                local RightListLayout = Instance.new("UIListLayout");
                                local RightPadding = Instance.new("UIPadding");
    
                                NewTab.Right = Right;
                                
                                NewTab.Page = NewPage;

                                do --// Tab element properties
                                    NewPage.Name = "NestedPage"..Data.Name;
                                    NewPage.Parent = PageAreaInner
                                    NewPage.BackgroundColor3 = Library.Theme.ElementOn
                                    NewPage.BackgroundTransparency = 1.000;
                                    NewPage.ImageTransparency = 1;
                                    NewPage.BorderColor3 = Library.Theme.Border
                                    NewPage.BorderSizePixel = 0
                                    NewPage.Position = UDim2.new(0, 0, 0, 0)
                                    NewPage.Size = UDim2.new(1, 0, 1, -20);
            
                                    NewPage.Visible = false;
    
                                    Left.Name = "Left"
                                    Left.Parent = NewPage;
                                    Left.BackgroundColor3 = Library.Theme.ElementOn
                                    Left.BackgroundTransparency = 1.000
                                    Left.BorderColor3 = Library.Theme.Border
                                    Left.BorderSizePixel = 0
                                    Left.Size = UDim2.new(0.5, -3, 1, 0)
                                    Left.Position = UDim2.new(0, 0, 0, 24);
    
                                    LeftPadding.Name = "LeftPadding"
                                    LeftPadding.Parent = NewTab.Left
                                    LeftPadding.PaddingTop = UDim.new(0, 9)
    
                                    LeftListLayout.Name = "LeftListLayout"
                                    LeftListLayout.Parent = NewTab.Left
                                    LeftListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                    LeftListLayout.Padding = UDim.new(0, 8);
    
                                    Right.Name = "Right"
                                    Right.Parent = NewPage
                                    Right.BackgroundColor3 = Library.Theme.ElementOn
                                    Right.BackgroundTransparency = 1.000
                                    Right.BorderColor3 = Library.Theme.Border
                                    Right.BorderSizePixel = 0
                                    Right.Position = UDim2.new(0.5, 3, 0, 24)
                                    Right.Size = UDim2.new(0.5, -3, 1, 0)
    
                                    RightListLayout.Name = "RightListLayout"
                                    RightListLayout.Parent = NewTab.Right
                                    RightListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                    RightListLayout.Padding = UDim.new(0, 8);
    
                                    RightPadding.Name = "RightPadding"
                                    RightPadding.Parent = NewTab.Right
                                    RightPadding.PaddingTop = UDim.new(0, 9)
    
                                    TabButton.Name = "TabButton"
                                    TabButton.Parent = NestedTabs
                                    TabButton.BackgroundColor3 = Library.Theme.ElementOn
                                    TabButton.BackgroundTransparency = 1.000
                                    TabButton.BorderColor3 = Library.Theme.Border
                                    TabButton.BorderSizePixel = 0
                                    TabButton.Size = UDim2.new(0, NestedTabs.AbsoluteSize.X / Tab.TabAmount, 0, 24)
                                    TabButton.FontFace = Library.MenuFont
                                    TabButton.Text = NewTab.Name;
                                    NewTab.Button = TabButton;
    
                                    TabButton.TextColor3 = Library.Theme.ElementOff
                                    TabButton.TextSize = Library.TextSize
    
                                    --[[TabUnderline.Name = "TabUnderline"
                                    TabUnderline.Parent = TabButton
                                    TabUnderline.BackgroundColor3 = Library.Theme.ElementOn
                                    TabUnderline.BorderColor3 = Library.Theme.Border
                                    TabUnderline.BorderSizePixel = 0
                                    TabUnderline.Position = UDim2.new(0, 0, 1, -5)
                                    TabUnderline.Size = UDim2.new(1, 0, 0, 1)
                                    TabUnderline.BackgroundTransparency = 1;
                                    TabUnderline.Visible = false;]]
    
                                    --NewTab.Underline = TabUnderline;
                                   -- TabGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Library.Theme.DarkContrast), ColorSequenceKeypoint.new(0.50, Library.Theme.Accent), ColorSequenceKeypoint.new(1.00, Library.Theme.DarkContrast)}
                                    --TabGradient.Name = "TabGradient"
                                    --TabGradient.Parent = TabUnderline
    
                                    TabButton.MouseButton1Down:Connect(function()
                                        Tab:SetTab(NewTab.Name);
                                    end);
                                    TabButton.MouseEnter:Connect(function()
                                        if Tab.CurrentTab == NewTab.Name then 
                                            Library:Tween(TabButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.Accent});
                                        else 
                                            Library:Tween(TabButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                        end;
                                    end);
                                    TabButton.MouseLeave:Connect(function()
                                        if NewTab.IsOpen == false or not NewTab.IsOpen then 
                                            Library:Tween(TabButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                        end;
                                    end);
                                end;
                            end;

                            Tab.NestedTabs[Data.Name] = NewTab;
                            Tab:Update()
                            return setmetatable(NewTab, Tab);
                        end;

                        function Tab:SetTab(Name, ShouldTransition)
                            Tab.CurrentTab = Name;
                            if not ShouldTransition then 
                                Window:TransitionTab(true, false);
                            end;
                            for Index, Value in next, Tab.NestedTabs do 
                                local TabName = Value.Name;
                                local TabButton = Value.Button;
                                --local Underline = Value.Underline;
                                if Name ~= TabName then
                                    Library:Tween(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                    --Library:Tween(Underline, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                                    Value.Page.Visible = false;
                                    Value.IsOpen = false;
                                else
                                    Library:Tween(TabButton, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.Accent});
                                    Value.Page.Visible = true;
                                    Value.IsOpen = true;
                                    Tab.LastOpenedTab = Name;
                                end;    
                            end;
                        end;

                        function Tab:NewSection(Data)
                            local Section = {
                                Name = Data.Name;
                                Side = Data.Side;
                                DropdownZIndex = 10000;
                                Bounds = 14;
                            };  

                            local SectionTitle = Instance.new("TextLabel");
                            local SectionBorder = Instance.new("Frame");
                            local SectionInner = Instance.new("Frame");
                            local SectionAccent = Instance.new("Frame");
                            local SectionGradient = Instance.new("UIGradient");

                            do --// Section Element Properties
                                SectionBorder.Name = "SectionBorder"
                                SectionBorder.BackgroundColor3 = Library.Theme.LightContrast
                                SectionBorder.BorderColor3 = Library.Theme.Border
                                SectionBorder.Size = UDim2.new(1, 0, 0, 34)
                                SectionBorder.ZIndex = self.SectionZIndex;


                                self.SectionZIndex = self.SectionZIndex - 1;
                                if Section.Side == "Left" then 
                                    SectionBorder.Parent = self.Left; 
                                elseif Section.Side == "Right" then 
                                    SectionBorder.Parent = self.Right;
                                else 
                                    SectionBorder.Parent = self.Left;
                                end;

                                SectionInner.Name = "SectionInner"
                                SectionInner.Parent = SectionBorder
                                SectionInner.BackgroundColor3 = Library.Theme.DarkContrast
                                SectionInner.BorderColor3 = Library.Theme.Border
                                SectionInner.Position = UDim2.new(0, 2, 0, 2)
                                SectionInner.Size = UDim2.new(1, -4, 1, -4)

                                SectionAccent.Name = "SectionAccent"
                                SectionAccent.Parent = SectionInner
                                SectionAccent.BackgroundColor3 = Library.Theme.ElementOn
                                SectionAccent.BorderColor3 = Library.Theme.Border
                                SectionAccent.BorderSizePixel = 0
                                SectionAccent.Size = UDim2.new(1, 0, 0, 1)

                                SectionGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Library.Theme.GradiantContrast), ColorSequenceKeypoint.new(0.50, Library.Theme.Accent), ColorSequenceKeypoint.new(1.00, Library.Theme.GradiantContrast)}
                                SectionGradient.Name = "SectionGradient"
                                SectionGradient.Parent = SectionAccent;

                                SectionTitle.Name = "SectionTitle"
                                SectionTitle.Parent = SectionBorder
                                SectionTitle.BackgroundColor3 = Library.Theme.DarkContrast
                                SectionTitle.BorderColor3 = Library.Theme.Border
                                SectionTitle.BorderSizePixel = 0
                                SectionTitle.Position = UDim2.new(0, 10, 0, -3)
                                SectionTitle.Size = UDim2.new(0, 68, 0, 12)
                                SectionTitle.FontFace = Library.MenuFont
                                SectionTitle.Text = Section.Name
                                SectionTitle.TextColor3 = Library.Theme.ElementOn
                                SectionTitle.TextSize = Library.TextSize
                                SectionTitle.TextYAlignment = Enum.TextYAlignment.Top;

                                SectionTitle:GetPropertyChangedSignal("TextBounds"):Connect(function()
                                    SectionTitle.Size = UDim2.new(0, 5 + SectionTitle.TextBounds.X, 0, 14)
                                end);
                            end;

                            do --// Section Functions

                                --// Button
                                function Section:Button(Data)
                                    local Button = {
                                        Callback = Data.Callback,
                                        ParentSection = Section,
                                        Name = Data.Name,
                                        Frame = nil;
                                    };

                                    local NewButton = Instance.new("Frame")
                                    local ActualButton = Instance.new("TextButton")

                                    Button.Frame = NewButton;
                                    do --// Button element properties
                                        NewButton.Name = "NewButton"
                                        NewButton.Parent = SectionInner
                                        NewButton.BackgroundColor3 = Library.Theme.LightContrast
                                        NewButton.BorderColor3 = Library.Theme.Border
                                        NewButton.Position = UDim2.new(0, 2, 0, Section.Bounds)
                                        NewButton.Size = UDim2.new(1, -4, 0, 18)

                                        ActualButton.Name = "ActualButton"
                                        ActualButton.Parent = NewButton
                                        ActualButton.BackgroundColor3 = Library.Theme.MedianContrast
                                        ActualButton.BorderColor3 = Library.Theme.Border
                                        ActualButton.Position = UDim2.new(0, 2, 0, 2)
                                        ActualButton.Size = UDim2.new(1, -4, 1, -4)
                                        ActualButton.AutoButtonColor = false
                                        ActualButton.FontFace = Library.MenuFont
                                        ActualButton.TextColor3 = Library.Theme.ElementOn
                                        ActualButton.TextSize = Library.TextSize
                                        ActualButton.Text = Button.Name
                                        ActualButton.TextYAlignment = Enum.TextYAlignment.Center
                                    end;

                                    --// Button functions 
                                    do 
                                        ActualButton.MouseButton1Down:Connect(function()
                                            if Button.Callback then pcall(Button.Callback) end;
                                            Library:Tween(ActualButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                            task.wait(0.1)
                                            Library:Tween(ActualButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                        end);
                                        
                                        ActualButton.MouseEnter:Connect(function()
                                            Library:Tween(NewButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                        end);

                                        ActualButton.MouseLeave:Connect(function()
                                            Library:Tween(NewButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                        end);
                                    end;
                                    Section.Bounds = Section.Bounds + 23
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);
                                end;

                                --// Textbox
                                function Section:Textbox(Data)
                                    local TextBox = {
                                        Value = "";
                                        Frame = nil;
                                    };
            
                                    TextBox.Value = Data.Default or "";
                                    TextBox.Name = Data.Name;
            
                                    local NewTextbox = Instance.new("Frame")
                                    local TextboxInp = Instance.new("TextBox")

                                    TextBox.Frame = NewTextbox;

                                    do --// Properties
                                        Library.Flags[Data.Flag] = TextBox.Value;
                
                                        NewTextbox.Name = "NewTextbox"
                                        NewTextbox.Parent = SectionInner
                                        NewTextbox.BackgroundColor3 = Library.Theme.LightContrast
                                        NewTextbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        NewTextbox.BorderSizePixel = 1
                                        NewTextbox.Position = UDim2.new(0, 1, 0, Section.Bounds)
                                        NewTextbox.Size = UDim2.new(1, -4, 0, 18);
                
                                        TextboxInp.Name = "TextboxInp"
                                        TextboxInp.Parent = NewTextbox
                                        TextboxInp.BackgroundColor3 = Library.Theme.MedianContrast
                                        TextboxInp.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        TextboxInp.BorderSizePixel = 1
                                        TextboxInp.Position = UDim2.new(0, 2, 0, 2)
                                        TextboxInp.Size = UDim2.new(1, -4, 1, -4)
                                        TextboxInp.FontFace = Library.MenuFont
                                        TextboxInp.PlaceholderColor3 = Library.Theme.ElementOff
                                        TextboxInp.Text = Data.Name;
                                        TextboxInp.TextColor3 = Library.Theme.ElementOff
                                        TextboxInp.TextSize = Library.TextSize

                                        TextboxInp.ClipsDescendants = true
                                    end;

                                    do --// Functions
                                        function TextBox:Set(Value)
                                            TextBox.Value = Value;
                                        end;

                                        TextboxInp.MouseEnter:Connect(function()
                                            Library:Tween(NewTextbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                            Library:Tween(TextboxInp, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                        end);
                
                                        TextboxInp.MouseLeave:Connect(function()
                                            Library:Tween(NewTextbox, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                            Library:Tween(TextboxInp, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                        end);
                
                                        TextboxInp.Focused:Connect(function()
                                            Library:Tween(TextboxInp, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                            task.wait(0.1);
                                            Library:Tween(TextboxInp, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                        end);
                
                                        TextboxInp.FocusLost:Connect(function(IsEnter, Inpt)
                                            Library:Tween(TextboxInp, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                            task.wait(0.1);
                                            Library:Tween(TextboxInp, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});

                                            TextBox:Set(TextboxInp.Text)
                                        end);

                                        TextboxInp:GetPropertyChangedSignal("Text"):Connect(function()
                                            TextBox:Set(TextboxInp.Text);
                                        end);
                                    end;

                                    Section.Bounds = Section.Bounds + 20;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);
                                    Library.Flags[Data.Flag] = TextBox;
                                    return TextBox;
                                end;

                                --// Toggle
                                function Section:Toggle(Data)
                                    local Toggle = {
                                        Flag = Data.Flag;
                                        Name = Data.Name;
                                        Value = false;
                                        Callback = Data.Callback or function() end;
                                        Risky = Data.Risky;
                                        Default = Data.Default;
                                        Frame = nil;
                                    };

                                    local NewToggle = Instance.new("TextButton")
                                    local ButtonOutline = Instance.new("Frame")
                                    local ButtonInner = Instance.new("Frame")
                                    local ToggleGradient = Instance.new("UIGradient")
                                    local ToggleTitle = Instance.new("TextLabel");
                                    local Items = Instance.new("Frame");

                                    Toggle.Frame = NewToggle;

                                    do --// Toggle properties                                  
                                        NewToggle.Name = "NewToggle"
                                        NewToggle.Parent = SectionInner
                                        NewToggle.BackgroundColor3 = Library.Theme.ElementOn
                                        NewToggle.BackgroundTransparency = 1.000
                                        NewToggle.BorderColor3 = Library.Theme.Border
                                        NewToggle.BorderSizePixel = 0
                                        NewToggle.Position = UDim2.new(0, 2, 0, Section.Bounds)
                                        NewToggle.Size = UDim2.new(1, -4, 0, 18)
                                        NewToggle.FontFace = Library.MenuFont
                                        NewToggle.Text = ""
                                        NewToggle.TextColor3 = Library.Theme.Border
                                        NewToggle.TextSize = Library.TextSize
                                        NewToggle.ZIndex = Window.ImportantIndex;

                                        Window.ImportantIndex = Window.ImportantIndex-1

                                        ButtonOutline.Name = "ButtonOutline"
                                        ButtonOutline.Parent = NewToggle
                                        ButtonOutline.BackgroundColor3 = Library.Theme.LightContrast
                                        ButtonOutline.BorderColor3 = Library.Theme.Border
                                        ButtonOutline.Size = UDim2.new(0, 18, 0, 18)

                                        ButtonInner.Name = "ButtonInner"
                                        ButtonInner.Parent = ButtonOutline
                                        ButtonInner.BackgroundColor3 = Library.Theme.MedianContrast;
                                        ButtonInner.BorderColor3 = Library.Theme.Border
                                        ButtonInner.Position = UDim2.new(0, 2, 0, 2)
                                        ButtonInner.Size = UDim2.new(1, -4, 1, -4)

                                        ToggleGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Library.Theme.Accent), ColorSequenceKeypoint.new(1.00, Library.Theme.GradiantContrast2)}
                                        ToggleGradient.Rotation = 90
                                        ToggleGradient.Name = "ToggleGradient"
                                        ToggleGradient.Parent = ButtonInner
                                        ToggleGradient.Enabled = false;

                                        ToggleTitle.Name = "ToggleTitle"
                                        ToggleTitle.Parent = NewToggle
                                        ToggleTitle.BackgroundColor3 = Library.Theme.ElementOn
                                        ToggleTitle.BackgroundTransparency = 1.000
                                        ToggleTitle.BorderColor3 = Library.Theme.Border
                                        ToggleTitle.BorderSizePixel = 0
                                        ToggleTitle.Position = UDim2.new(0, 23, 0, 2)
                                        ToggleTitle.Size = UDim2.new(0, 176, 0, 16)
                                        ToggleTitle.FontFace = Library.MenuFont
                                        ToggleTitle.Text = Toggle.Name;

                                        if not Toggle.Risky then 
                                            ToggleTitle.TextColor3 = Library.Theme.ElementOff
                                        else 
                                            ToggleTitle.TextColor3 = Library.Theme.RiskyOff;
                                        end;
                                        ToggleTitle.TextSize = Library.TextSize
                                        ToggleTitle.TextXAlignment = Enum.TextXAlignment.Left

                                        --// Toggle items (keybinds, colorpickers, etc)
                                        do
                                            Items.Parent = NewToggle;
                                            Items.Size = UDim2.new(0, 40, 0, 14);
                                            Items.Position = UDim2.new(1, -42, 0, 0);
                                            Items.BackgroundTransparency = 1;


                                            local ItemsLayout = Instance.new("UIListLayout", Items);
                                            ItemsLayout.FillDirection = Enum.FillDirection.Horizontal;
                                            ItemsLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right;
                                            ItemsLayout.Padding = UDim.new(0, 3)
                                            local ItemsPadding = Instance.new("UIPadding", Items);
                                            ItemsPadding.PaddingRight = UDim.new(0, -1);
                                        end;
                                    end;

                                    do --// Toggle functions 

                                        function Toggle:Set(Value)

                                            Toggle.Value = Value; 

                                            if Toggle.Value then
                                                ToggleGradient.Enabled = true;
                                                Library:Tween(ButtonInner, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(255, 255, 255)});
                                                if not Toggle.Risky then 
                                                    Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                                else 
                                                    Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.RiskyOn});
                                                end;
                                            else
                                                task.spawn(function()
                                                    local NewTween = Library:Tween(ButtonInner, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                                    NewTween.Completed:Wait();
                                                    ToggleGradient.Enabled = false;
                                                end);
                                                if not Toggle.Risky then 
                                                    Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                else 
                                                    Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.RiskyOff});
                                                end;
                                            end;
                                            if Toggle.Callback then pcall(Toggle.Callback) end;
                                        end;

                                        NewToggle.MouseButton1Down:Connect(function()
                                            Toggle:Set(not Toggle.Value);
                                        end);
                                        
                                        NewToggle.MouseEnter:Connect(function()
                                            if not Toggle.Risky then 
                                                Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                            else 
                                                Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.RiskyOn});
                                            end;

                                            Library:Tween(ButtonOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                        end);

                                        NewToggle.MouseLeave:Connect(function()
                                            Library:Tween(ButtonOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                            if not Toggle.Value then 
                                                if not Toggle.Risky then 
                                                    Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                else 
                                                    Library:Tween(ToggleTitle, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.RiskyOff});
                                                end;
                                            end
                                        end);

                                        function Toggle:Colorpicker(Data)
                                            local ColorPickerTab = {Color = Color3.fromRGB(255,255,255), Transparency = 0.1};
                
                                            local Name = Data.Name;
                                            local Flag = Data.Flag;
                                            local DefaultTransparency = Data.DefaultTrans or 0.5
                                            if Data.Default == nil then Data.Default = Color3.fromRGB(255,0,0) end;
                
                                            --Library.Flags[Data.Flag] = {Set = nil, Color = Data.Default, Transparency = DefaultTransparency};
                
                                            ColorPickerTab.IsOpen = false;
                
                                            local PickerOutline = Instance.new("Frame")
                                            local PickerButton = Instance.new("TextButton")

                                            PickerOutline.Name = "PickerOutline"
                                            PickerOutline.Parent = Items
                                            PickerOutline.BackgroundColor3 = Library.Theme.LightContrast
                                            PickerOutline.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            PickerOutline.BorderSizePixel = 1
                                            PickerOutline.Size = UDim2.new(0, 20, 0, 15)
            
                                            PickerButton.Name = "PickerButton"
                                            PickerButton.Parent = PickerOutline
                                            PickerButton.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
                                            PickerButton.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            PickerButton.BorderSizePixel = 1
                                            PickerButton.Position = UDim2.new(0, 2, 0, 2)
                                            PickerButton.Size = UDim2.new(1, -4, 1, -4)
                                            PickerButton.FontFace  = Library.MenuFont
                                            PickerButton.Text = ""
                                            PickerButton.TextColor3 = Color3.fromRGB(0, 0, 0)
                                            PickerButton.TextSize = Library.TextSize
                                            PickerButton.AutoButtonColor = false;
                
                                            local IsInColor2 = false;
                                            local IsInColor1 = false;
                                            local IsInTransparency = false;
                                            local ColorFrame, InnerColor, HueOutline, HuePicker, UIGradient, HuePick, PickerOutline_3, HuePick, ColorPicker, ColorPick, TOutline, TransparencyPicker, TransparencyColor, TransparencyPick, TitleFrame, ColorpickerTitle_2, PasteButton, CopyButton, SetBox = Window:CreateColorpicker(PickerOutline, Data.Name)
                                            local Colors = {}; do 
                                                Colors.h = (math.clamp(HuePick.AbsolutePosition.Y-HuePicker.AbsolutePosition.Y, 0, HuePicker.AbsoluteSize.Y)/HuePicker.AbsoluteSize.Y)
                                                Colors.s = 1-(math.clamp(ColorPick.AbsolutePosition.X-ColorPick.AbsolutePosition.X, 0, ColorPick.AbsoluteSize.X)/ColorPick.AbsoluteSize.X)
                                                Colors.v = 1-(math.clamp(ColorPick.AbsolutePosition.Y-ColorPick.AbsolutePosition.Y, 0, ColorPick.AbsoluteSize.Y)/ColorPick.AbsoluteSize.Y)
                                            end;

                                            do --// functions
                                                do --// Buttons 
                                                    CopyButton.MouseButton1Down:Connect(function()
                                                        Library.CopiedColor = {Color = ColorPickerTab.Color};
 
                                                        Library:Tween(CopyButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                                        task.wait(0.1)
                                                        Library:Tween(CopyButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                                    end);
                
                                                    CopyButton.MouseEnter:Connect(function()
                                                        Library:Tween(CopyButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Accent});
                                                    end);
                
                                                    CopyButton.MouseLeave:Connect(function()
                                                        Library:Tween(CopyButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Border});
                                                    end);

                                                    PasteButton.MouseButton1Down:Connect(function()
                                                        if Library.CopiedColor then 
                                                            ColorPickerTab:Set({Color = Library.CopiedColor.Color, Transparency = ColorPickerTab.Transparency}, true);
                                                        end;
                                                        Library:Tween(PasteButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                                        task.wait(0.1)
                                                        Library:Tween(PasteButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                                    end);
                
                                                    PasteButton.MouseEnter:Connect(function()
                                                        Library:Tween(PasteButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Accent});
                                                    end);
                
                                                    PasteButton.MouseLeave:Connect(function()
                                                        Library:Tween(PasteButton, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Border});
                                                    end);

                                                    SetBox.MouseEnter:Connect(function()
                                                        Library:Tween(SetBox, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Accent});
                                                    end);
                                                    
                                                    SetBox.MouseLeave:Connect(function()
                                                        Library:Tween(SetBox, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BorderColor3 = Library.Theme.Border});
                                                    end);

                                                    SetBox.FocusLost:Connect(function()
                                                        local Text = SetBox.Text;
                                                        local Split = Text:split(", ");
                                                        ColorPickerTab:Set({Color = Color3.fromRGB(Split[1], Split[2], Split[3]), Transparency = ColorPickerTab.Transparency});

                                                        Library:Tween(SetBox, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Color3.fromRGB(Split[1], Split[2], Split[3])});
                                                        task.wait(0.1);
                                                        Library:Tween(SetBox, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                                    end);
                                                end;

                                                function ColorPickerTab:ToHex(RGB)
                                                    local Hexadecimal = "#"
                    
                                                    for Key, Value in pairs(RGB) do
                                                        local Hex = ""
                    
                                                        while(Value > 0)do
                                                            local index = math.fmod(Value, 16) + 1
                                                            Value = math.floor(Value / 16)
                                                            Hex = string.sub("0123456789ABCDEF", index, index) .. Hex			
                                                        end
                    
                                                        if(string.len(Hex) == 0)then
                                                            Hex = "00"
                    
                                                        elseif(string.len(Hex) == 1)then
                                                            Hex = "0" .. Hex
                                                        end
                    
                                                        Hexadecimal = Hexadecimal .. Hex
                                                    end
                    
                                                    return Hexadecimal
                                                end;

                                                function ColorPickerTab:UpdateColor()
                                                    local ColorX = (math.clamp(Mouse.X - ColorPicker.AbsolutePosition.X, 0, ColorPicker.AbsoluteSize.X)/ColorPicker.AbsoluteSize.X)
                                                    local ColorY = (math.clamp(Mouse.Y - ColorPicker.AbsolutePosition.Y, 0, ColorPicker.AbsoluteSize.Y)/ColorPicker.AbsoluteSize.Y)
                                                    ColorPick.Position = UDim2.new(ColorX, 0, ColorY, 0)
                                
                                                    Colors.s = 1 - ColorX
                                                    Colors.v = 1 - ColorY
                                
                                                    PickerButton.BackgroundColor3 = Color3.fromHSV(Colors.h, Colors.s, Colors.v)
                                                    ColorPickerTab.Color = Color3.fromHSV(Colors.h, Colors.s, Colors.v);

                                                    local R = math.floor((ColorPickerTab.Color.R * 255) * 255);
                                                    local G = math.floor((ColorPickerTab.Color.G * 255) * 255);
                                                    local B = math.floor((ColorPickerTab.Color.B * 255) * 255);
                                                    

                                                    local ToRGB = Color3.fromRGB(math.ceil(R), math.ceil(G), math.ceil(B));
                                                    SetBox.Text = tostring(ToRGB);

                                                    if Data.Callback then pcall(Data.Callback) end
                                                end;

                                                function ColorPickerTab:Set(new_Value, cb)
                                                    local NColor, NTransparency = new_Value.Color, new_Value.Transparency;
                                
                                                    ColorPickerTab.Color = NColor; ColorPickerTab.Transparency = NTransparency;
                    
                                                    local duplicate = Color3.new(new_Value.Color.R, new_Value.Color.G, new_Value.Color.B);
                                                    Colors.h, Colors.s, Colors.v = duplicate:ToHSV()
                                                    Colors.h = math.clamp(Colors.h, 0, 1)
                                                    Colors.s = math.clamp(Colors.s, 0, 1)
                                                    Colors.v = math.clamp(Colors.v, 0, 1)

                                                    local R = math.floor((ColorPickerTab.Color.R * 255) * 255);
                                                    local G = math.floor((ColorPickerTab.Color.G * 255) * 255);
                                                    local B = math.floor((ColorPickerTab.Color.B * 255) * 255);
                                
                                                    local ToRGB = Color3.fromRGB(math.ceil(R), math.ceil(G), math.ceil(B));
                                                    SetBox.Text = tostring(ToRGB);

                                                    ColorPick.Position = UDim2.new(1 - Colors.s, 0, 1 - Colors.v, 0)
                                                    ColorPicker.ImageColor3 = Color3.fromHSV(Colors.h, 1, 1)
                                                    PickerButton.BackgroundColor3 = Color3.fromHSV(Colors.h, Colors.s, Colors.v)
                                                    HuePick.Position = UDim2.new(0, 0, 1 - Colors.h, -1)
                                                    if TransparencyColor then
                                                        TransparencyColor.ImageColor3 = Color3.fromHSV(Colors.h, 1, 1)
                                
                                                        TransparencyPick.Position = UDim2.new(ColorPickerTab.Transparency, -1, 0, 0)
                                                    end
                                                    
                                                    if Data.Callback then pcall(Data.Callback) end;
                    
                                                    if cb == nil or not cb then
                                
                                                    end
                                                end;

                                                function ColorPickerTab:UpdateHue()
                                                    local y = math.clamp(Mouse.Y - HuePicker.AbsolutePosition.Y, 0, 157)
                                                    HuePick.Position = UDim2.new(0, 0, 0, y)
                                                    local hue = y/157
                                                    Colors.h = 1-hue
                                                    ColorPicker.ImageColor3 = Color3.fromHSV(Colors.h, 1, 1)
                                                    PickerButton.BackgroundColor3 = Color3.fromHSV(Colors.h, Colors.s, Colors.v)
                                                    if TransparencyColor then
                                                        TransparencyColor.ImageColor3 = Color3.fromHSV(Colors.h, 1, 1)
                                                    end
                                                    ColorPickerTab.Color = Color3.fromHSV(Colors.h, Colors.s, Colors.v)
                                                    local R = math.floor((ColorPickerTab.Color.R * 255) * 255);
                                                    local G = math.floor((ColorPickerTab.Color.G * 255) * 255);
                                                    local B = math.floor((ColorPickerTab.Color.B * 255) * 255);
                                
                                                    local ToRGB = Color3.fromRGB(math.ceil(R), math.ceil(G), math.ceil(B));
                                                    SetBox.Text = tostring(ToRGB);
                                                end;

                                                PickerButton.MouseEnter:Connect(function()
                                                    Library:Tween(PickerOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                                end);
                    
                                                PickerButton.MouseLeave:Connect(function()
                                                    Library:Tween(PickerOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                                end);

                                                ColorFrame.MouseEnter:Connect(function()
                                                    IsInColor1 = true;
                                                end);
                    
                                                ColorFrame.MouseLeave:Connect(function()
                                                    IsInColor1 = false;
                                                end);
                    
                                                TransparencyPicker.MouseEnter:Connect(function()
                                                    IsInTransparency = true;
                                                end);
                    
                                                TransparencyPicker.MouseLeave:Connect(function()
                                                    IsInTransparency = false;
                                                end);
                    
                                                HuePicker.MouseEnter:Connect(function()
                                                    IsInColor2 = true;
                                                end);
                    
                                                HuePicker.MouseLeave:Connect(function()
                                                    IsInColor2 = false;
                                                end);

                                                ColorPickerTab.ColorFrame = ColorFrame

                                                PickerButton.MouseButton1Down:Connect(function()
                                                    ColorPickerTab.IsOpen = not ColorPickerTab.IsOpen;
                                                    ColorFrame.Visible = ColorPickerTab.IsOpen;
                                                    if ColorPickerTab.IsOpen then
                                                        if Library.CurrentColorpicker then 
                                                            Library.CurrentColorpicker.ColorFrame.Visible = false;
                                                            Library.CurrentColorpicker.IsOpen = false;
                                                        end;
                        
                                                        Library.CurrentColorpicker = ColorPickerTab;
                                                        Library.CurrentColorpicker.ColorFrame.Visible = true; 
                                                    else
                                                        Library.CurrentColorpicker.ColorFrame.Visible = false;
                                                        Library.CurrentColorpicker = nil;
                                                    end;
                        
                                                end);
                        
                                                UserInputService.InputBegan:Connect(function(Input)
                                                    if Input.UserInputType == Enum.UserInputType.MouseButton2 then 
                                                        if not IsInColor1 and not IsInColor2 and not IsInTransparency then 
                                                            ColorFrame.Visible = false;
                                                            ColorPickerTab.IsOpen = false;
                                                        end;
                                                    end;
                                                end);
                    
                                                function ColorPickerTab:UpdateTransparency()
                                                    local X = math.clamp(Mouse.X - TransparencyPicker.AbsolutePosition.X, 0, TransparencyPicker.AbsoluteSize.X)
                                                    TransparencyPick.Position = UDim2.new(0, X, 0, 0)
                                                    local NewTransparency = X/TransparencyPicker.AbsoluteSize.X;
                    
                                                    ColorPickerTab.Transparency = NewTransparency;
                                                    if Data.Callback then pcall(Data.Callback); end;
                                                end;
                    
                                                TransparencyPicker.MouseButton1Down:Connect(function()
                                                    ColorPickerTab:UpdateTransparency()
                                                    local MoveConn = Mouse.Move:Connect(function()
                                                        ColorPickerTab:UpdateTransparency()
                                                    end)
                                                    ReleaseConn = UserInputService.InputEnded:Connect(function(Input)
                                                        if Input.UserInputType == Enum.UserInputType.MouseButton1 then
                                                            ColorPickerTab:UpdateTransparency()
                                                            MoveConn:Disconnect()
                                                            ReleaseConn:Disconnect()
                                                        end
                                                    end)
                    
                                                end);
                    
                                                ColorPickerTab.Color = Color3.fromHSV(Colors.h, Colors.s, Colors.v)

                                                ColorPicker.MouseButton1Down:Connect(function()
                                                    ColorPickerTab:UpdateColor()
                                                    local MoveConnection = Mouse.Move:Connect(function()
                                                        ColorPickerTab:UpdateColor()
                                                    end)
                                                    ReleaseConnection = UserInputService.InputEnded:Connect(function(Mouse)
                                                        if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
                                                            ColorPickerTab:UpdateColor()
                                                            MoveConnection:Disconnect()
                                                            ReleaseConnection:Disconnect()
                                                        end
                                                    end)
                                                end);

                                                HuePicker.MouseButton1Down:Connect(function()
                                                    ColorPickerTab:UpdateHue()
                                                    local MoveConnection = Mouse.Move:Connect(function()
                                                        ColorPickerTab:UpdateHue()
                                                    end)
                                                    ReleaseConnection = UserInputService.InputEnded:Connect(function(Mouse)
                                                        if Mouse.UserInputType == Enum.UserInputType.MouseButton1 then
                                                            ColorPickerTab:UpdateHue()
                                                            MoveConnection:Disconnect()
                                                            ReleaseConnection:Disconnect()
                                                        end
                                                    end)
                                                end);
                                            end;

                                            ColorPickerTab:Set({Color = Data.Default or Color3.fromRGB(255, 255, 255), Transparency = DefaultTransparency}, true)
                
                                            Library.Flags[Flag] = ColorPickerTab

                                            if Data.Callback then pcall(Data.Callback) end;
                                            return ColorPicker
                                        end;

                                        function Toggle:Keybind(Data)
                                            local BindOutline_2 = Instance.new("Frame")
                
                                            local Keybind = {
                                                Name = Data.Name;
                                                Key = "";
                                                Flag = Data.Flag;
                                                Mode = Data.Mode or "Toggle",
                                                Value = false;
                                                Callback = Data.Callback or function() end;
                                                IsBeingSelected = false;
                                                Components = BindOutline_2;
                                                Default = Data.Default;
                                                AbKey = "";
                                            };
                
                                            local KeybindPicker_2 = Instance.new("TextButton")
                
                                            BindOutline_2.Name = "BindOutline"
                                            BindOutline_2.Parent = Items
                                            BindOutline_2.BackgroundColor3 = Library.Theme.LightContrast
                                            BindOutline_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            BindOutline_2.BorderSizePixel = 1
                                            BindOutline_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            BindOutline_2.Position = UDim2.new(1, -23, 0, 0)
                                            BindOutline_2.Size = UDim2.new(0, 20, 0, 15)
                                            BindOutline_2.BackgroundTransparency = 1;

                                            KeybindPicker_2.Name = "KeybindPicker"
                                            KeybindPicker_2.Parent = BindOutline_2
                                            KeybindPicker_2.BackgroundColor3 = Library.Theme.MedianContrast
                                            KeybindPicker_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            KeybindPicker_2.BorderSizePixel = 1
                                            KeybindPicker_2.Position = UDim2.new(0, 2, 0, 2)
                                            KeybindPicker_2.Size = UDim2.new(1, -4, 1, -4)
                                            KeybindPicker_2.FontFace = Library.MenuFont
                                            KeybindPicker_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            KeybindPicker_2.Text = "[NONE]"
                                            KeybindPicker_2.TextColor3 = Library.Theme.ElementOff
                                            KeybindPicker_2.TextSize = Library.TextSize
                                            KeybindPicker_2.AutoButtonColor = false;
                                            KeybindPicker_2.BackgroundTransparency = 1;
                                            KeybindPicker_2.TextXAlignment = Enum.TextXAlignment.Right;

                                            function Keybind:Set(Key, IsMouse)
                                                if not IsMouse then 
                                                    if Key and (type(Key) == "table" or typeof(Key) == "EnumItem") and Key.Name then
                                                        Keybind.IsBeingSelected = true;
    
                                                        if Keys[Key.Name] then 
                                                            KeybindPicker_2.Text = "["..Keys[Key.Name].."]";
                                                            Keybind.AbKey = Keys[Key.Name]
                                                        else 
                                                            KeybindPicker_2.Text = "["..Key.Name:sub(1, 2).."]";
    
                                                            Keybind.AbKey = Key.Name:sub(1, 2)
                                                        end;
    
                                                        if type(Key) == "table" and Key.Name ~= "" then
    
                                                        
                                                            Keybind.Key = Enum.KeyCode[Key.Name];
                                                        else 
                                                            Keybind.Key = Key;
                                                        end;
                                                        Keybind.IsBeingSelected = false;
                                                    end;
                                                else
                                                    if type(Key) == "table" then 
                                                        Key = Enum.UserInputType[Key.Name];
                                                    end
                                                    Keybind.IsBeingSelected = true; 
                                                    local Shortened = "";
                                                    if Key == Enum.UserInputType.MouseButton1 then 
                                                        Shortened = "M1";
                                                    elseif Key == Enum.UserInputType.MouseButton2 then 
                                                        Shortened = "M2";
                                                    elseif Key == Enum.UserInputType.MouseButton3 then 
                                                        Shortened = "M3";
                                                    elseif Key == Enum.UserInputType.MouseWheel then 
                                                        Shortened = "M4";
                                                    end;
    
                                                    Keybind.Key = Key;
                                                    Keybind.AbKey = Shortened;
    
                                                    KeybindPicker_2.Text = "["..Shortened.."]";
                                                    Keybind.IsBeingSelected = false
                                                end;
                                            end;
    
                                            KeybindPicker_2.MouseEnter:Connect(function()
                                                Library:Tween(BindOutline_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                            end);
    
                                            KeybindPicker_2.MouseLeave:Connect(function()
                                                Library:Tween(BindOutline_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                            end);
    
                                            KeybindPicker_2.MouseButton1Down:Connect(function()
                                                task.spawn(function()
                                                    Library:Tween(KeybindPicker_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                                    task.wait(0.1)
                                                    Library:Tween(KeybindPicker_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                                end);
    
                                                task.wait(0.1)
                                                KeybindPicker_2.Text = " ..."
                                                Keybind.IsBeingSelected = true;
    
                                                UserInputService.InputBegan:Connect(function(Input)
                                                    if Input.UserInputType == Enum.UserInputType.Keyboard and Keybind.IsBeingSelected then
                                                        Keybind:Set(Input.KeyCode);
                                                        Keybind.IsBeingSelected = false;
                                                    elseif Input.UserInputType == Enum.UserInputType.MouseButton1 and Keybind.IsBeingSelected then 
                                                        Keybind:Set(Enum.UserInputType.MouseButton1, true)
                                                    elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and Keybind.IsBeingSelected then 
                                                        Keybind:Set(Enum.UserInputType.MouseButton2, true)
                                                    elseif Input.UserInputType == Enum.UserInputType.MouseButton3 and Keybind.IsBeingSelected then 
                                                        Keybind:Set(Enum.UserInputType.MouseButton3, true)
                                                    elseif Input.UserInputType == Enum.UserInputType.MouseWheel and Keybind.IsBeingSelected then 
                                                        Keybind:Set(Enum.UserInputType.MouseWheel, true)
                                                    else 
                                                        Keybind.IsBeingSelected = false;
                                                    end;
                                                end);
                                            end);
                                            
                                            UserInputService.InputBegan:Connect(function(Input)
                                                if Input.KeyCode == Keybind["Key"] and not Keybind.IsBeingSelected then 
                                                    if Keybind["Mode"] == "Toggle" then 
                                                        Keybind.Value = not Keybind.Value;
                                                        if Keybind.Name ~= "Open/Close" and Keybind.Name ~= "Open / Close" then 
                                                            Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                        end;
                                                        pcall(Keybind.Callback)
                                                    elseif Keybind["Mode"] == "Hold" then 
                                                        Keybind.Value = true;
                                                        if not Library.KeybindsContainer:FindFirstChild(Keybind.Name) then 
                                                            Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                        end;
                                                        pcall(Keybind.Callback)
                                                    elseif Keybind["Mode"] == "Press" then 
                                                        pcall(Keybind.Callback)
                                                    end
                                                end
                                            end);
                
                                            UserInputService.InputEnded:Connect(function(Input)
                                                if Input.KeyCode == Keybind["Key"] and not Keybind.IsBeingSelected then 
                                                    if Keybind["Mode"] == "Hold" then
                                                        Keybind.Value = false;
                                                        Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                        if Data.Callback then pcall(Data.Callback) end;
                                                    end
                                                end
                                            end);

                                            if Keybind.Default then 
                                                Keybind:Set(Keybind.Default);
                                            end;
                                            Library.Flags[Data.Flag] = Keybind;
                                            return Keybind;
                                        end;

                                        function Toggle:MultiSettings(Data)
                                            local Settings = {

                                            };

                                            local Button = Instance.new("ImageButton");

                                            local ContainerOutline = Instance.new("Frame");
                                            local Container = Instance.new("Frame");

                                            
                                            do --// properties 

                                            end; 

                                            do --// functions

                                            end;


                                            return Settings;
                                        end;
                                    end;

                                    Section.Bounds = Section.Bounds + 24;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);

                                    if Toggle.Default then 
                                        Toggle:Set(Toggle.Default);
                                    end;

                                    Library.Flags[Data.Flag] = Toggle;
                                    return Toggle;
                                end;

                                --// Dropdown
                                function Section:Dropdown(Data)
                                    local Dropdown = {
                                        Name = Data.Name,
                                        Flag = Data.Flag,
                                        Value = nil,
                                        Options = {};
                                        Max = Data.Max or #Data.Options;
                                        IsOpen = false;
                                        Callback = Data.Callback or function() end;
                                        Default = Data.Default;
                                        Frame = nil;
                                    };
                                    local NewDropdown = Instance.new("Frame")
                                    local DropdownOutline = Instance.new("Frame")
                                    local DropdownInner = Instance.new("TextButton")
                                    local DropdownFlag = Instance.new("TextLabel")
                                    local DropdownStatus = Instance.new("TextLabel")
                                    local ContainerOutline = Instance.new("Frame")
                                    local Container = Instance.new("Frame")
                                    local ContainerLayout = Instance.new("UIListLayout")
                                    local DropdownTitle = Instance.new("TextLabel")

                                    Dropdown.Frame = NewDropdown;

                                    do --// Dropdown properties 
                                        NewDropdown.Name = "NewDropdown";
                                        NewDropdown.Parent = SectionInner;
                                        NewDropdown.BackgroundColor3 = Color3.fromRGB(255, 0, 0);
                                        NewDropdown.BackgroundTransparency = 1.000;
                                        NewDropdown.BorderColor3 = Library.Theme.Border;
                                        NewDropdown.BorderSizePixel = 0;
                                        NewDropdown.Position = UDim2.new(0, 2, 0, Section.Bounds);
                                        NewDropdown.Size = UDim2.new(1, -4, 0, 32);
                                        NewDropdown.ZIndex = Window.ImportantIndex;

                                        Window.ImportantIndex = Window.ImportantIndex - 1;

                                        DropdownOutline.Name = "DropdownOutline";
                                        DropdownOutline.Parent = NewDropdown;
                                        DropdownOutline.BackgroundColor3 = Library.Theme.LightContrast;
                                        DropdownOutline.BorderColor3 = Library.Theme.Border;
                                        DropdownOutline.Position = UDim2.new(0, 0, 0, 15);
                                        DropdownOutline.Size = UDim2.new(1, 0, 0, 16);
                                        
                                        DropdownInner.Name = "DropdownInner";
                                        DropdownInner.Parent = DropdownOutline;
                                        DropdownInner.BackgroundColor3 = Library.Theme.MedianContrast;
                                        DropdownInner.BorderColor3 = Library.Theme.Border;
                                        DropdownInner.Position = UDim2.new(0, 2, 0, 2);
                                        DropdownInner.Size = UDim2.new(1, -4, 1, -4);
                                        DropdownInner.Text = "";

                                        DropdownInner.AutoButtonColor = false;

                                        DropdownFlag.Name = "DropdownFlag";
                                        DropdownFlag.Parent = DropdownInner;
                                        DropdownFlag.BackgroundColor3 = Library.Theme.ElementOn;
                                        DropdownFlag.BackgroundTransparency = 1.000;
                                        DropdownFlag.BorderColor3 = Library.Theme.Border;
                                        DropdownFlag.BorderSizePixel = 0;
                                        DropdownFlag.Size = UDim2.new(1, 0, 1, 0);
                                        DropdownFlag.FontFace = Library.MenuFont;
                                        DropdownFlag.Text = "";
                                        DropdownFlag.TextColor3 = Library.Theme.ElementOn;
                                        DropdownFlag.TextSize = Library.TextSize;
                                        
                                        DropdownStatus.Name = "DropdownStatus";
                                        DropdownStatus.Parent = DropdownInner;
                                        DropdownStatus.BackgroundColor3 = Library.Theme.ElementOn;
                                        DropdownStatus.BackgroundTransparency = 1.000;
                                        DropdownStatus.BorderColor3 = Library.Theme.Border;
                                        DropdownStatus.BorderSizePixel = 0;
                                        DropdownStatus.Position = UDim2.new(0.929292917, 0, 0, 1);
                                        DropdownStatus.Size = UDim2.new(0, 14, 1, 0);
                                        DropdownStatus.FontFace = Library.MenuFont;
                                        DropdownStatus.Text = "+";
                                        DropdownStatus.TextColor3 = Library.Theme.ElementOn;
                                        DropdownStatus.TextSize = Library.TextSize;
                                        
                                        ContainerOutline.Name = "ContainerOutline"
                                        ContainerOutline.Parent = DropdownInner
                                        ContainerOutline.BackgroundColor3 = Library.Theme.LightContrast
                                        ContainerOutline.BorderColor3 = Library.Theme.Border
                                        ContainerOutline.Position = UDim2.new(0, -2, 1, 4);
                                        ContainerOutline.ClipsDescendants = true;
                                        ContainerOutline.Size = UDim2.new(1, 4, 0, 0)
                                        ContainerOutline.Visible = false
                                        Dropdown.Container = ContainerOutline;

                                        Container.Name = "Container"
                                        Container.Parent = ContainerOutline
                                        Container.BackgroundColor3 = Library.Theme.MedianContrast
                                        Container.BorderColor3 = Library.Theme.Border
                                        Container.Position = UDim2.new(0, 2, 0, 2)
                                        Container.Size = UDim2.new(1, -4, 1, -4)
                                        Container.Visible = true;

                                        ContainerLayout.Parent = Container
                                        ContainerLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                        
                                        DropdownTitle.Name = "DropdownTitle"
                                        DropdownTitle.Parent = NewDropdown
                                        DropdownTitle.BackgroundColor3 = Library.Theme.ElementOn
                                        DropdownTitle.BackgroundTransparency = 1.000
                                        DropdownTitle.BorderColor3 = Library.Theme.Border
                                        DropdownTitle.BorderSizePixel = 0
                                        DropdownTitle.Position = UDim2.new(0.00990098994, 0, 0, 0)
                                        DropdownTitle.Size = UDim2.new(0.990099013, 0, 0, 14)
                                        DropdownTitle.FontFace = Library.MenuFont
                                        DropdownTitle.Text = Data.Name;
                                        DropdownTitle.TextColor3 = Library.Theme.ElementOn
                                        DropdownTitle.TextSize = Library.TextSize
                                        DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                                        DropdownTitle.TextYAlignment = Enum.TextYAlignment.Top
                                    end;

                                    do --// Dropdown functions 

                                        function Dropdown:Toggle()
                                            Dropdown.IsOpen = not Dropdown.IsOpen; 
                                            local SizeToTween;


                                            if Dropdown.IsOpen then 
                                                Dropdown.Container.Visible = true;
                                            end;

                                            if Dropdown.Max ~= 1 then 
                                                SizeToTween = UDim2.new(1, 4, 0, (14 * Dropdown.Max) + 4);
                                            else 
                                                SizeToTween = UDim2.new(1, 4, 0, 14);
                                            end;

                                            if Dropdown.IsOpen then 
                                                if Library.CurrentDropdown then 
                                                    Library.CurrentDropdown.Container.Visible = false;
                                                    Library.CurrentDropdown.Container.Size = UDim2.new(1, 4, 0, 0)
                                                    Library.CurrentDropdown.IsOpen = false;
                                                end;
                                                Library.CurrentDropdown = Dropdown;

                                                Library:Tween(Dropdown.Container, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = SizeToTween});
                                            else
                                                Library.CurrentDropdown = nil;
                                                Library:Tween(Dropdown.Container, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = UDim2.new(1, 4, 0, 0)});
                                                task.wait(0.2);
                                                Dropdown.Container.Visible = false;
                                            end;
                                        end;

                                        function Dropdown:Update()
                                            --if Dropdown.Max ~= 1 then 
                                            --    ContainerOutline.Size = UDim2.new(1, 4, 0, (14 * Dropdown.Max) + 4);
                                            --else 
                                            --    ContainerOutline.Size = UDim2.new(1, 4, 0, 14);
                                            --end;
                                        end;

                                        DropdownInner.MouseEnter:Connect(function()
                                            Library:Tween(DropdownOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                        end);
                                        
                                        DropdownInner.MouseLeave:Connect(function()
                                            Library:Tween(DropdownOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                        end);

                                        DropdownInner.MouseButton1Down:Connect(function()
                                            Dropdown:Toggle();
                                        end);
                                        
                                        function Dropdown:Set(Value)
                                            if Dropdown.Options[Value] then
                                                Dropdown.Value = Value;
                                                DropdownFlag.Text = tostring(Value); 
                                                Dropdown.Options[Value].IsSelected = true;
                                                Dropdown.Options[Value].Selector.Visible = true;
                                                Library:Tween(Dropdown.Options[Value].Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                            end;

                                            for Index, Val in pairs(Dropdown.Options) do 
                                                if Val ~= Dropdown.Options[Value] then 
                                                    Val.IsSelected = false; 
                                                    Val.Selector.Visible = false;
                                                    Library:Tween(Val.Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                end;    
                                            end;

                                            if Dropdown.Callback then pcall(Dropdown.Callback); end;
                                        end;

                                        function Dropdown:AddOption(Name)
                                            local NewOption = Instance.new("TextButton")
                                            local Frame = Instance.new("Frame")

                                            local Option = {
                                                Name = Name;
                                                IsSelected = false;
                                                Selector = Frame;
                                                Button = NewOption;
                                            };

                                            NewOption.Name = "NewOption"
                                            NewOption.Parent = Container
                                            NewOption.BackgroundColor3 = Library.Theme.ElementOff
                                            NewOption.BackgroundTransparency = 1.000
                                            NewOption.BorderColor3 = Library.Theme.Border
                                            NewOption.BorderSizePixel = 0
                                            NewOption.Size = UDim2.new(1, 0, 0, 14)
                                            NewOption.FontFace = Library.MenuFont
                                            NewOption.Text = Name;
                                            NewOption.TextColor3 = Library.Theme.ElementOff;
                                            NewOption.TextSize = Library.TextSize
                                            
                                            Frame.Parent = NewOption
                                            Frame.BackgroundColor3 = Library.Theme.Accent
                                            Frame.BorderColor3 = Library.Theme.Border
                                            Frame.BorderSizePixel = 0
                                            Frame.Size = UDim2.new(0, 2, 1, 0);
                                            Frame.Visible = false;

                                            NewOption.MouseButton1Down:Connect(function()
                                                Option.IsSelected = not Option.IsSelected

                                                for Index, Value in next, Dropdown.Options do 
                                                    if Value ~= Option then 
                                                        Value.IsSelected = false;
                                                        Library:Tween(Value.Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                        Value.Selector.Visible = false;
                                                    end;
                                                end;
                                                if Option.IsSelected then 
                                                    Dropdown:Set(Option.Name);
                                                else
                                                    Frame.Visible = false;
                                                    Library:Tween(NewOption, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                end;
                                            end);
                                            Dropdown.Options[Option.Name] = Option;

                                            return Option;
                                        end;

                                        function Dropdown:RemoveOption(Name)
                                            if Dropdown.Options[Name] then
                                                Dropdown.Options[Name].Button:Destroy();
                                                Dropdown.Options[Name] = nil;
                                            end;
                                        end;
                                    end;

                                    for Index, Value in next, Data.Options do 
                                        Dropdown:AddOption(Value);
                                    end;

                                    Section.Bounds = Section.Bounds + 37;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);

                                    if Dropdown.Default then
                                        Dropdown:Set(Dropdown.Default);
                                    else 
                                        Dropdown:Set(Data.Options[1])
                                    end;

                                    Library.Flags[Data.Flag] = Dropdown;
                                    return Dropdown;
                                end;

                                --// Keybind
                                function Section:Keybind(Data)
                                    local Keybind = {
                                        Name = Data.Name;
                                        Key = "";
                                        Flag = Data.Flag;
                                        Mode = Data.Mode or "Toggle",
                                        IsEnabled = false;
                                        Callback = Data.Callback or function() end;
                                        IsBeingSelected = false;
                                        Default = Data.Default;
                                        Components = nil;
                                        Frame = nil;
                                        AbKey = "";
                                    };

                                    local NewKeybind = Instance.new("Frame")
                                    local KeybindTitle = Instance.new("TextLabel");
                                    local BindOutline_2 = Instance.new("Frame")
                                    local KeybindPicker_2 = Instance.new("TextButton")

                                    Keybind.Components = BindOutline_2;
                                    Keybind.Frame = NewKeybind;

                                    do --// Properties
                                        NewKeybind.Name = "NewKeybind"
                                        NewKeybind.Parent = SectionInner
                                        NewKeybind.BackgroundColor3 = Color3.fromRGB(255, 0, 4)
                                        NewKeybind.BackgroundTransparency = 1.000
                                        NewKeybind.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        NewKeybind.BorderSizePixel = 0
                                        NewKeybind.Size = UDim2.new(1, 0, 0, 15)
                                        NewKeybind.Position = UDim2.new(0, 2, 0, Section.Bounds);

                                        KeybindTitle.Name = "KeybindTitle"
                                        KeybindTitle.Parent = NewKeybind
                                        KeybindTitle.BackgroundColor3 = Library.Theme.ElementOn
                                        KeybindTitle.BackgroundTransparency = 1.000
                                        KeybindTitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        KeybindTitle.BorderSizePixel = 0
                                        KeybindTitle.Position = UDim2.new(0, 1, 0, 0)
                                        KeybindTitle.Size = UDim2.new(0.875706196, 0, 1, 0)
                                        KeybindTitle.FontFace = Library.MenuFont
                                        KeybindTitle.Text = Data.Name
                                        KeybindTitle.TextColor3 = Library.Theme.ElementOn
                                        KeybindTitle.TextSize = Library.TextSize
                                        KeybindTitle.TextXAlignment = Enum.TextXAlignment.Left

                                        BindOutline_2.Name = "BindOutline"
                                        BindOutline_2.Parent = NewKeybind
                                        BindOutline_2.BackgroundColor3 = Library.Theme.LightContrast
                                        BindOutline_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        BindOutline_2.BorderSizePixel = 1
                                        BindOutline_2.Position = UDim2.new(1, -23, 0, 0)
                                        BindOutline_2.Size = UDim2.new(0, 20, 0, 15)
                                        BindOutline_2.BackgroundTransparency = 1;

                                        KeybindPicker_2.Name = "KeybindPicker"
                                        KeybindPicker_2.Parent = BindOutline_2
                                        KeybindPicker_2.BackgroundColor3 = Library.Theme.MedianContrast
                                        KeybindPicker_2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        KeybindPicker_2.BorderSizePixel = 1
                                        KeybindPicker_2.Position = UDim2.new(0, 2, 0, 2)
                                        KeybindPicker_2.Size = UDim2.new(1, -4, 1, -4)
                                        KeybindPicker_2.FontFace = Library.MenuFont
                                        KeybindPicker_2.Text = "[NONE]"
                                        KeybindPicker_2.TextColor3 = Library.Theme.ElementOn
                                        KeybindPicker_2.TextSize = Library.TextSize
                                        KeybindPicker_2.AutoButtonColor = false;
                                        KeybindPicker_2.BackgroundTransparency = 1;

                                        KeybindPicker_2.TextXAlignment = Enum.TextXAlignment.Right;
                                    end;

                                    do --// Functions
                                        function Keybind:Set(Key, IsMouse)
                                            if not IsMouse then 
                                                if Key and (type(Key) == "table" or typeof(Key) == "EnumItem") and Key.Name then
                                                    Keybind.IsBeingSelected = true;

                                                    if Keys[Key.Name] then 
                                                        KeybindPicker_2.Text = "["..Keys[Key.Name].."]";
                                                        Keybind.AbKey = Keys[Key.Name]
                                                    else 
                                                        KeybindPicker_2.Text = "["..Key.Name:sub(1, 2).."]";

                                                        Keybind.AbKey = Key.Name:sub(1, 2)
                                                    end;

                                                    if type(Key) == "table" and Key.Name ~= "" then

                                                    
                                                        Keybind.Key = Enum.KeyCode[Key.Name];
                                                    else 
                                                        Keybind.Key = Key;
                                                    end;
                                                    Keybind.IsBeingSelected = false;
                                                end;
                                            else
                                                if type(Key) == "table" then 
                                                    Key = Enum.UserInputType[Key.Name];
                                                end
                                                Keybind.IsBeingSelected = true; 
                                                local Shortened = "";
                                                if Key == Enum.UserInputType.MouseButton1 then 
                                                    Shortened = "M1";
                                                elseif Key == Enum.UserInputType.MouseButton2 then 
                                                    Shortened = "M2";
                                                elseif Key == Enum.UserInputType.MouseButton3 then 
                                                    Shortened = "M3";
                                                elseif Key == Enum.UserInputType.MouseWheel then 
                                                    Shortened = "M4";
                                                end;

                                                Keybind.Key = Key;
                                                Keybind.AbKey = Shortened;

                                                KeybindPicker_2.Text = "["..Shortened.."]";
                                                Keybind.IsBeingSelected = false
                                            end;
                                        end;

                                        KeybindPicker_2.MouseEnter:Connect(function()
                                            Library:Tween(BindOutline_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                        end);

                                        KeybindPicker_2.MouseLeave:Connect(function()
                                            Library:Tween(BindOutline_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                        end);

                                        KeybindPicker_2.MouseButton1Down:Connect(function()
                                            task.spawn(function()
                                                Library:Tween(KeybindPicker_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                                task.wait(0.1)
                                                Library:Tween(KeybindPicker_2, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.MedianContrast});
                                            end);

                                            task.wait(0.1)
                                            KeybindPicker_2.Text = " ..."
                                            Keybind.IsBeingSelected = true;

                                            UserInputService.InputBegan:Connect(function(Input)
                                                if Input.UserInputType == Enum.UserInputType.Keyboard and Keybind.IsBeingSelected then
                                                    Keybind:Set(Input.KeyCode);
                                                    Keybind.IsBeingSelected = false;
                                                elseif Input.UserInputType == Enum.UserInputType.MouseButton1 and Keybind.IsBeingSelected then 
                                                    Keybind:Set(Enum.UserInputType.MouseButton1, true)
                                                elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and Keybind.IsBeingSelected then 
                                                    Keybind:Set(Enum.UserInputType.MouseButton2, true)
                                                elseif Input.UserInputType == Enum.UserInputType.MouseButton3 and Keybind.IsBeingSelected then 
                                                    Keybind:Set(Enum.UserInputType.MouseButton3, true)
                                                elseif Input.UserInputType == Enum.UserInputType.MouseWheel and Keybind.IsBeingSelected then 
                                                    Keybind:Set(Enum.UserInputType.MouseWheel, true)
                                                else 
                                                    Keybind.IsBeingSelected = false;
                                                end;
                                            end);
                                        end);

                                        UserInputService.InputBegan:Connect(function(Input)
                                            if Input.KeyCode == Keybind["Key"] and not Keybind.IsBeingSelected then 
                                                if Keybind["Mode"] == "Toggle" then 
                                                    Keybind.Value = not Keybind.Value;
                                                    if Keybind.Name ~= "Open/Close" and Keybind.Name ~= "Open / Close" then 
                                                        Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                    end;
                                                    pcall(Keybind.Callback)
                                                elseif Keybind["Mode"] == "Hold" then 
                                                    Keybind.Value = true;
                                                    if not Library.KeybindsContainer:FindFirstChild(Keybind.Name) then 
                                                        Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                    end;
                                                    pcall(Keybind.Callback)
                                                elseif Keybind["Mode"] == "Press" then 
                                                    pcall(Keybind.Callback)
                                                end
                                            end

                                            if Input.UserInputType == Keybind["Key"] and not Keybind.IsBeingSelected then 
                                                if Keybind["Mode"] == "Toggle" then 
                                                    Keybind.Value = not Keybind.Value;
                                                    if Keybind.Name ~= "Open/Close" and Keybind.Name ~= "Open / Close" then 
                                                        Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                    end;
                                                    pcall(Keybind.Callback)
                                                elseif Keybind["Mode"] == "Hold" then 
                                                    Keybind.Value = true;
                                                    if not Library.KeybindsContainer:FindFirstChild(Keybind.Name) then 
                                                        Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                    end;
                                                    pcall(Keybind.Callback)
                                                elseif Keybind["Mode"] == "Press" then 
                                                    pcall(Keybind.Callback)
                                                end
                                            end
                                        end);
            
                                        UserInputService.InputEnded:Connect(function(Input)
                                            if Input.KeyCode == Keybind["Key"] and not Keybind.IsBeingSelected then 
                                                if Keybind["Mode"] == "Hold" then
                                                    Keybind.Value = false;
                                                    Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                    if Data.Callback then pcall(Data.Callback) end;
                                                end
                                            end

                                            if Input.UserInputType == Keybind["Key"] and not Keybind.IsBeingSelected then 
                                                if Keybind["Mode"] == "Hold" then 
                                                    Keybind.Value = false;
                                                    Library:ToggleBind(Keybind.Name, Keybind.AbKey);
                                                    pcall(Keybind.Callback)
                                                end
                                            end
                                        end);
                                    end;

                                    if Keybind.Default then 
                                        Keybind:Set(Keybind.Default);
                                    end;

                                    Library.Flags[Data.Flag] = Keybind;
                                    Section.Bounds = Section.Bounds + 20;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);
                                    return Keybind;
                                end

                                --// Slider
                                function Section:Slider(Data)
                                    local Slider = {
                                        Min = Data.Min, 
                                        Max = Data.Max, 
                                        Default = Data.Default or Data.Max / 2, 
                                        Flag = Data.Flag, 
                                        Suffix = Data.Suffix or "", 
                                        Value = 0,
                                        Name = Data.Name,
                                        AllowDecimals = Data.AllowDecimals,
                                        Callback = Data.Callback or function() end;
                                        Frame = nil;

                                    };
                                    local NewSlider = Instance.new("Frame")
                                    local SliderTitle = Instance.new("TextLabel")
                                    local SliderOutline = Instance.new("Frame")
                                    local SliderInner = Instance.new("ImageButton")
                                    local SliderButton = Instance.new("ImageLabel")
                                    local SliderGradient = Instance.new("UIGradient")
                                    local TextLabel = Instance.new("TextLabel");

                                    local SliderPlus = Instance.new("TextButton");
                                    local SliderMinus = Instance.new("TextButton");
                                    
                                    Slider.Frame = NewSlider;
                                    do --// Slider properties 
                                        NewSlider.Name = "NewSlider"
                                        NewSlider.Parent = SectionInner
                                        NewSlider.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
                                        NewSlider.BackgroundTransparency = 1.000
                                        NewSlider.BorderColor3 = Library.Theme.Border
                                        NewSlider.Position = UDim2.new(0, 2, 0, Section.Bounds)
                                        NewSlider.Size = UDim2.new(1, -4, 0, 30)

                                        SliderMinus.Parent = NewSlider;
                                        SliderMinus.Text = "-";
                                        SliderMinus.Size = UDim2.new(0, 5, 0, 9);
                                        SliderMinus.Position = UDim2.new(1, -7, 0, 0);
                                        SliderMinus.BackgroundTransparency = 1;
                                        SliderMinus.FontFace = Library.MenuFont;
                                        SliderMinus.TextSize = Library.TextSize;
                                        SliderMinus.TextColor3 = Color3.fromRGB(150, 150, 150);

                                        SliderPlus.BackgroundTransparency = 1;
                                        SliderPlus.Text = "+";
                                        SliderPlus.Parent = NewSlider;
                                        SliderPlus.FontFace = Library.MenuFont;
                                        SliderPlus.TextSize = Library.TextSize
                                        SliderPlus.TextColor3 = Color3.fromRGB(150, 150, 150);
                                        SliderPlus.Position = UDim2.new(1, -20, 0, 0);
                                        SliderPlus.Size = UDim2.new(0, 5, 0, 9);

                                        SliderTitle.Name = "SliderTitle"
                                        SliderTitle.Parent = NewSlider
                                        SliderTitle.BackgroundColor3 = Library.Theme.ElementOn
                                        SliderTitle.BackgroundTransparency = 1.000
                                        SliderTitle.BorderColor3 = Library.Theme.Border
                                        SliderTitle.BorderSizePixel = 0
                                        SliderTitle.Position = UDim2.new(0.00990098994, 0, 0, 0)
                                        SliderTitle.Size = UDim2.new(0, 118, 0, 12)
                                        SliderTitle.FontFace = Library.MenuFont
                                        SliderTitle.Text = Slider.Name;
                                        SliderTitle.TextColor3 = Library.Theme.ElementOn
                                        SliderTitle.TextSize = Library.TextSize
                                        SliderTitle.TextXAlignment = Enum.TextXAlignment.Left

                                        SliderOutline.Name = "SliderOutline"
                                        SliderOutline.Parent = NewSlider
                                        SliderOutline.BackgroundColor3 = Library.Theme.LightContrast
                                        SliderOutline.BorderColor3 = Library.Theme.Border
                                        SliderOutline.Position = UDim2.new(0, 0, 0, 15)
                                        SliderOutline.Size = UDim2.new(1, 0, 0, 14)

                                        SliderInner.Name = "SliderInner"
                                        SliderInner.Parent = SliderOutline
                                        SliderInner.BackgroundColor3 = Library.Theme.MedianContrast
                                        SliderInner.BorderColor3 = Library.Theme.Border
                                        SliderInner.Position = UDim2.new(0, 2, 0, 2)
                                        SliderInner.Size = UDim2.new(1, -4, 1, -4)
                                        SliderInner.AutoButtonColor = false

                                        SliderButton.Name = "SliderButton"
                                        SliderButton.Parent = SliderInner
                                        SliderButton.BackgroundColor3 = Library.Theme.ElementOn
                                        SliderButton.BorderColor3 = Library.Theme.Border
                                        SliderButton.BorderSizePixel = 0
                                        SliderButton.Size = UDim2.new(1, 0, 1, 0)

                                        SliderGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Library.Theme.Accent), ColorSequenceKeypoint.new(1.00, Library.Theme.GradiantContrast2)}
                                        SliderGradient.Rotation = 90
                                        SliderGradient.Name = "SliderGradient"
                                        SliderGradient.Parent = SliderButton

                                        TextLabel.Parent = SliderInner
                                        TextLabel.BackgroundColor3 = Library.Theme.ElementOn
                                        TextLabel.BackgroundTransparency = 1.000
                                        TextLabel.BorderColor3 = Library.Theme.Border
                                        TextLabel.BorderSizePixel = 0
                                        TextLabel.Size = UDim2.new(1, 0, 1, 0)
                                        TextLabel.FontFace = Library.MenuFont
                                        TextLabel.Visible = false;
                                        TextLabel.Text = tostring(Data.Default);
                                        TextLabel.TextColor3 = Library.Theme.ElementOff
                                        TextLabel.TextSize = Library.TextSize
                                        TextLabel.TextYAlignment = Enum.TextYAlignment.Top
                                        TextLabel.TextStrokeTransparency = 0;
                                    end;

                                    do --// Slider functions
                                        local isMouseIn = false;
                                        local isSliding = false;
                                        --local Value = {Slider = Default}

                                        SliderPlus.MouseButton1Down:Connect(function()
                                            local NewValue = Slider.Value;
                                            if Slider.AllowDecimals then 
                                                NewValue = Slider.Value + (1 / Slider.AllowDecimals);
                                                if NewValue <= Slider.Max then
                                                    Slider:Set(NewValue);

                                                end;
                                            else 
                                                if (NewValue + 1) <= Slider.Max then 
                                                    Slider:Set(NewValue + 1);
                                                end;
                                            end;
                                        end);

                                        SliderMinus.MouseButton1Down:Connect(function()
                                            local NewValue = Slider.Value
                                            if Slider.AllowDecimals then 
                                                NewValue = Slider.Value - (1 / Slider.AllowDecimals);
                                                if NewValue >= Slider.Min then 
                                                    Slider:Set(NewValue);
                                                end;
                                            else 
                                                if (NewValue - 1) >= Slider.Min then 
                                                    Slider:Set(NewValue - 1);
                                                end;
                                            end;
                                        end);

                                        SliderInner.MouseEnter:Connect(function()
                                            Library:Tween(SliderOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                            Library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                        end);

                                        SliderInner.MouseLeave:Connect(function()
                                            Library:Tween(SliderOutline, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                            Library:Tween(TextLabel, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                        end);

                                        function Slider:Set(NewValue)
                                            if Slider.AllowDecimals then
                                                --// This is stupid, i know, but, it works really well especially since you would get random decimals like .0000000000003
                                                local Value = (1 / Slider.AllowDecimals) * math.floor(NewValue / (1 / Slider.AllowDecimals));
                                                local Total = string.len(Slider.Suffix) + Slider.AllowDecimals + string.len(tostring(Slider.Max));

                                                Value = string.sub(tostring(Value), 1, Total);
                                                NewValue = tonumber(Value);
                                            else 
                                                NewValue = math.floor(NewValue);
                                            end;

                                            Slider.Value = NewValue;

                                            local Size = (NewValue - Data.Min) / (Data.Max-Data.Min);
                                            SliderButton.Size = UDim2.new(Size, 0, 1, 0);
                                            SliderTitle.Text = Slider.Name..": "..tostring(NewValue)..Slider.Suffix;
                                            TextLabel.Text = tostring(NewValue)..Slider.Suffix;
                                            if Slider.Callback then pcall(Slider.Callback) end;
                                        end;

                                        SliderInner.MouseButton1Down:Connect(function()
                                            SliderButton.Size = UDim2.new(0, math.clamp(Mouse.X - SliderInner.AbsolutePosition.X, 0, math.floor(SliderInner.AbsoluteSize.X)), 1, 0);
                                            local Val = ((((Data.Max - Data.Min) / math.floor(SliderInner.AbsoluteSize.X)) * math.floor(SliderButton.AbsoluteSize.X)) + Data.Min);

                                            if Val then 
                                                Slider:Set(Val);
                                                
                                                if Data.Callback then pcall(Data.Callback) end;
                                            end

                                            isSliding = true;

                                            MoveConn = Mouse.Move:Connect(function()
                                                SliderButton.Size = UDim2.new(0, math.clamp(Mouse.X - SliderInner.AbsolutePosition.X, 0, math.floor(SliderInner.AbsoluteSize.X)), 1, 0);
                                                local Val = ((((Data.Max - Data.Min) / math.floor(SliderInner.AbsoluteSize.X)) * math.floor(SliderButton.AbsoluteSize.X)) + Data.Min);
                                                if Val then 
                                                    Slider:Set(Val);
                                                    if Data.Callback then pcall(Data.Callback) end;
                                                end
                                            end);

                                            ReleaseConn = UserInputService.InputEnded:Connect(function(Inp)
                                                if Inp.UserInputType == Enum.UserInputType.MouseButton1 then 
                                                    SliderButton.Size = UDim2.new(0, math.clamp(Mouse.X - SliderInner.AbsolutePosition.X, 0,math.floor(SliderInner.AbsoluteSize.X)), 1, 0);
                                                    local Val = ((((Data.Max - Data.Min) / math.floor(SliderInner.AbsoluteSize.X)) * math.floor(SliderButton.AbsoluteSize.X)) + Data.Min);
                                                    if Val then 
                                                        Slider:Set(Val);
                                                        if Data.Callback then pcall(Data.Callback) end;
                                                    end

                                                    isSliding = false;
                                                    ReleaseConn:Disconnect();
                                                    MoveConn:Disconnect();
                                                end
                                            end);
                                        end)
                                    end;
                                    
                                    Section.Bounds = Section.Bounds + 35;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);

                                    Slider:Set(Slider.Default) 
                                    Library.Flags[Data.Flag] = Slider;

                                    if Slider.Callback then  pcall(Slider.Callback) end;
                                    return Slider
                                end;

                                --// Multi list
                                function Section:Multidropdown(Data)
                                    local Dropdown = {
                                        Name = Data.Name,
                                        Flag = Data.Flag,
                                        Value = {},
                                        Options = {};
                                        Max = Data.Max or #Data.Options;
                                        IsOpen = false;
                                        Multi = true;
                                        Default = Data.Default;
                                        Frame = nil;
                                    };
                                    local NewDropdown = Instance.new("Frame")
                                    local DropdownOutline = Instance.new("Frame")
                                    local DropdownInner = Instance.new("TextButton")
                                    local DropdownFlag = Instance.new("TextLabel")
                                    local DropdownStatus = Instance.new("TextLabel")
                                    local ContainerOutline = Instance.new("Frame")
                                    local Container = Instance.new("Frame")
                                    local ContainerLayout = Instance.new("UIListLayout")
                                    local DropdownTitle = Instance.new("TextLabel")

                                    Dropdown.Frame = NewDropdown;

                                    do --// Dropdown properties 
                                        NewDropdown.Name = "NewDropdown"
                                        NewDropdown.Parent = SectionInner
                                        NewDropdown.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
                                        NewDropdown.BackgroundTransparency = 1.000
                                        NewDropdown.BorderColor3 = Library.Theme.Border
                                        NewDropdown.BorderSizePixel = 0
                                        NewDropdown.Position = UDim2.new(0, 2, 0, Section.Bounds)
                                        NewDropdown.Size = UDim2.new(1, -4, 0, 32)
                                        NewDropdown.ZIndex = Window.ImportantIndex;

                                        Window.ImportantIndex = Window.ImportantIndex - 1;

                                        DropdownOutline.Name = "DropdownOutline"
                                        DropdownOutline.Parent = NewDropdown
                                        DropdownOutline.BackgroundColor3 = Library.Theme.LightContrast
                                        DropdownOutline.BorderColor3 = Library.Theme.Border
                                        DropdownOutline.Position = UDim2.new(0, 0, 0, 15)
                                        DropdownOutline.Size = UDim2.new(1, 0, 0, 16)
                                        
                                        DropdownInner.Name = "DropdownInner"
                                        DropdownInner.Parent = DropdownOutline
                                        DropdownInner.BackgroundColor3 = Library.Theme.MedianContrast
                                        DropdownInner.BorderColor3 = Library.Theme.Border
                                        DropdownInner.Position = UDim2.new(0, 2, 0, 2)
                                        DropdownInner.Size = UDim2.new(1, -4, 1, -4)
                                        DropdownInner.Text = "";

                                        DropdownInner.AutoButtonColor = false;

                                        DropdownFlag.Name = "DropdownFlag"
                                        DropdownFlag.Parent = DropdownInner
                                        DropdownFlag.BackgroundColor3 = Library.Theme.ElementOn
                                        DropdownFlag.BackgroundTransparency = 1.000
                                        DropdownFlag.BorderColor3 = Library.Theme.Border
                                        DropdownFlag.BorderSizePixel = 0
                                        DropdownFlag.Size = UDim2.new(1, 0, 1, 0)
                                        DropdownFlag.FontFace = Library.MenuFont
                                        DropdownFlag.Text = "";
                                        DropdownFlag.TextColor3 = Library.Theme.ElementOn
                                        DropdownFlag.TextSize = Library.TextSize
                                        
                                        DropdownStatus.Name = "DropdownStatus"
                                        DropdownStatus.Parent = DropdownInner
                                        DropdownStatus.BackgroundColor3 = Library.Theme.ElementOn
                                        DropdownStatus.BackgroundTransparency = 1.000
                                        DropdownStatus.BorderColor3 = Library.Theme.Border
                                        DropdownStatus.BorderSizePixel = 0
                                        DropdownStatus.Position = UDim2.new(0.929292917, 0, -0.166666672, 0)
                                        DropdownStatus.Size = UDim2.new(0, 14, 0, 14)
                                        DropdownStatus.FontFace = Library.MenuFont
                                        DropdownStatus.Text = "+"
                                        DropdownStatus.TextColor3 = Library.Theme.ElementOn
                                        DropdownStatus.TextSize = Library.TextSize
                                        
                                        ContainerOutline.Name = "ContainerOutline"
                                        ContainerOutline.Parent = DropdownInner
                                        ContainerOutline.BackgroundColor3 = Library.Theme.LightContrast
                                        ContainerOutline.BorderColor3 = Library.Theme.Border
                                        ContainerOutline.Position = UDim2.new(0, -2, 1, 4);
                                        ContainerOutline.ClipsDescendants = true;
                                        ContainerOutline.Size = UDim2.new(1, 4, 0, 0);

                                        ContainerOutline.Visible = false
                                        
                                        Dropdown.Container = ContainerOutline;

                                        Container.Name = "Container"
                                        Container.Parent = ContainerOutline
                                        Container.BackgroundColor3 = Library.Theme.MedianContrast
                                        Container.BorderColor3 = Library.Theme.Border
                                        Container.Position = UDim2.new(0, 2, 0, 2)
                                        Container.Size = UDim2.new(1, -4, 1, -4)
                                        Container.Visible = true;

                                        ContainerLayout.Parent = Container
                                        ContainerLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                        
                                        DropdownTitle.Name = "DropdownTitle"
                                        DropdownTitle.Parent = NewDropdown
                                        DropdownTitle.BackgroundColor3 = Library.Theme.ElementOn
                                        DropdownTitle.BackgroundTransparency = 1.000
                                        DropdownTitle.BorderColor3 = Library.Theme.Border
                                        DropdownTitle.BorderSizePixel = 0
                                        DropdownTitle.Position = UDim2.new(0.00990098994, 0, 0, 0)
                                        DropdownTitle.Size = UDim2.new(0.990099013, 0, 0, 14)
                                        DropdownTitle.FontFace = Library.MenuFont
                                        DropdownTitle.Text = Data.Name;
                                        DropdownTitle.TextColor3 = Library.Theme.ElementOn
                                        DropdownTitle.TextSize = Library.TextSize
                                        DropdownTitle.TextXAlignment = Enum.TextXAlignment.Left
                                        DropdownTitle.TextYAlignment = Enum.TextYAlignment.Top
                                    end;

                                    do --// Dropdown functions 

                                        function Dropdown:Toggle()
                                            Dropdown.IsOpen = not Dropdown.IsOpen; 
                                            local SizeToTween;

                                            if Dropdown.IsOpen then 
                                                Dropdown.Container.Visible = true;
                                            end;

                                            if Dropdown.Max ~= 1 then 
                                                SizeToTween = UDim2.new(1, 4, 0, (14 * Dropdown.Max) + 4);
                                            else 
                                                SizeToTween = UDim2.new(1, 4, 0, 14);
                                            end;

                                            if Dropdown.IsOpen then 
                                                if Library.CurrentDropdown then 
                                                    Library.CurrentDropdown.Container.Visible = false;
                                                    Library.CurrentDropdown.Container.Size = UDim2.new(1, 4, 0, 0)
                                                    Library.CurrentDropdown.IsOpen = false;
                                                end;
                                                Library.CurrentDropdown = Dropdown;

                                                Library:Tween(Dropdown.Container, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = SizeToTween});
                                            else
                                                Library.CurrentDropdown = nil;
                                                Library:Tween(Dropdown.Container, TweenInfo.new(0.2, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = UDim2.new(1, 4, 0, 0)});
                                                task.wait(0.2);
                                                Dropdown.Container.Visible = false;
                                            end;
                                        end;

                                        function Dropdown:Update()
                                            --if Dropdown.Max ~= 1 then 
                                            --    ContainerOutline.Size = UDim2.new(1, 4, 0, (14 * Dropdown.Max) + 4);
                                            --else 
                                            --    ContainerOutline.Size = UDim2.new(1, 4, 0, 14);
                                            --end;
                                        end;
                                        
                                        DropdownInner.MouseEnter:Connect(function()
                                            Library:Tween(DropdownOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.Accent});
                                        end);
                                        
                                        DropdownInner.MouseLeave:Connect(function()
                                            Library:Tween(DropdownOutline, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {BackgroundColor3 = Library.Theme.LightContrast});
                                        end);

                                        DropdownInner.MouseButton1Down:Connect(function()
                                            Dropdown:Toggle();
                                        end);
                                        
                                        function Dropdown:Set(Value)
                                            Dropdown.Value = {};
                                            DropdownFlag.Text = "";

                                            for Index, Value in next, Dropdown.Options do 
                                                Dropdown.Options[Index].IsSelected = false; 
                                                Dropdown.Options[Index].Selector.Visible = false; 
                                                Library:Tween(Dropdown.Options[Index].Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                            end;

                                            if type(Value) == "table" then 
                                                for Index, Value in next, Value do 
                                                    DropdownFlag.Text = DropdownFlag.Text .. Value..", "
                                                end;
                                                DropdownFlag.Text = DropdownFlag.Text:sub(1, -3);
                                                local Split = DropdownFlag.Text:split();
                                                
                                                if DropdownFlag.TextBounds.X > (DropdownFlag.AbsoluteSize.X - 10) then 
                                                    DropdownFlag.Text = DropdownFlag.Text:sub(1, 17) .. "...";
                                                end;
                
                                            end;
                
                                            for Index, Value in next, Value do
                                                if Dropdown.Options[Value] then
                                                    table.insert(Dropdown.Value, Value)
                                                    Dropdown.Options[Value].Selector.Visible = true;
                                                    Library:Tween(Dropdown.Options[Value].Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                                    Dropdown.Options[Value].IsSelected = true;
                                                end;
                                            end;

                                            --[[local TempTable = {};
                                            for Index, Value in next, Dropdown.Value do 
                                                TempTable[Value] = Value;
                                            end;

                                            for I, V in next, Dropdown.Options do 
                                                if not TempTable[V] then
                                                    Dropdown.Options[I].IsSelected = false;
                                                    Dropdown.Options[I].Selector.Visible = false; 
                                                    Dropdown.Options[I].Button.TextColor3 = Library.Theme.ElementOff;
                                                end;
                                            end;

                                            for Index, Value in next, Dropdown.Options do 
                                                warn(Index, Value);
                                            end;]]
                                            if Dropdown.Callback then pcall(Dropdown.Callback); end;
                                        end;

                                        function Dropdown:AddOption(Name)
                                            local NewOption = Instance.new("TextButton")
                                            local Frame = Instance.new("Frame")

                                            local Option = {
                                                Name = Name;
                                                IsSelected = false;
                                                Selector = Frame;
                                                Button = NewOption;
                                            };

                                            NewOption.Name = "NewOption"
                                            NewOption.Parent = Container
                                            NewOption.BackgroundColor3 = Library.Theme.ElementOff
                                            NewOption.BackgroundTransparency = 1.000
                                            NewOption.BorderColor3 = Library.Theme.Border
                                            NewOption.BorderSizePixel = 0
                                            NewOption.Size = UDim2.new(1, 0, 0, 14)
                                            NewOption.FontFace = Library.MenuFont
                                            NewOption.Text = Name;
                                            NewOption.TextColor3 = Library.Theme.ElementOff;
                                            NewOption.TextSize = Library.TextSize
                                            
                                            Frame.Parent = NewOption
                                            Frame.BackgroundColor3 = Library.Theme.Accent
                                            Frame.BorderColor3 = Library.Theme.Border
                                            Frame.BorderSizePixel = 0
                                            Frame.Size = UDim2.new(0, 2, 1, 0);
                                            Frame.Visible = false;

                                            NewOption.MouseButton1Down:Connect(function()
                                                Option.IsSelected = not Option.IsSelected;
                                                if Option.IsSelected then
                                                    Library:Tween(NewOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                                    Frame.Visible = true;
                                                    task.spawn(function()
                                                        Dropdown.Value[#Dropdown.Value+1] = Option.Name
                                                        Dropdown:Set(Dropdown.Value);
                                                    end);
                                                else
                                                    task.spawn(function()
                                                        for Index, Value in next, Dropdown.Value do 
                                                            if Value == Option.Name then 
                                                                Dropdown.Value[Index] = nil;
                                                            end;
                                                        end;
                
                                                        Dropdown:Set(Dropdown.Value);
                                                    end);
                                                    Frame.Visible = false;
                                                    Library:Tween(NewOption, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                end;
                                            end);
                                            Dropdown.Options[Option.Name] = Option;

                                            return Option;
                                        end;

                                        function Dropdown:RemoveOption(Name)
                                            if Dropdown.Options[Name] then
                                                Dropdown.Options[Name].Button:Destroy();
                                                Dropdown.Options[Name] = nil;
                                            end;
                                        end;
                                    end;

                                    for Index, Value in next, Data.Options do 
                                        Dropdown:AddOption(Value);
                                    end;

                                    if Dropdown.Default then
                                        Dropdown:Set(Dropdown.Default);
                                    else 
                                        Dropdown:Set({Data.Options[1]});
                                    end;
                                    Section.Bounds = Section.Bounds + 37;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);

                                    Library.Flags[Data.Flag] = Dropdown;
                                    return Dropdown;
                                end;

                                function Section:List(Data)
                                    local List = {
                                        Options = {};
                                        Value = "";
                                        Name = Data.Name;
                                        Flag = Data.Flag;
                                        Callback = Data.Callback or function() end;
                                    };

                                    local Holder = Instance.new("Frame")
                                    local TextLabel = Instance.new("TextLabel")
                                    local MainOutline = Instance.new("Frame")
                                    local MainOutline2 = Instance.new("Frame")
                                    local ScrollingFrame = Instance.new("ScrollingFrame")
                                    local UIListLayout = Instance.new("UIListLayout")

                                    do --// Properties
                                        Holder.Name = "Holder"
                                        Holder.Parent = SectionInner
                                        Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        Holder.BackgroundTransparency = 1.000
                                        Holder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        Holder.BorderSizePixel = 0
                                        Holder.Position = UDim2.new(0, 2, 0, Section.Bounds)
                                        Holder.Size = UDim2.new(1, -4, 0, 100)

                                        TextLabel.Parent = Holder
                                        TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        TextLabel.BackgroundTransparency = 1.000
                                        TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        TextLabel.BorderSizePixel = 0
                                        TextLabel.Position = UDim2.new(0.00999999978, 0, 0, 0)
                                        TextLabel.Size = UDim2.new(0.899999976, 0, 0, 14)
                                        TextLabel.FontFace = Library.MenuFont
                                        TextLabel.Text = Data.Name
                                        TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                                        TextLabel.TextSize = Library.TextSize
                                        TextLabel.TextXAlignment = Enum.TextXAlignment.Left

                                        MainOutline.Name = "MainOutline"
                                        MainOutline.Parent = Holder
                                        MainOutline.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                                        MainOutline.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        MainOutline.Position = UDim2.new(0, 0, 0, 14)
                                        MainOutline.Size = UDim2.new(1, 0, 0, 100)

                                        MainOutline2.Name = "MainOutline2"
                                        MainOutline2.Parent = MainOutline
                                        MainOutline2.BackgroundColor3 = Library.Theme.MedianContrast;
                                        MainOutline2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        MainOutline2.Position = UDim2.new(0, 2, 0, 2)
                                        MainOutline2.Size = UDim2.new(1, -4, 1, -4)

                                        ScrollingFrame.Parent = MainOutline2
                                        ScrollingFrame.Active = true
                                        ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                        ScrollingFrame.BackgroundTransparency = 1.000
                                        ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                        ScrollingFrame.BorderSizePixel = 0
                                        ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
                                        ScrollingFrame.ScrollBarThickness = 3
                                        ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(34, 34, 34);
                                        ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y;
                                        UIListLayout.Parent = ScrollingFrame
                                        UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                    end;

                                    do --// Functions 
                                        function List:AddOption(Name)
                                            local OptionData = {
                                                Name = Name;
                                                IsSelected = false;
                                            };

                                            local Option = Instance.new("TextButton");
                                            OptionData.Button = Option;
                                            Option.Name = "Option"
                                            Option.Parent = ScrollingFrame
                                            Option.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            Option.BackgroundTransparency = 1.000
                                            Option.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            Option.BorderSizePixel = 0
                                            Option.Size = UDim2.new(1, 0, 0, 14)
                                            Option.AutoButtonColor = false
                                            Option.FontFace = Library.MenuFont;
                                            Option.TextColor3 = Library.Theme.ElementOff
                                            Option.TextSize = Library.TextSize
                                            Option.Text = OptionData.Name;

                                            Option.MouseButton1Down:Connect(function()
                                                OptionData.IsSelected = not OptionData.IsSelected

                                                for Index, Value in next, List.Options do 
                                                    if Value ~= OptionData then 
                                                        Value.IsSelected = false;
                                                        Library:Tween(Value.Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                    end;
                                                end;
                                                if OptionData.IsSelected then 
                                                    List:Set(OptionData.Name);
                                                else
                                                    Library:Tween(Option, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                end;
                                            end);

                                            List.Options[OptionData.Name] = OptionData
                                        end;

                                        function List:RemoveOption(Name)
                                            if List.Options[Name] then
                                                List.Options[Name].Button:Destroy();
                                                List.Options[Name] = nil;
                                            end;
                                        end;

                                        function List:Set(Value)
                                            if List.Options[Value] then
                                                List.Value = Value;
                                                List.Options[Value].IsSelected = true;
                                                Library:Tween(List.Options[Value].Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                            end;

                                            for Index, Val in pairs(List.Options) do 
                                                if Val ~= List.Options[Value] then 
                                                    Val.IsSelected = false; 
                                                    Library:Tween(Val.Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                end;    
                                            end;

                                            if List.Callback then pcall(List.Callback); end;
                                        end;
                                    end;

                                    for Index, Value in next, Data.Options do 
                                        List:AddOption(Value);
                                    end;

                                    Library.Flags[Data.Flag] = List;
                                    Section.Bounds = Section.Bounds + 117;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);
                                    return List;
                                end;

                                function Section:Searchbar(Data)
                                    local List = {
                                        Options = {};
                                        Value = {};
                                        Name = Data.Name;
                                        Flag = Data.Flag;
                                        Callback = Data.Callback or function() end;
                                    };

                                    pcall(function()
                                        local Holder = Instance.new("Frame")
                                        local TextLabel = Instance.new("TextLabel")
                                        local MainOutline = Instance.new("Frame")
                                        local MainOutline2 = Instance.new("Frame")
                                        local ScrollingFrame = Instance.new("ScrollingFrame")
                                        local UIListLayout = Instance.new("UIListLayout")
                                        local SearchBoxOutline = Instance.new("Frame")
                                        local Searchbox = Instance.new("TextBox");
                                    
                                        do --// Properties
                                            Holder.Name = "Holder"
                                            Holder.Parent = SectionInner
                                            Holder.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            Holder.BackgroundTransparency = 1.000
                                            Holder.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            Holder.BorderSizePixel = 0
                                            Holder.Position = UDim2.new(0, 2, 0, Section.Bounds)
                                            Holder.Size = UDim2.new(1, -4, 0, 100)

                                            SearchBoxOutline.Parent = Holder; 
                                            SearchBoxOutline.BackgroundColor3 = Library.Theme.LightContrast; 
                                            SearchBoxOutline.Size = UDim2.new(1, 0, 0, 14);
                                            SearchBoxOutline.Position = UDim2.new(0, 0, 0, 13);
                                            SearchBoxOutline.BorderColor3 = Library.Theme.Border; 
                                            SearchBoxOutline.BorderSizePixel = 1; 
                                            
                                            Searchbox.Name = "SetBox"
                                            Searchbox.Parent = SearchBoxOutline
                                            Searchbox.BackgroundColor3 = Library.Theme.MedianContrast
                                            Searchbox.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            Searchbox.Position = UDim2.new(0, 2, 0, 2)
                                            Searchbox.Size = UDim2.new(1, -4, 1, -4)
                                            Searchbox.FontFace = Library.MenuFont;
                                            Searchbox.TextYAlignment = Enum.TextYAlignment.Bottom
                                            Searchbox.Text = "";
                                            Searchbox.TextColor3 = Color3.fromRGB(255, 255, 255)
                                            Searchbox.TextSize = Library.TextSize

                                            TextLabel.Parent = Holder
                                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            TextLabel.BackgroundTransparency = 1.000
                                            TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            TextLabel.BorderSizePixel = 0
                                            TextLabel.Position = UDim2.new(0.00999999978, 0, 0, 0)
                                            TextLabel.Size = UDim2.new(0.899999976, 0, 0, 14)
                                            TextLabel.FontFace = Library.MenuFont
                                            TextLabel.Text = Data.Name
                                            TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                                            TextLabel.TextSize = Library.TextSize
                                            TextLabel.TextXAlignment = Enum.TextXAlignment.Left

                                            MainOutline.Name = "MainOutline"
                                            MainOutline.Parent = Holder
                                            MainOutline.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
                                            MainOutline.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            MainOutline.Position = UDim2.new(0, 0, 0, 28)
                                            MainOutline.Size = UDim2.new(1, 0, 0, 50)

                                            MainOutline2.Name = "MainOutline2"
                                            MainOutline2.Parent = MainOutline
                                            MainOutline2.BackgroundColor3 = Library.Theme.MedianContrast;
                                            MainOutline2.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            MainOutline2.Position = UDim2.new(0, 2, 0, 2)
                                            MainOutline2.Size = UDim2.new(1, -4, 1, -4)

                                            ScrollingFrame.Parent = MainOutline2
                                            ScrollingFrame.Active = true
                                            ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                            ScrollingFrame.BackgroundTransparency = 1.000
                                            ScrollingFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                            ScrollingFrame.BorderSizePixel = 0
                                            ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
                                            ScrollingFrame.ScrollBarThickness = 3
                                            ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(34, 34, 34);
                                            ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y;
                                            UIListLayout.Parent = ScrollingFrame
                                            UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
                                        end;

                                        do --// Functions 
                                            function List:BeginSearching()
                                                for Index, Value in next, ScrollingFrame:GetChildren() do 
                                                    if Value:IsA("GuiButton") then 
                                                        local Text = string.lower(Value.Text);
                                                        local Search = string.lower(Searchbox.Text);
                                                        if Searchbox.Text == "" then 
                                                            Value.Visible = true;
                                                        else 
                                                            if string.find(Text, Search) then 
                                                                Value.Visible = true; 
                                                            else 
                                                                Value.Visible = false;
                                                            end;    
                                                        end;
                                                    end;
                                                end;
                                            end;

                                            function List:AddOption(Name)
                                                local OptionData = {
                                                    Name = Name;
                                                    IsSelected = false;
                                                };

                                                local Option = Instance.new("TextButton");
                                                OptionData.Button = Option;
                                                Option.Name = "Option"
                                                Option.Parent = ScrollingFrame
                                                Option.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                                Option.BackgroundTransparency = 1.000
                                                Option.BorderColor3 = Color3.fromRGB(0, 0, 0)
                                                Option.BorderSizePixel = 0
                                                Option.Size = UDim2.new(1, 0, 0, 14)
                                                Option.AutoButtonColor = false
                                                Option.FontFace = Library.MenuFont;
                                                Option.TextColor3 = Library.Theme.ElementOff
                                                Option.TextSize = Library.TextSize
                                                Option.Text = OptionData.Name;
                                                
                                                Option.MouseButton1Down:Connect(function()
                                                    OptionData.IsSelected = not OptionData.IsSelected


                                                    if OptionData.IsSelected then 
                                                        task.spawn(function()
                                                            List.Value[#List.Value+1] = OptionData.Name
                                                            List:Set(List.Value);
                                                        end);
                                                    else
                                                        for Index, Value in next, List.Value do 
                                                            if Value == OptionData.Name then 
                                                                List.Value[Index] = nil;
                                                            end;
                                                        end;

                                                        Library:Tween(Option, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                    end;
                                                end);

                                                OptionData.Button = Option;

                                                List.Options[OptionData.Name] = OptionData
                                            end;

                                            function List:Set(Value)
                                                List.Value = {};
                                                for Index, Value in next, List.Options do 
                                                    List.Options[Index].IsSelected = false; 
                                                    Library:Tween(List.Options[Index].Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOff});
                                                end;
                    
                                                for Index, Value in next, Value do
                                                    if List.Options[Value] then
                                                        table.insert(List.Value, Value)
                                                        Library:Tween(List.Options[Value].Button, TweenInfo.new(0.1, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {TextColor3 = Library.Theme.ElementOn});
                                                        List.Options[Value].IsSelected = true;
                                                    end;
                                                end;
                                                if List.Callback then pcall(List.Callback); end;
                                            end;

                                            function List:RemoveOption(Name)
                                                if List.Options[Name] then
                                                    List.Options[Name].Button:Destroy();
                                                    List.Options[Name] = nil;
                                                end;
                                            end;

                                        end;

                                        do --// Searching 
                                            Searchbox:GetPropertyChangedSignal("Text"):Connect(function()
                                                List:BeginSearching();
                                            end);
                                        end;

                                        for Index, Value in next, Data.Options do 
                                            List:AddOption(Value);
                                        end;
                                    end);

                                    Library.Flags[Data.Flag] = List;
                                    Section.Bounds = Section.Bounds + 84;
                                    SectionBorder.Size = UDim2.new(1, 0, 0, Section.Bounds);
                                    return List;
                                end;
 
                            end;
                            Window.Tabs[Tab.Name].Sections[Data.Name] = Section
                            return Section
                        end;

                        Window.Tabs[Tab.Name] = Tab;
                        Window:UpdateTabs();
                        return Tab;
                    end;

                    function Window:Tooltip(Data)
                        local Tooltip = {
                            Text = Data.Text; 
                            Parent = Data.Parent;
                            PhysicalParent = nil;
                            Frame = nil;
                            IsIn = false;
                        };

                        local Parent = Tooltip.Parent;
                        Tooltip.PhysicalParent = Parent.Frame;

                        local Outline_Tip = Instance.new("Frame");
                        local Inner_Tip = Instance.new("Frame", Outline_Tip);
                        local New_Text = Instance.new("TextLabel", Inner_Tip);

                        local Frame = Tooltip.PhysicalParent;
                        Tooltip.Frame = Outline_Tip;

                        do --// Properties
                            Outline_Tip.Parent = WindowBorder;
                            Outline_Tip.Name = "Tooltip - "..Data.Text;
                            Outline_Tip.BackgroundColor3 = Library.Theme.LightContrast;
                            Outline_Tip.ZIndex = 1001;
                            Outline_Tip.BorderSizePixel = 1;
                            Outline_Tip.BorderColor3 = Library.Theme.Border;
                            Outline_Tip.Visible = true;
                            Outline_Tip.BackgroundTransparency = 1;
                            Outline_Tip.Size = UDim2.new(1, 0, 0, 12)
                            Outline_Tip.Position = UDim2.new(0, 0, 1, 3);

                            Inner_Tip.BackgroundColor3 = Library.Theme.DarkContrast;
                            Inner_Tip.BorderSizePixel = 1;
                            Inner_Tip.Size = UDim2.new(1, -4, 1, -4);
                            Inner_Tip.Position = UDim2.new(0, 2, 0, 2);
                            Inner_Tip.BorderColor3 = Library.Theme.Border;
                            Inner_Tip.BackgroundTransparency = 1;

                            New_Text.BackgroundTransparency = 1;
                            New_Text.TextTransparency = 1;
                            New_Text.FontFace  = Library.MenuFont;
                            New_Text.TextSize = Library.TextSize;
                            New_Text.TextColor3 = Color3.new(1,1,1);
                            New_Text.Size = UDim2.new(1, 0, 1, 0);
                            New_Text.Name = "New_TextTip"
                        end;

                        do --// Functions

                            Frame.MouseEnter:Connect(function()
                                Tooltip.IsIn = true;
                                Library:Tween(Inner_Tip, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 0});
                                Library:Tween(Outline_Tip, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {BackgroundTransparency = 0});
                                Library:Tween(New_Text, TweenInfo.new(0.3, Enum.EasingStyle.Linear, Enum.EasingDirection.In), {TextTransparency = 0});
                            end);

                            Frame.MouseLeave:Connect(function()
                                Tooltip.IsIn = false;
                                Library:Tween(Inner_Tip, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                                Library:Tween(Outline_Tip, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1});
                                local TextTween = Library:Tween(New_Text, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {TextTransparency = 1});
                            end);

                        end;
                        New_Text.Text = Tooltip.Text;
                    end;
                end;

                Window.Main = LibraryScreenGui;
                
                Library.Windows[#Library.Windows+1] = Window;
                return Window
            end;

            function Library:AddSettingsTab(Window)
                local SettingsTab = Window:NewTab({Name = "Settings"}); 

                do  --// Settings sections
                    local MenuSection = SettingsTab:NewSection({Name = "Menu", Side = "Left"}); do 

                        MenuSection:Keybind({Name = "Open / Close", Mode = "Toggle", Flag = "Open/Close", Default = Enum.KeyCode.LeftBracket, Callback = function()
                            Library:ToggleMenu()
                        end});

                        MenuSection:Toggle({Name = "Blur background when open", Flag = "Blurbackground"});

                        MenuSection:Toggle({Name = "Watermark", Flag = "ShowWatermark", Callback = function() 
                            Library.WatermarkOutline.Visible = Library.Flags.ShowWatermark.Value;
                        end});

                        MenuSection:Slider({Suffix = "%", Name = "Watermark Offset X", Flag = "WatermarkX", Default = 7, Min = 0, Max = 100, Callback = function()
                            Library.WatermarkOutline.Position = UDim2.new(Library.Flags.WatermarkX.Value / 100, 0, Library.Flags.WatermarkY.Value / 100, 0)
                        end});
        
                        MenuSection:Slider({Suffix = "%", Name = "Watermark Offset Y", Flag = "WatermarkY", Default = 0, Min = 0, Max = 100, Callback = function()
                            Library.WatermarkOutline.Position = UDim2.new(Library.Flags.WatermarkX.Value / 100, 0, Library.Flags.WatermarkY.Value / 100, 0)
                        end});

                        MenuSection:Toggle({Name = "Keybinds", Flag = "ShowKeybinds", Callback = function()
                            Library.KeybindsGUI.Visible = Library.Flags.ShowKeybinds.Value;
                        end})

                        MenuSection:Slider({Suffix = "%", Name = "Keybinds Offset X", Flag = "KeybindX", Default = 2, Min = 0, Max = 100, Callback = function()
                            Library.KeybindsGUI.Position = UDim2.new(Library.Flags.KeybindX.Value / 100, 0, Library.Flags.KeybindY.Value / 100, 0)
                        end});
        
                        MenuSection:Slider({Suffix = "%", Name = "Keybinds Offset Y", Flag = "KeybindY", Default = 46, Min = 0, Max = 100, Callback = function()
                            Library.KeybindsGUI.Position = UDim2.new(Library.Flags.KeybindX.Value / 100, 0, Library.Flags.KeybindY.Value / 100, 0)
                        end});

                        MenuSection:Button({Name = "Revert to default size", Callback = function()
                            Window.Border.Size = Window.DefaultSize;
                        end})
                    end;

                    local GameSection = SettingsTab:NewSection({Name = "Game", Side = "Left"}); do
                        GameSection:Toggle({Flag = "Telemetry", Name = "Broadcast status (TELEMETRY)", Risky = true, Callback = function()
                            if Library.Flags.Telemetry.Value then 
                                Websocket:Initialize()
                            end;
                        end})
                        GameSection:Slider({Default = 60, Flag = "FPSCAP", Name = "FPS Cap", Min = 0, Max = 400, Callback = function()
                            setfpscap(Library.Flags.FPSCAP.Value)
                        end})
                        GameSection:Button({Name = "Rejoin", Callback = function()
                            TeleportService:Teleport(game.PlaceId);
                        end});
                    end;

                    local ConfigDropdown;

                    local function RefreshConfigs()
                        if listfiles then 
                            for Index, Value in next, ConfigDropdown.Options do
                                ConfigDropdown:RemoveOption(Index)
                            end;
                            
                            local List = {};
                            for Index, File in ipairs(listfiles("Ethereal/Configs")) do
                                local FileName = File:gsub("Ethereal/Configs\\", ""):gsub(".txt", "")
                                List[#List + 1] = FileName;
                            end;
        
                            for Index, Value in next, List do
                                ConfigDropdown:AddOption(Value);
                            end;

                            --ConfigDropdown:Update();
                        else 
                            for Index, Value in next, ConfigDropdown.Options do
                                ConfigDropdown:RemoveOption(Index)
                            end;
                            ConfigDropdown:AddOption("Legit");
                            ConfigDropdown:AddOption("Rage");
                            ConfigDropdown:AddOption("Semirage");
                            ConfigDropdown:AddOption("Semilegit");
                            --ConfigDropdown:Update();
                        end;
                    end;

                    local ConfigSection = SettingsTab:NewSection({Name = "Config", Side = "Right"}); do 
                        ConfigDropdown = ConfigSection:List({Name = "Selected config", Options = {""}, Flag = "SelectedConfig"});

                        Library.WatermarkText.Text = ("Ethereal | %s | %s | Config - %s"):format(GameName, LRM_LinkedDiscordID, Library.Config);
                        ConfigSection:Button({Name = "Load selected config", Callback = function()
                            Library.Config = Library.Flags.SelectedConfig.Value;
                            Library.WatermarkText.Text = ("Ethereal | %s | %s | Config - %s"):format(GameName, LRM_LinkedDiscordID, Library.Config);
                            Library:Notify("Loading config | Config name: ".. Library.Flags.SelectedConfig.Value, 3);
                            Library:LoadConfig(readfile("Ethereal/Configs/"..Library.Flags["SelectedConfig"].Value..".txt"));
                        end});
        
                        ConfigSection:Button({Name = "Save selected config", Callback = function()
                            Library:Notify("Saving config | Config name: ".. Library.Flags.SelectedConfig.Value, 3);
                            Library:SaveConfig(Library.Flags["SelectedConfig"].Value);
                        end})
                        ConfigSection:Button({Name = "Delete selected Config", Callback = function()
                            task.spawn(function()
                                Library:Notify("Deleting config | Config name: ".. Library.Flags.SelectedConfig.Value, 3);
                                Library:DeleteConfig(Library.Flags["SelectedConfig"].Value)
                                task.wait(0.2);
                                Library:Notify("Refreshing configs...");

                                RefreshConfigs()
                            end);
                        end});
                        ConfigSection:Button({Name = "Refresh configs", Callback = function()
                            task.spawn(function()
                                Library:Notify("Refreshing configs...");
                                RefreshConfigs()
                            end);
                        end});
    
        
                        --// Refreshing configs
                        do 
                        RefreshConfigs();
                        end;
                    end;

                    local CreateSection = SettingsTab:NewSection({Name = "Create", Side = "Right"}); do 
                        CreateSection:Textbox({Name = "New Config Name Here", Flag = "NewConfigName"});
                        CreateSection:Button({Name = "Create new config", Callback = function()
                            task.spawn(function()
                                Library:Notify("Creating config | Config name: ".. Library.Flags.NewConfigName.Value, 3)
                                Library:SaveConfig(Library.Flags["NewConfigName"].Value);
                                task.wait(0.3);
                                Library.WatermarkText.Text = ("Ethereal | %s | %s | Config - %s"):format(GameName, LRM_LinkedDiscordID, Library.Config);
                                RefreshConfigs()
                                Library:Notify("Created config! | Config name: ".. Library.Flags.NewConfigName.Value .. ", refreshing configs now!", 3);
                                
                            end);
                        end})
                    end;

                    local PluginSection = SettingsTab:NewSection({Name = "Plugins", Side = "Right"}); do 
                        local function RefreshPlugins()
                            local List = {};
                            for Index, Value in next, Library.Flags.SelectedPlugin.Options do
                                Library.Flags.SelectedPlugin:RemoveOption(Index)
                            end;
                            
                            if listfiles then 
                                for Index, File in ipairs(listfiles("Ethereal/Plugins")) do
                                    local FileName = File:gsub("Ethereal/Plugins\\", ""):gsub(".lua", "")
                                    List[#List + 1] = FileName;
                                end;
            
                                for Index, Value in next, List do
                                    Library.Flags.SelectedPlugin:AddOption(Value);
                                end;
                            end;
    
                            Library.Flags.SelectedPlugin.Max = #List;
                            Library.Flags.SelectedPlugin:Update()
                        end;
                        PluginSection:Dropdown({Name = "Selected plugin", Flag = "SelectedPlugin", Max = 3, Options = {""}});
                        PluginSection:Button({Name = "Load plugin", Callback = function()
                            Library:Notify("Loading plugin | Plugin name: "..Library.Flags.SelectedPlugin.Value, 2);
                            loadfile("Ethereal/Plugins/"..Library.Flags.SelectedPlugin.Value..".lua")();
                        end})
                        PluginSection:Button({Name = "Refresh plugins", Callback = function()
                            Library:Notify("Refreshing plugins...", 2);
                            RefreshPlugins()
                        end})
                        RefreshPlugins()
                    end;

                    if not LPH_OBFUSCATED then 
                        local Test = SettingsTab:NewSection({Name = "Studio Testing", Side = "Left"}); do 
                            Test:Searchbar({Options = {"762x39", "762x39AP", "Altyn", "6b43", "DV2", "AKM", "6b12", "Makarov", "APS", "Nuts", "Oil can"}, Max = 3, Name = "Searchbar", Flag = "Searchbar"})
                        end;
                    end;
                end;
            end;

            function Library:AddStandardWorldTab(VisualsTab)
                local WorldTab = VisualsTab:Add({Name = "World"}); 
                        
                do  --// Visuals sections
                    local LightingSection = WorldTab:NewSection({Name = "Lighting", Side = "Left"}); do 
                        LightingSection:Toggle({Name = "Ambient", Flag = "AllowAmbient"}):Colorpicker({Name = "Ambience", Flag = "Ambience"});
                        LightingSection:Toggle({Name = "ClockTime", Flag = "AllowTime"});
                        LightingSection:Slider({Min = 0, Max = 14, Name = "Time", Flag = "Time"});
                    end;

                    local SkySection = WorldTab:NewSection({Name = "Skybox", Side = "Right"}); do 
                        local Skys = {};
                        local TotalSkys = 0;
                        for Index, Value in pairs(Skyboxes) do 
                            Skys[Index] = Index;
                            TotalSkys = TotalSkys + 1
                        end;

                        Library.SkyDropdown = SkySection:Dropdown({Name = "Sky", Flag = "Sky", Max = TotalSkys, Options = Skys, Callback = function()
                            Visuals:SwitchSkybox(Library.Flags.Sky.Value);
                        end});
                    end;
                end;

                local TerrainSection = WorldTab:NewSection({Name = "Terrain", Side = "Left"}); do 

                    if GameName == "Project Delta" then 
                        TerrainSection:Toggle({Name = "Remove foliage", Flag = "RemoveFoliage", Callback = function()
                            if GameName == "Project Delta" then 
                                if Workspace:FindFirstChild("SpawnerZones") then 
                                    for Index, Value in next, Workspace.SpawnerZones.Foliage:GetDescendants() do 
                                        Visuals:CheckFoliage(Value);
                                    end;
                                end;
                            end;
                        end});
                    end;

                    TerrainSection:Toggle({Name = "Remove grass", Flag = "RemoveGrass", Callback = function()
                        sethiddenproperty(Workspace.Terrain, "Decoration", not Library.Flags.RemoveGrass.Value);
                    end});

                    for Index, Value in next, {"Grass", "LeafyGrass", "Ground", "Rock", "Sand"} do 
                        Properties.Terrain[Value] = Workspace.Terrain:GetMaterialColor(Enum.Material[Value]);
                        
                        TerrainSection:Toggle({Name = Value.." color", Flag = Value.."Enabled"}):Colorpicker({Name = Value .. " Color", Default = Properties.Terrain[Value], Flag = Value.."Color"})
                    end;
                end;

                local Weather = WorldTab:NewSection({Name = "Atmosphere", Side = "Right"}); do 
                    Weather:Toggle({Name = "Fog density", Flag = "FogDensity"});
                    Weather:Slider({Name = "Density amount", Flag = "FogDensityValue", Min = 0, Max = 1, AllowDecimals = 100})
                    
                    Weather:Toggle({Name = "Haze", Flag = "EnableHaze"});
                    Weather:Slider({Name = "Haze amount", Flag = "HazeValue", Min = 0, Max = 1, AllowDecimals = 100})
                
                    Weather:Toggle({Name = "Glare", Flag = "EnableGlare"});
                    Weather:Slider({Name = "Glare amount", Flag = "GlareValue", Min = 0, Max = 1, AllowDecimals = 100})
                    
                    Weather:Toggle({Name = "Haze color", Flag = "EnableFogColor"}):Colorpicker({Name = "Fog Color", Default = Library.Theme.Accent, Flag = "FogColor"});
                end;

                local Weather2 = WorldTab:NewSection({Name = "Clouds", Side = "Right"}); do 
                    Weather2:Toggle({Name = "Cloud density", Flag = "CloudDensity"});
                    Weather2:Slider({Name = "Density amount", Flag = "CloudDensityValue", Min = 0, Max = 1, AllowDecimals = 100})
        
                    Weather2:Toggle({Name = "Cloud color", Flag = "EnableCloudColor"}):Colorpicker({Name = "Cloud Color", Default = Library.Theme.Accent, Flag = "CloudColor"});
                end;

                return WorldTab;
            end;

            function Library:AddFontSection(Tab, Side)
                local FontSection = Tab:NewSection({Name = "Font", Side = Side});
                local Options = {"Menu", "Smallest Pixel"}
                FontSection:Dropdown({Name = "World ESP Font", Options = Options, Max = 2, Flag = "WorldFont"});
            end; 


            function Library:AddFOVSection(CombatTab)
                local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                    Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                        Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                    end});

                    Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                        Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                    end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                        Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                    end,})

                    Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                        if Library.Flags.FOVEffects.Value then 
                            Visuals.FOVGradient.Enabled = true;
                        else 
                            Visuals.FOVGradient.Enabled = false;
                            Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                        end;
                    end});

                    Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                    Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                    Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                        Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                    end});
                    local StyleOptions = {};
                    for Index, Value in next, EasingStyle do 
                        table.insert(StyleOptions, Index)
                    end

                    Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                    Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
        
                    Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                    Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                        OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                    end});
                end;
            end;

            function Library:AddPreview(ShowOn)
                local Preview = {
                    Elements = {Corner = {}},
                    Components = {},
                    BodyParts = {},
                };

                local Window = Library.Windows[1];
                local MainFrame = Window.MainFrame; 

                local ESPPreviewOutter = Instance.new("Frame")
                local ESPPreviewInner = Instance.new("Frame")
                local PreviewTitleOutter = Instance.new("TextLabel")
                local Previewtitle = Instance.new("TextLabel")
                local Character = Instance.new("Folder")
                local Head = Instance.new("Frame")
                local RightLeg = Instance.new("Frame")
                local LeftLeg = Instance.new("Frame")
                local RightArm = Instance.new("Frame")
                local Torso = Instance.new("Frame")
                local LeftArm = Instance.new("Frame")
                local Box = Instance.new("Frame")
                local BoxStroke = Instance.new("UIStroke")
                local NameText = Instance.new("TextLabel")
                local DistanceText = Instance.new("TextLabel")
                local WeaponText = Instance.new("TextLabel")
                local WeaponImage = Instance.new("ImageLabel")
                local Flags = Instance.new("TextLabel")
                local Healthbar = Instance.new("Frame")
                local Ammobar = Instance.new("Frame")
                local Healthtext = Instance.new("TextLabel")
                local InventoryText = Instance.new("TextLabel") 

                local HealthbarInvert = Instance.new("Frame");
                local AmmobarInvert = Instance.new("Frame");

                Preview.MainFrame = MainFrame;

                local Health = 100;
                local Ammo = 10; 
                local MaxAmmo = 10; 
                local MaxHealth = 100;
                local StartTime = tick();

                do --// Properties
                    do --/ Main 
                        ESPPreviewOutter.Name = "ESPPreviewOutter"
                        ESPPreviewOutter.Parent = MainFrame;
                        ESPPreviewOutter.BackgroundColor3 = Library.Theme.LightContrast
                        ESPPreviewOutter.BorderColor3 = Library.Theme.Border
                        
                        ESPPreviewOutter.Position = UDim2.new(1, 10, 0, 13)
                        ESPPreviewOutter.Size = UDim2.new(0, 264, 0, 381)

                        ESPPreviewInner.Name = "ESPPreviewInner"
                        ESPPreviewInner.Parent = ESPPreviewOutter
                        ESPPreviewInner.BackgroundColor3 = Library.Theme.DarkContrast
                        ESPPreviewInner.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        ESPPreviewInner.Position = UDim2.new(0, 2, 0, 2)
                        ESPPreviewInner.Size = UDim2.new(1, -4, 1, -4)

                        PreviewTitleOutter.Name = "PreviewTitleOutter"
                        PreviewTitleOutter.Parent = ESPPreviewInner
                        PreviewTitleOutter.BackgroundColor3 = Library.Theme.LightContrast
                        PreviewTitleOutter.BorderColor3 = Library.Theme.Border
                        PreviewTitleOutter.Position = UDim2.new(0, -2, 0, -15)
                        PreviewTitleOutter.Size = UDim2.new(1, 4, 0, 12)
                        PreviewTitleOutter.FontFace = Library.MenuFont
                        PreviewTitleOutter.Text = "Preview"
                        PreviewTitleOutter.TextColor3 = Color3.fromRGB(0, 0, 0)
                        PreviewTitleOutter.TextSize = Library.TextSize;

                        Previewtitle.Name = "Previewtitle"
                        Previewtitle.Parent = PreviewTitleOutter
                        Previewtitle.BackgroundColor3 = Library.Theme.DarkContrast
                        Previewtitle.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Previewtitle.Position = UDim2.new(0, 2, 0, 2)
                        Previewtitle.Size = UDim2.new(1, -4, 1, -4)
                        Previewtitle.FontFace = Library.MenuFont
                        Previewtitle.Text = "Visuals Preview"
                        Previewtitle.TextColor3 = Color3.fromRGB(255, 255, 255)
                        Previewtitle.TextSize = Library.TextSize;

                        Character.Name = "Character"
                        Character.Parent = ESPPreviewInner

                        Head.Name = "Head"
                        Head.Parent = Character
                        Head.AnchorPoint = Vector2.new(0.5, 0)
                        Head.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Head.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Head.BorderSizePixel = 0
                        Head.Position = UDim2.new(0.499702811, 0, 0.196660534, -1)
                        Head.Size = UDim2.new(0, 42, 0, 44)

                        RightLeg.Name = "RightLeg"
                        RightLeg.Parent = Character
                        RightLeg.AnchorPoint = Vector2.new(0.5, 0)
                        RightLeg.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        RightLeg.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        RightLeg.BorderSizePixel = 0
                        RightLeg.Position = UDim2.new(0.549000025, 3, 0.556999981, 1)
                        RightLeg.Size = UDim2.new(0, 30, 0, 92)

                        LeftLeg.Name = "LeftLeg"
                        LeftLeg.Parent = Character
                        LeftLeg.AnchorPoint = Vector2.new(0.5, 0)
                        LeftLeg.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        LeftLeg.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        LeftLeg.BorderSizePixel = 0
                        LeftLeg.Position = UDim2.new(0.43900001, 0, 0.556999981, 1)
                        LeftLeg.Size = UDim2.new(0, 30, 0, 92)

                        RightArm.Name = "RightArm"
                        RightArm.Parent = Character
                        RightArm.AnchorPoint = Vector2.new(0.5, 0)
                        RightArm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        RightArm.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        RightArm.BorderSizePixel = 0
                        RightArm.Position = UDim2.new(0.671864212, 0, 0.313197464, 0)
                        RightArm.Size = UDim2.new(0, 26, 0, 92)

                        Torso.Name = "Torso"
                        Torso.Parent = Character
                        Torso.AnchorPoint = Vector2.new(0.5, 0)
                        Torso.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Torso.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Torso.BorderSizePixel = 0
                        Torso.Position = UDim2.new(0.49935773, 0, 0.31028387, 1)
                        Torso.Size = UDim2.new(0, 62, 0, 92)

                        LeftArm.Name = "LeftArm"
                        LeftArm.Parent = Character
                        LeftArm.AnchorPoint = Vector2.new(0.5, 0)
                        LeftArm.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        LeftArm.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        LeftArm.BorderSizePixel = 0
                        LeftArm.Position = UDim2.new(0.324000001, 0, 0.312999994, 0)
                        LeftArm.Size = UDim2.new(0, 26, 0, 92)
                    end;

                    do --// ESP Elements
                        Box.Name = "Box"
                        Box.Parent = ESPPreviewInner
                        Box.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Box.BackgroundTransparency = 1.000
                        Box.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Box.BorderSizePixel = 0
                        Box.Position = UDim2.new(0.246212527, 0, 0.18302387, 0)
                        Box.Size = UDim2.new(0, 130, 0, 239)

                        BoxStroke.Parent = Box; 
                        BoxStroke.LineJoinMode = "Miter";
                        BoxStroke.ApplyStrokeMode = "Border";
                        BoxStroke.Color = Color3.fromRGB(255, 255, 255);
                        BoxStroke.Transparency = 0; 

                        NameText.Name = "NameText"
                        NameText.Parent = Box
                        NameText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        NameText.BackgroundTransparency = 1.000
                        NameText.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        NameText.BorderSizePixel = 0
                        NameText.Position = UDim2.new(0, 0, -0.079497911, 0)
                        NameText.Size = UDim2.new(0, 132, 0, 19)
                        NameText.FontFace = Library.MenuFont
                        NameText.Text = "DranghetaLurk"
                        NameText.TextColor3 = Color3.fromRGB(255, 255, 255)
                        NameText.TextSize = Library.TextSize;
                        NameText.Visible = false; 

                        DistanceText.Name = "DistanceText"
                        DistanceText.Parent = Box
                        DistanceText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        DistanceText.BackgroundTransparency = 1.000
                        DistanceText.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        DistanceText.BorderSizePixel = 0
                        DistanceText.Position = UDim2.new(-0.0075757578, 0, 1.02092052, 0)
                        DistanceText.Size = UDim2.new(0, 132, 0, 16)
                        DistanceText.FontFace = Library.MenuFont
                        DistanceText.Text = "100 meters"
                        DistanceText.TextColor3 = Color3.fromRGB(255, 255, 255)
                        DistanceText.TextSize = Library.TextSize;
                        DistanceText.Visible = false; 

                        WeaponText.Name = "WeaponText"
                        WeaponText.Parent = Box
                        WeaponText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        WeaponText.BackgroundTransparency = 1.000
                        WeaponText.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        WeaponText.BorderSizePixel = 0
                        WeaponText.Position = UDim2.new(-0.0075757578, 0, 1.06276155, 0)
                        WeaponText.Size = UDim2.new(0, 132, 0, 16)
                        WeaponText.FontFace = Library.MenuFont
                        WeaponText.Text = "M4A1-S"
                        WeaponText.TextColor3 = Color3.fromRGB(255, 255, 255)
                        WeaponText.TextSize = Library.TextSize
                        WeaponText.Visible = false; 


                        Healthtext.Name = "Healthtext"
                        Healthtext.Parent = Healthbar
                        Healthtext.Position = UDim2.new(1, -20, 0, 0);
                        Healthtext.Size = UDim2.new(0, 24, 0, 3);
                        Healthtext.TextXAlignment = Enum.TextXAlignment.Center;

                        Healthtext.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Healthtext.BackgroundTransparency = 1.000
                        Healthtext.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Healthtext.BorderSizePixel = 0

                        Healthtext.FontFace = Library.SmallFont
                        Healthtext.Text = "100"
                        Healthtext.TextColor3 = Color3.fromRGB(255, 255, 255)
                        Healthtext.TextSize = Library.TextSize;
                        Healthtext.Visible = false; 

                        InventoryText.Name = "InventoryText"
                        InventoryText.Parent = Box
                        InventoryText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        InventoryText.BackgroundTransparency = 1.000
                        InventoryText.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        InventoryText.BorderSizePixel = 0
                        InventoryText.Position = UDim2.new(-0.0075757578, 0, 1.06276155, 0)
                        InventoryText.Size = UDim2.new(0, 132, 0, 16)
                        InventoryText.FontFace = Library.MenuFont
                        InventoryText.Text = "[Bandages, Medkit, Knife]"
                        InventoryText.TextColor3 = Color3.fromRGB(255, 255, 255)
                        InventoryText.TextSize = Library.TextSize
                        InventoryText.Visible = false; 

                        WeaponImage.Name = "WeaponImage"
                        WeaponImage.Parent = Box
                        WeaponImage.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        WeaponImage.BackgroundTransparency = 1.000
                        WeaponImage.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        WeaponImage.BorderSizePixel = 0
                        WeaponImage.Size = UDim2.new(0, 40, 0, 16)
                        WeaponImage.Image = "rbxassetid://16600641613"
                        WeaponImage.ScaleType = Enum.ScaleType.Crop
                        WeaponImage.Position = UDim2.new(0.5, 0, 0, 0);
                        WeaponImage.AnchorPoint = Vector2.new(0.5, 0);
                        WeaponImage.Visible = false; 

                        Flags.Name = "Flags"
                        Flags.Parent = Box
                        Flags.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                        Flags.BackgroundTransparency = 1.000
                        Flags.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Flags.BorderSizePixel = 0
                        Flags.Position = UDim2.new(1.0454545, 0, -0.00418410031, 0)
                        Flags.Size = UDim2.new(0, 40, 0, 16)
                        Flags.FontFace = Library.SmallFont
                        Flags.Text = "VIS\nSCOPE\nCROUCH\nRELIC"
                        Flags.TextColor3 = Color3.fromRGB(255, 255, 255)
                        Flags.TextSize = Library.SmallSize;
                        Flags.TextXAlignment = Enum.TextXAlignment.Left
                        Flags.Visible = false; 

                        Healthbar.Name = "Healthbar"
                        Healthbar.Parent = Box
                        Healthbar.BackgroundColor3 = Color3.fromRGB(115, 255, 83)
                        Healthbar.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Healthbar.Position = UDim2.new(-0.0610000007, 0, 0, -1)
                        Healthbar.Size = UDim2.new(0, 1, 1, 2)
                        Healthbar.Visible = false; 

                        Ammobar.Name = "Ammobar"
                        Ammobar.Parent = Box
                        Ammobar.BackgroundColor3 = Color3.fromRGB(48, 103, 255)
                        Ammobar.BorderColor3 = Color3.fromRGB(0, 0, 0)
                        Ammobar.BorderSizePixel = 0
                        Ammobar.Position = UDim2.new(0, -1, 1, 5)
                        Ammobar.Size = UDim2.new(1, 2, 0, 1)
                        Ammobar.Visible = false;

                        HealthbarInvert.Parent = Healthbar;
                        HealthbarInvert.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
                        HealthbarInvert.BorderColor3 = Color3.fromRGB(0, 0, 0);
                        HealthbarInvert.BorderSizePixel = 0;
                        HealthbarInvert.Size = UDim2.new(1, 0, 0, 0);

                        AmmobarInvert.Parent = Ammobar;
                        AmmobarInvert.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
                        AmmobarInvert.BorderColor3 = Color3.fromRGB(0, 0, 0);
                        AmmobarInvert.BorderSizePixel = 0;
                        AmmobarInvert.Size = UDim2.new(1, 0, 0, 0);
                    end;

                    do --// Corner 
                        do --// Corners creation
                            local Corners = Preview.Elements.Corner
                            do --// Inline
                                Corners[1] = Instance.new("Frame");
                                Corners[1].Parent = Box
                                Corners[1].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[1].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[1].BorderSizePixel = 0
                                Corners[1].Size = UDim2.new(0.3, 0, 0, 1)
                                Corners[1].Position = UDim2.new(0, 0, 0, -2);

                                Corners[2] = Instance.new("Frame");
                                Corners[2].Parent = Box
                                Corners[2].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[2].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[2].BorderSizePixel = 0
                                Corners[2].Size = UDim2.new(0, 1, 0.3, 0)
                                Corners[2].Position = UDim2.new(0, 0, 0, -2)

                                Corners[3] = Instance.new("Frame");
                                Corners[3].Parent = Box
                                Corners[3].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[3].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[3].BorderSizePixel = 0
                                Corners[3].Position = UDim2.new(0.7, -1, 0, -2)
                                Corners[3].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[4] = Instance.new("Frame");
                                Corners[4].Parent = Box
                                Corners[4].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[4].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[4].BorderSizePixel = 0
                                Corners[4].Position = UDim2.new(1, -1, 0, -2)
                                Corners[4].Size = UDim2.new(0, 1, 0.3, 1)

                                Corners[5] = Instance.new("Frame");
                                Corners[5].Parent = Box
                                Corners[5].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[5].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[5].BorderSizePixel = 0
                                Corners[5].Position = UDim2.new(0, 0, 0.7, 1)
                                Corners[5].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[6] = Instance.new("Frame");
                                Corners[6].Parent = Box
                                Corners[6].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[6].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[6].BorderSizePixel = 0
                                Corners[6].Position = UDim2.new(0, 0, 1, 1)
                                Corners[6].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[7] = Instance.new("Frame");
                                Corners[7].Parent = Box
                                Corners[7].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[7].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[7].BorderSizePixel = 0
                                Corners[7].Position = UDim2.new(1, -1, 0.7, 1)
                                Corners[7].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[8] = Instance.new("Frame");
                                Corners[8].Parent = Box
                                Corners[8].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[8].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[8].BorderSizePixel = 0
                                Corners[8].Position = UDim2.new(0.7, 0, 1, 1)
                                Corners[8].Size = UDim2.new(0.3, 0, 0, 1);
                            end;

                            do --// Outline
                                Corners[9] = Instance.new("Frame");
                                Corners[9].Parent = Box
                                Corners[9].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[9].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[9].BorderSizePixel = 1
                                Corners[9].Size = UDim2.new(0.3, 0, 0, 1)
                                Corners[9].Position = UDim2.new(0, 0, 0, -2)

                                Corners[10] = Instance.new("Frame");
                                Corners[10].Parent = Box
                                Corners[10].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[10].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[10].BorderSizePixel = 1
                                Corners[10].Size = UDim2.new(0, 1, 0.3, 0)
                                Corners[10].Position = UDim2.new(0, 0, 0, -2);

                                Corners[11] = Instance.new("Frame");
                                Corners[11].Parent = Box
                                Corners[11].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[11].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[11].BorderSizePixel = 1
                                Corners[11].Position = UDim2.new(0.7, -1, 0, -2)
                                Corners[11].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[12] = Instance.new("Frame");
                                Corners[12].Parent = Box
                                Corners[12].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[12].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[12].BorderSizePixel = 1
                                Corners[12].Position = UDim2.new(1, -1, 0, -2)
                                Corners[12].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[13] = Instance.new("Frame");
                                Corners[13].Parent = Box
                                Corners[13].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[13].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[13].BorderSizePixel = 1
                                Corners[13].Position = UDim2.new(0, 0, 0.7, 1)
                                Corners[13].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[14] = Instance.new("Frame");
                                Corners[14].Parent = Box
                                Corners[14].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[14].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[14].BorderSizePixel = 1
                                Corners[14].Position = UDim2.new(0, 0, 1, 1)
                                Corners[14].Size = UDim2.new(0.3, 0, 0, 1)

                                Corners[15] = Instance.new("Frame");
                                Corners[15].Parent = Box
                                Corners[15].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[15].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[15].BorderSizePixel = 1
                                Corners[15].Position = UDim2.new(1, -1, 0.7, 1)
                                Corners[15].Size = UDim2.new(0, 1, 0.3, 0)

                                Corners[16] = Instance.new("Frame");
                                Corners[16].Parent = Box
                                Corners[16].BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                Corners[16].BorderColor3 = Color3.fromRGB(0, 0, 0)
                                Corners[16].BorderSizePixel = 1
                                Corners[16].Position = UDim2.new(0.7, 0, 1, 1)
                                Corners[16].Size = UDim2.new(0.3, 0, 0, 1);
                            end;
                        end;

                    end;

                    do --// Add components to table
                        Preview.Components.Outter = ESPPreviewOutter 
                        Preview.Components.Innner = ESPPreviewInner
                        Preview.Components.TitleOutter = PreviewTitleOutter 
                        Preview.Components.Title = Previewtitle 

                        Preview.BodyParts.Head = Head; 
                        Preview.BodyParts.RightLeg = RightLeg; 
                        Preview.BodyParts.RightArm = RightArm; 
                        Preview.BodyParts.LeftLeg = LeftLeg; 
                        Preview.BodyParts.LeftArm = LeftArm; 
                        Preview.BodyParts.Torso = Torso; 

                        Preview.Elements.RegularStroke = BoxStroke
                        Preview.Elements.Box = Box;
                        Preview.Elements.Username = NameText; 
                        Preview.Elements.Distance = DistanceText; 
                        Preview.Elements.Flags = Flags;
                        Preview.Elements.WeaponImage = WeaponImage;
                        Preview.Elements.Weapon = WeaponText; 
                        Preview.Elements.Healthbar = Healthbar;
                        Preview.Elements.HealthValue = Healthtext;
                        Preview.Elements.Ammobar = Ammobar; 
                        Preview.Elements.Inventory = InventoryText;
                        Preview.Elements.AmmobarInvert = AmmobarInvert;
                        Preview.Elements.HealthbarInvert = HealthbarInvert;
                    end;
                end;

                do --// Functions 
                    function Preview:Update()
                        if Library.Windows[1].CurrentTab == ShowOn then
                            ESPPreviewOutter.Visible = true;
                            local ElapsedTime = tick() - StartTime

                            Health = MaxHealth * (1 + math.sin(ElapsedTime)) / 2
                            Ammo = MaxAmmo * (1 + math.sin(ElapsedTime * 2)) / 2

                            local Components = self.Elements 
                            local BottomOffset = UDim2.new(0, 0, 1, 3);
                            local TopOffset = UDim2.new(0, 0, 0, -20);
                            local LeftOffset = UDim2.new(0, -6, 0, -2);
                            local RightOffset = UDim2.new(1, 6, 0, -2);

                            local BottomBounds = 0;
                            local TopBounds = 0;
                            local LeftBounds = 0;
                            local RightBounds = 0;

                            do --// Boxes
                                local Corners = Components.Corner;
                                if Library.Flags.ESPBox and Library.Flags.ESPBox.Value then
                                    Components.RegularStroke.Color = Library.Flags.BoxColor.Color;

                                    Components.RegularStroke.Color = Library.Flags.BoxColor.Color
                                

                                    do --// Corners
                                        if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value == "Corner" then 
                                            --// Inline
                                            do
                                                Corners[1].Visible = true;
                                                Corners[1].ZIndex = 3;
                                                Corners[1].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[2].Visible = true;
                                                Corners[2].ZIndex = 3;
                                                Corners[2].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[3].Visible = true;
                                                Corners[3].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[3].ZIndex = 3;
                                            
                                                Corners[4].Visible = true;
                                                Corners[4].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[4].ZIndex = 3;

                                                Corners[5].Visible = true;
                                                Corners[5].ZIndex = 3;
                                                Corners[5].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[6].Visible = true;
                                                Corners[6].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[6].ZIndex = 3;

                                                Corners[7].Visible = true;
                                                Corners[7].ZIndex = 3;
                                                Corners[7].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[8].Visible = true;
                                                Corners[8].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[8].ZIndex = 3;
                                            end;
                                        
                                            --// Outline
                                            do
                                                Corners[9].Visible = true;
                                                Corners[9].ZIndex = 2;
                                                Corners[9].BorderSizePixel = 1;
                                                Corners[9].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[10].Visible = true;
                                                Corners[10].ZIndex = 2;
                                                Corners[10].BorderSizePixel = 1;
                                                Corners[10].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[11].BorderSizePixel = 1;
                                                Corners[11].Visible = true;
                                                Corners[11].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[11].ZIndex = 2;
                                                
                                                Corners[12].BorderSizePixel = 1;
                                                Corners[12].Visible = true;
                                                Corners[12].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[12].ZIndex = 2;

                                                Corners[13].BorderSizePixel = 1;
                                                Corners[13].Visible = true;
                                                Corners[13].ZIndex = 2;
                                                Corners[13].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[14].BorderSizePixel = 1;
                                                Corners[14].Visible = true;
                                                Corners[14].BackgroundColor3 = Components.RegularStroke.Color;
                                                Corners[14].ZIndex = 2;

                                                Corners[15].BorderSizePixel = 1;
                                                Corners[15].Visible = true;
                                                Corners[15].ZIndex = 2;
                                                Corners[15].BackgroundColor3 = Components.RegularStroke.Color;

                                                Corners[16].BorderSizePixel = 1;
                                                Corners[16].Visible = true;
                                                Corners[16].BackgroundColor3 = Color3.fromRGB();
                                                Corners[16].ZIndex = 2;
                                            end;
                                        else
                                            if Corners[1].Visible then
                                                for Index = 1, 16 do 
                                                    Corners[Index].Visible = false;
                                                end;
                                            end;
                                        end;
                                    end;

                                    if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value == "Corner" then 
                                        Components.RegularStroke.Enabled = false;
                                    else 
                                        Components.RegularStroke.Enabled = true;
                                    end;
                                else
                                    if Corners[1].Visible then 
                                        for Index = 1, 16 do 
                                            Corners[Index].Visible = false;
                                        end;
                                    end;
                                    Components.RegularStroke.Enabled = false; 
                                end;
                            end;

                            do --// Healthbar
                                if Library.Flags.ESPHealthBar and Library.Flags.ESPHealthBar.Value then
                                    local LerpedColor = Library.Flags["HealthBarColorLower"].Color:lerp(Library.Flags["HealthBarColorHigher"].Color, Health / MaxHealth);

                                    if (Health < MaxHealth and Library.Flags.HealthWhenDamaged.Value or not Library.Flags.HealthWhenDamaged.Value) and Library.Flags.ESPHealth and Library.Flags.ESPHealth.Value and Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Left" and (Library.Flags.ESPAmmoBar and (((Library.Flags.ESPAmmoBar.Value == false and Library.Flags.AmmobarPosition.Value ~= "Left") or Library.Flags.ESPAmmoBar.Value == false) or Library.Flags.AmmobarPosition.Value ~= "Left") or not Library.Flags.ESPAmmoBar) then
                                        Components.HealthValue.Visible = true;
                                        Components.HealthValue.Text = tostring(math.floor(Health));
                                        Components.HealthValue.TextColor3 = Library.Flags.HealthColor.Color;
                                        Components.HealthValue.TextSize = Library.SmallSize;
                                        Components.HealthValue.FontFace = Library.SmallFont;
                                    else 
                                        Components.HealthValue.Visible = false;
                                    end;

                                    do --// Sizing for custom positions
                                        if Library.Flags.HealthbarPosition and (Library.Flags.HealthbarPosition.Value == "Bottom" or Library.Flags.HealthbarPosition.Value == "Top") then 
                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                Components.Healthbar.Size = UDim2.new(1, 4, 0, 1);
                                            else 
                                                Components.Healthbar.Size = UDim2.new(1, 0, 0, 1);
                                            end;
                                            Components.HealthbarInvert.Size = UDim2.new(0, (Components.Healthbar.AbsoluteSize.X * (1 - Health / MaxHealth)), 0, 1);
                                            Components.HealthbarInvert.AnchorPoint = Vector2.new(1, 0);
                                        else 
                                            Components.HealthbarInvert.AnchorPoint = Vector2.new(0, 0);
                                            Components.Healthbar.Size = UDim2.new(0, 1, 1, 4)
                                            Components.HealthbarInvert.Size = UDim2.new(1, 0, 0, (Components.Healthbar.AbsoluteSize.Y* (1 - Health / MaxHealth)));
                                        end;
                                    end;

                                    do --// Positioning for custom positions 
                                        if Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Bottom" then 
                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                Components.Healthbar.Position = BottomOffset + UDim2.new(0, -2, 0, BottomBounds + 2);
                                            else 
                                                Components.Healthbar.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds + 2);
                                            end;
                                            Components.HealthbarInvert.Position = UDim2.new(1, 0, 0, 0);
                                            BottomBounds = BottomBounds + 6;
                                        elseif Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Top" then 
                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                Components.Healthbar.Position = TopOffset + UDim2.new(0, -2, 0, 12 + 1 - TopBounds);
                                            else 
                                                Components.Healthbar.Position = TopOffset + UDim2.new(0, 0, 0, 12 + 1 - TopBounds);
                                            end;
                                            Components.HealthbarInvert.Position = UDim2.new(1, 0, 0, 0);
                                            TopBounds = TopBounds + 1 + 4;
                                        elseif Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Left" then
                                            Components.Healthbar.Position = LeftOffset + UDim2.new(0, LeftBounds, 0, 0);
                                            Components.HealthbarInvert.Position = UDim2.new(0, 0, 0, 0);
                                            LeftBounds = LeftBounds - (1 + 4);
                                        elseif Library.Flags.HealthbarPosition and Library.Flags.HealthbarPosition.Value == "Right" then
                                            Components.Healthbar.Position = RightOffset + UDim2.new(0, RightBounds, 0, 0);
                                            Components.HealthbarInvert.Position = UDim2.new(0, 0, 0, 0);
                                            RightBounds = RightBounds + 1 + 6;
                                        end;
                                    end;

                                    Components.Healthbar.BackgroundColor3 = LerpedColor;
                                    Components.Healthbar.Visible = true;
                                else 
                                    Components.Healthbar.Visible = false;
                                end;
                            end;

                            do --// Ammobar

                                if Library.Flags.ESPAmmoBar and Library.Flags.ESPAmmoBar.Value then
                                    local LerpedColor = Library.Flags["AmmobarColorLower"].Color:lerp(Library.Flags["AmmobarColorHigher"].Color, Ammo / MaxAmmo);
                                    do --// Sizing for custom positions
                                        if Library.Flags.AmmobarPosition and (Library.Flags.AmmobarPosition.Value == "Bottom" or Library.Flags.AmmobarPosition.Value == "Top") then
                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                Components.Ammobar.Size = UDim2.new(1, 4, 0, 1);
                                            else 
                                                Components.Ammobar.Size = UDim2.new(1, 0, 0, 1);
                                            end;
                                            Components.AmmobarInvert.Size = UDim2.new(0, (Components.Ammobar.AbsoluteSize.X * (1 - Ammo / MaxAmmo)), 0, 1);
                                            Components.AmmobarInvert.AnchorPoint = Vector2.new(1, 0);
                                        else 
                                            Components.AmmobarInvert.AnchorPoint = Vector2.new(0, 0);
                                            Components.Ammobar.Size = UDim2.new(0, 1, 1, 4)
                                            Components.AmmobarInvert.Size = UDim2.new(1, 0, 0, (Components.Ammobar.AbsoluteSize.Y* (1 - Ammo / MaxAmmo)));
                                        end;
                                    end;

                                    do --// Positioning for custom positions 
                                        if Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Bottom" then
                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                Components.Ammobar.Position = BottomOffset + UDim2.new(0, -2, 0, BottomBounds + 1 + 2);
                                                Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                            else 
                                                Components.Ammobar.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds + 1 + 2);
                                                Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                            end;
                                            BottomBounds = BottomBounds + 1 + 6;
                                        elseif Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Top" then 

                                            if Library.Flags.BoxStyle and Library.Flags.BoxStyle.Value ~= "Corner" then 
                                                Components.Ammobar.Position = TopOffset + UDim2.new(0, -2, 0, 12 + 1 - TopBounds);
                                                Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                            else 
                                                Components.Ammobar.Position = TopOffset + UDim2.new(0, 0, 0, 12 + 1 - TopBounds);
                                                Components.AmmobarInvert.Position = UDim2.new(1, 0, 0, 0);
                                            end;
                                            TopBounds = TopBounds + 1 + 4;
                                        elseif Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Left" then
                                            Components.AmmobarInvert.Position = UDim2.new(0, 0, 0, 0);
                                            Components.Ammobar.Position = LeftOffset + UDim2.new(0, LeftBounds, 0, 0);
                                            LeftBounds = LeftBounds - (1 + 6);
                                        elseif Library.Flags.AmmobarPosition and Library.Flags.AmmobarPosition.Value == "Right" then
                                            Components.AmmobarInvert.Position = UDim2.new(0, 0, 0, 0);
                                            Components.Ammobar.Position = RightOffset + UDim2.new(0, RightBounds, 0, 0);
                                            RightBounds = RightBounds + 1 + 6;
                                        end;
                                    end;
                                    Components.Ammobar.BackgroundColor3 = LerpedColor;
                                    Components.Ammobar.Visible = true;

                                else 
                                    Components.Ammobar.Visible = false;
                                end;
                            end;
                            
                            do --// Flags
                                local TotalFlags = 0;

                                if Library.Flags.ESPFlags and Library.Flags.ESPFlags.Value then 
                                    Components.Flags.Visible = true
                                    Components.Flags.FontFace = Library.SmallFont
                                    Components.Flags.TextSize = Library.SmallSize
                                    Components.Flags.Position = RightOffset + UDim2.new(0, RightBounds, 0, -3)
                                    Components.Flags.TextTransparency = Transparency
                                    Components.Flags.RichText = true 
                                    Components.Flags.TextYAlignment = Enum.TextYAlignment.Top
                                
                                    local FlagsText = ""
                                
                                    for _, Value in next, ESPConstructor.Flags do
                                        if table.find(Library.Flags.Flags.Value, Value.Flag) then
                                            local Text = Value.Text(self, true)
                                            local Color = Library.Flags["Flag"..Value.Flag].Color
                                            Color = string.format("#%02X%02X%02X", Color.R * 255, Color.G * 255, Color.B * 255)
                                            if Text then
                                                TotalFlags = TotalFlags + 1
                                                FlagsText = FlagsText .. string.format('<font color="%s">%s</font>\n', Color, Text)
                                            end
                                        end
                                    end
                                
                                    Components.Flags.Text = FlagsText
                                    RightBounds = RightBounds + 10
                                else 
                                    Components.Flags.Visible = false
                                end
                            end;

                            do --// Username
                                if Library.Flags.ESPName and Library.Flags.ESPName.Value then
                                    Components.Username.Visible = true;
                                    Components.Username.Text = "Username";
                                    Components.Username.TextColor3 = Library.Flags.NameColor.Color

                                    if Library.Flags.UsernamePosition and Library.Flags.UsernamePosition.Value == "Bottom" then 
                                        Components.Username.TextYAlignment = Enum.TextYAlignment.Top;
                                        Components.Username.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                        BottomBounds = BottomBounds + Components.Username.TextSize + 1;
                                    else 
                                        Components.Username.TextYAlignment = Enum.TextYAlignment.Center;
                                        Components.Username.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                        TopBounds = TopBounds + Components.Username.TextSize + 1;

                                    end;
                                else 
                                    Components.Username.Visible = false;
                                end;
                            end;

                            do --// Inventory / Hotbar 
                                if Library.Flags.ESPInventory and Library.Flags.ESPInventory.Value then 
                                    local Inventory = "[Bandages, Scout, Medkit, Knife]"
                                    if Inventory then
                                        Components.Inventory.Visible = true;

                                        Components.Inventory.TextColor3 = Library.Flags.InventoryColor.Color
                                        

                                        local ReturnedText = Inventory;
                                        Components.Inventory.Text = ReturnedText;
                                        if Library.Flags.InventoryPosition and Library.Flags.InventoryPosition.Value == "Top" then 
                                            Components.Inventory.TextYAlignment = Enum.TextYAlignment.Center;
                                            Components.Inventory.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                            TopBounds = TopBounds + Components.Inventory.TextSize + 1;
                                        else
                                            Components.Inventory.TextYAlignment = Enum.TextYAlignment.Top;
                                            Components.Inventory.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                            BottomBounds = BottomBounds + Components.Inventory.TextSize + 1;
                                        end;
                                    else 
                                        Components.Inventory.Visible = false;
                                    end;
                                else 
                                    Components.Inventory.Visible = false;
                                end;

                            end;

                            do --// Weapon
                                if Library.Flags.ESPWeapon and Library.Flags.ESPWeapon.Value and WeaponName ~= "None" then
                                    Components.Weapon.Visible = true;
                                    Components.Weapon.Text = "M4A1-S";

                            
                                    Components.Weapon.Text = Components.Weapon.Text .. " ["..tostring(30).."/"..tostring(30).."]";
                                    

                                    Components.Weapon.TextColor3 = Library.Flags.WeaponColor.Color;

                                    if Library.Flags.WeaponPosition and Library.Flags.WeaponPosition.Value == "Top" then 
                                        Components.Weapon.TextYAlignment = Enum.TextYAlignment.Center;
                                        Components.Weapon.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                        TopBounds = TopBounds + Components.Weapon.TextSize + 1;
                                    else
                                        Components.Weapon.TextYAlignment = Enum.TextYAlignment.Top;
                                        Components.Weapon.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                        BottomBounds = BottomBounds + Components.Weapon.TextSize + 1;
                                    end;
                                else 
                                    Components.Weapon.Visible = false;
                                end;
                            end;

                            do --// Weapon Image 
                                if Library.Flags.ESPWeaponImage and Library.Flags.ESPWeaponImage.Value then 
                                    Components.WeaponImage.Image = WeaponIcons["M4A1-S"];
                                    Components.WeaponImage.Visible = true;
                                    Components.WeaponImage.Position = BottomOffset + UDim2.new(0.5, 0, 0, BottomBounds);
                                    BottomBounds = BottomBounds + Components.WeaponImage.Size.Y.Offset;
                                else 
                                    Components.WeaponImage.Visible = false;
                                end;
                            end;
                            
                            do --// Distance
                                if Library.Flags.ESPDistance and Library.Flags.ESPDistance.Value then
                                    Components.Distance.Visible = true;
                                    Components.Distance.Text = "100" .. "".. DistanceConversions[PreferredDistances[GameName]].Suffix;

                                    Components.Distance.TextColor3 = Library.Flags.DistanceColor.Color


                                    if Library.Flags.DistancePosition and Library.Flags.DistancePosition.Value == "Top" then 
                                        Components.Distance.TextYAlignment = Enum.TextYAlignment.Center;
                                        Components.Distance.Position = TopOffset + UDim2.new(0, 0, 0, -TopBounds);
                                        TopBounds = TopBounds + Components.Distance.TextSize + 1;
                                    else
                                        Components.Distance.TextYAlignment = Enum.TextYAlignment.Top;
                                        Components.Distance.Position = BottomOffset + UDim2.new(0, 0, 0, BottomBounds);
                                        BottomBounds = BottomBounds + Components.Distance.TextSize + 1;
                                    end;
                                else 
                                    Components.Distance.Visible = false;
                                end;
                            end;
                        else 
                            ESPPreviewOutter.Visible = false;
                        end;
                    end;
                end;
                
                if Library.Windows[1] then 
                    Library.Windows[1].CurrentPreview = Preview; 
                end 

                return Preview;
            end;
        end;

        do  --// Notifications
            local NotificationContainer;
            NotificationContainer = Instance.new("ScreenGui");
            NotificationContainer.Parent = gethui();

            function Library:UpdateNotifications()
                local i = 0
                for v in next, Notifications do
                    if v.Holder then 
                        local tween = Library:Tween(v.Holder, TweenInfo.new(0.8, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(0, 20, 0, 75 + (i * 25))})
                        i = i + 1
                    end
                end
            end;

            function Library:UpdateNotifications2(Item)
                for i,v in pairs(Item) do
                    if typeof(v) == "Instance" then
                        task.spawn(function()
                            local tween = Library:Tween(v, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {BackgroundTransparency = 1});

                            tween.Completed:Connect(function()
                                if v.Name == "Holder" then 
                                    v:Destroy();
                                end
                            end)
                        end);
                        if v.ClassName == "TextLabel" then 
                            local tween = Library:Tween(v, TweenInfo.new(1, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {TextTransparency = 1})
                        end
                    end
                end
            end

            function Library:Notify(Text, Time, Color)
                Time = Time or 2;
                Color = Color or Library.Theme.Accent;
                Text = Text or "No text provided? retard? "..tostring(math.random());

                local Notification = {};

                local Holder = Instance.new("Frame")
                Holder.Position = UDim2.new(0, -30, 0, 75);
                Holder.Size = UDim2.new(0, 0, 0, 23);
                Holder.BackgroundTransparency = 0;
                Holder.Parent = NotificationContainer;
                Holder.BackgroundColor3 = Library.Theme.LightContrast;
                Holder.BorderSizePixel = 1
                Holder.BorderColor3 = Library.Theme.Border
                Notification.Holder = Holder;

                local Background = Instance.new("Frame");
                Background.Parent = Holder;
                Background.Size = UDim2.new(1, -4, 1, -4);
                Background.BackgroundColor3 = Library.Theme.MedianContrast;
                Background.Position = UDim2.new(0, 2, 0, 2);
                Background.BorderSizePixel = 1
                Background.BorderColor3 = Library.Theme.Border
                Notification.Background = Background;

                local AccentBar = Instance.new("Frame");
                AccentBar.Size = UDim2.new(0, 1, 1, 0);
                AccentBar.Parent = Background;
                AccentBar.BackgroundColor3 = Color;
                AccentBar.Position = UDim2.new(0, 0, 0, 0);
                AccentBar.BorderSizePixel = 0 
                Notification.AccentBar = AccentBar;

                local AccentBar2 = Instance.new("Frame");
                AccentBar2.Size = UDim2.new(0, 0, 0, 1);
                AccentBar2.Position = UDim2.new(0, 0, 0, 15);
                AccentBar2.Parent = Background;
                AccentBar2.BackgroundColor3 = Color;
                AccentBar2.BorderSizePixel = 0 

                Notification.AccentBar2 = AccentBar2
                local NotifText = Instance.new("TextLabel");
                NotifText.TextXAlignment = Enum.TextXAlignment.Left;
                NotifText.Position = UDim2.new(0, 3, 0, 0);
                NotifText.Size = UDim2.new(1, 0, 1, 0)
                NotifText.Parent = Background;
                NotifText.FontFace = Library.MenuFont;
                NotifText.TextColor3 = Color3.new(1,1,1);
                NotifText.BackgroundTransparency = 1;
                NotifText.TextSize = Library.TextSize;
                NotifText.Text = Text; 

                Notification.NotifText = NotifText;
                Notification.Holder.Size = UDim2.new(0, (string.len(NotifText.Text) * 5) + 10, 0, 19);

                AccentBar2.Size = UDim2.new(0, 1, 0, 1)

                Notifications[Notification] = true

                local Connection
                function Notification:Remove()
                    Notifications[Notification] = nil 
                    Library:UpdateNotifications();
                end;
                task.spawn(function()
                    Library:UpdateNotifications()
                    Notification.AccentBar2:TweenSize(UDim2.new(0, Background.AbsoluteSize.X - 1, 0, 1), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, Time, false);
                    task.wait(Time)

                    Library:UpdateNotifications2(Notification)
                    task.wait(1.2)
                    Notification:Remove()
                end);
            end;
        end;
    end)()

    LPH_NO_VIRTUALIZE(function()
        function Library:ToggleMenu()
            if Library.Fading then 
                return 
            end; 

            Library.Fading = true;
            local Window = Library.Windows[1];
            local IsOpen = not Library.Flags["Open/Close"].Value;
            MouseLocation = UserInputService:GetMouseLocation();
            Library.MouseCursor.Position = UDim2.new(0, MouseLocation.X - 18, 0, MouseLocation.Y - 18);

            local FadeTime = 0.25;

            if IsOpen then 
                Window.Main.Enabled = true;
            end;

            do --// Fade In/Out
                local Goal = IsOpen and 0 or 1;

                if not Library.Properties then
                    Library.Properties = {};
                    local Blur = Instance.new("BlurEffect", Lighting);
                    Blur.Size = 0;
                    Blur.Enabled = true;
                    Library.Blur = Blur;

                    for _, Value in next, Window.Main:GetDescendants() do 
                        local Class = Value.ClassName; 

                        if Value.Name ~= "TabTransitioner" and Value.Name ~= "TabTransitioner2" then 
                            if Class == "Frame" and Value.BackgroundTransparency ~= 1 then 
                                Library.Properties[Value] = {["BackgroundTransparency"] = true};
                            end; 

                            if Class == "TextLabel" and Value.Name ~= "New_TextTip" then 
                                if Value.BackgroundTransparency ~= 1 then 
                                    Library.Properties[Value] = {["BackgroundTransparency"] = true, ["TextTransparency"] = true};
                                else 
                                    Library.Properties[Value] = {["TextTransparency"] = true};
                                end; 
                            end; 

                            if Class == "TextButton" then 
                                if Value.BackgroundTransparency ~= 1 then 
                                    Library.Properties[Value] = {["BackgroundTransparency"] = true, ["TextTransparency"] = true};
                                else 
                                    Library.Properties[Value] = {["TextTransparency"] = true};
                                end; 
                            end; 

                            if Class == "ScrollingFrame" then 
                                if Value.BackgroundTransparency ~= 1 then 
                                    Library.Properties[Value] = {["BackgroundTransparency"] = true};
                                elseif Value.BackgroundTransparency ~= 1 and Value.ScrollBarImageTransparency ~= 1 then 
                                    Library.Properties[Value] = {["BackgroundTransparency"] = true, ["ScrollBarImageTransparency"] = true};
                                elseif Value.BackgroundTransparency == 1 and Value.ScrollBarImageTransparency ~= 1 then 
                                    Library.Properties[Value] = {["ScrollBarImageTransparency"] = true};
                                end; 
                            end;

                            if Class == "TextBox" then 
                                Library.Properties[Value] = {["TextTransparency"] = true, ["BackgroundTransparency"] = true}
                            end;

                            if Class == "ImageLabel" then 
                                if Value.BackgroundTransparency ~= 1 and Value.ImageTransparency ~= 1 then 
                                    Library.Properties[Value] = {["BackgroundTransparency"] = true, ["ImageTransparency"] = true};
                                elseif Value.ImageTransparency ~= 1 and Value.BackgroundTransparency == 1 then 
                                    Library.Properties[Value] = {["ImageTransparency"] = true};
                                end;
                            end; 

                            if Class == "ImageButton" then 
                                if Value.BackgroundTransparency ~= 1 and Value.ImageTransparency ~= 1 then 
                                    Library.Properties[Value] = {["BackgroundTransparency"] = true, ["ImageTransparency"] = true};
                                elseif Value.ImageTransparency ~= 1 and Value.BackgroundTransparency == 1 then 
                                    Library.Properties[Value] = {["ImageTransparency"] = true};
                                end;
                            end;

                            if Class == "UIStroke" then 
                                Library.Properties[Value] = {["Transparency"] = true}
                            end;
                        end;
                    end;
                end;

                if Library.Properties then 
                    local Info = TweenInfo.new(FadeTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                    local TweenData = {}
                
                    for Object, Properties in next, Library.Properties do
                        local Data = {}
                
                        if Properties["BackgroundTransparency"] then 
                            Data.BackgroundTransparency = Goal
                        end
                
                        if Properties["TextTransparency"] then 
                            Data.TextTransparency = Goal
                        end
                
                        if Properties["ImageTransparency"] then 
                            Data.ImageTransparency = Goal
                        end
                
                        if Properties["ScrollBarImageTransparency"] then 
                            Data.ScrollBarImageTransparency = Goal
                        end
                        
                        if Properties["Transparency"] then 
                            Data.Transparency = Goal
                        end
                        table.insert(TweenData, {Object = Object, Data = Data})
                    end
                
                    task.spawn(function()
                        for _, TweenInfo in ipairs(TweenData) do
                            local Object = TweenInfo.Object
                            local Data = TweenInfo.Data
                            Library:Tween(Object, Info, Data)
                        end
                    end)
                end
            end;

            do --// Blur
                if Library.Flags.Blurbackground and Library.Flags.Blurbackground.Value then 
                    task.spawn(function()
                        local SizeGoal = IsOpen and 15 or  0
                        Library:Tween(Library.Blur, TweenInfo.new(FadeTime, Enum.EasingStyle.Linear, Enum.EasingDirection.Out), {Size = SizeGoal})
                    end);
                else 
                    Library.Blur.Size = 0;
                end;
            end;

            task.wait(FadeTime);

            if not IsOpen then 
                Window.Main.Enabled = false;
            end;

            Library.Fading = false;
        end;
    end)();
end;

do --// Game Framework

    do --// Aftermath 
        if GameName == "Aftermath" then
            local FakePart = Instance.new("Part", Camera) 
            FakePart.Transparency = 1
            FakePart.CanCollide = false 
            FakePart.Size = Vector3.new(0.1, 0.1, 0.1)
            FakePart.Anchored = true
            GameFramework.FakePart = FakePart
        end
    end 

    do --// Original Frameworking stuff
        local Originals = {};
        GameFramework.LastShotTick = tick();
        GameFramework.ShotNumber = 0;
        GameFramework.CrimTags = "";
        GameFramework.CrimItems = {};
        GameFramework.PDCodes = {}
        GameFramework.LastReloadTick = tick();

        GameFramework.CrimColors = {
            ["0 1 0.184314 0.184314 0 "] = "Red";
            ["0 0.184314 1 0.4 0 "] = "Green";
        };

        GameFramework.CrimBounties = {};

        GameFramework.CrimMeshes = {
            ["rbxassetid://9029331092"] = "Grenade";
            ["rbxassetid://9029118683"] = "CS-Grenade";
            ["rbxassetid://9029118683"] = "Smoke-Grenade";
            ["rbxassetid://9029276496"] = "Flashbang";
            ["rbxassetid://9029118683"] = "Incendiary-Grenade";
            ["rbxassetid://9029306256"] = "Stun-Grenade";
            ["rbxassetid://9028964777"] = "Molotov";
        };

        GameFramework.CrimTextures = {
            ["rbxassetid://9029173190"] = "Incendiary-Grenade";
            ["rbxassetid://9029151773"] = "Smoke-Grenade";
            ["rbxassetid://9029129154"] = "CS-Grenade";
        };

        if GameName == "Project Delta" then 
            Originals = {
                Springs = {
                    strafeTilt = {
                        Force = 50;
                        Speed = 4;
                        };
                    sway = {
                        Force = 100;
                        Speed = 4;
                    };
                    walkCycle = {
                        Force = 50;
                        Speed = 4;
                    };
                    sprintCycle = {
                        Force = 50;
                        Speed = 4;
                    };
    
                    recoilPos = {
                        Speed = 5;
                        Force = 75;
                    };
                    cameraRecoil = {
                        Force = 100;
                        Speed = 6;
                    };
                    recoilRot = {
                        Speed = 3;
                        Force = 35;
                    };
                    jumpTilt = {
                        Speed = 4;
                        Force = 90;
                    };
                    leanAlpha = {
                        Speed = 4; -- 50 for instant lean
                        Force = 50 -- 25 for instant lean
                    };
                    wallTouchTilt = {
                        Speed = 4;
                        Force = 50;
                    };
                }
            };
        end;

        if GameName == "Gunfight Arena" then 
            local Module = require(game:GetService("ReplicatedStorage").BulletData);

            for Index, Value in next, Module do 
                Originals[Index] = {
                    BaseVelocity = Value.BaseVelocity;
                    Weight = Value.Weight; 
                    EnergyCoefficient = Value.EnergyCoefficient
                }
            end;

            function GameFramework:ApplyMods()
                for Index, Value in next, Module do 
                    if Library.Flags.NoRecoil.Value then 
                        Value.Weight = 0;
                    else 
                        Value.Weight = Originals[Index].Weight
                    end;

                    if Library.Flags.FastBullet.Value then 
                        Value.BaseVelocity = 50000;
                    else 
                        Value.BaseVelocity = Originals[Index].BaseVelocity
                    end;
                end;
            end;

            setreadonly(math, false);
            local old = math.random;

            math.random = function(...)
                if debug.traceback() and debug.traceback():find("Fire", 1, true) and not debug.traceback():find("Reload", 1, true) and not debug.traceback():find("RunAnimation", 1, true) and Library.Flags.NoSpread and Library.Flags.NoSpread.Value  then 
                    return 0
                end;

                return old(...)
            end;
        end;

        if GameName == "Criminality" then
            local ItemStats = ReplicatedStorage.Storage.ItemStats;
            local Items = {};

            for Index, Value in next, ItemStats:GetChildren() do 
                for Index, Item in next, Value:GetChildren() do 
                    table.insert(Items, Item.Name);
                end;
            end;

            GameFramework.CrimItems = Items; 
        end;

        GameFramework.Originals = Originals;
    end;

    do --// GetGC
        LPH_NO_VIRTUALIZE(function()
            if GameName == "Project Delta" then 
                for Index, Value in next, getgc(true) do
                    if type(Value) == "table" then 
                        if rawget(Value, "updateClient") then 
                            GameFramework.FPS = Value;
                        elseif rawget(Value, "SetZoomTarget") then 
                            GameFramework.SetTargets = Value;
                        elseif rawget(Value, "CreateBullet") then 
                            GameFramework.Bullet = Value;
                        elseif rawget(Value, "RangedWeaponDefault") then 
                            GameFramework.WeaponFunctions = Value;
                        end;
                    end;
                end;
            end;

            if GameName == "Blackout" then 
                GameFramework.BulletHandler = nil

                for Index, Value in next, getgc(true) do 
                    if type(Value) == "table" and rawget(Value, "Fire") and type(rawget(Value, "Fire")) == "function" then 
                        if debug.getinfo(Value.Fire).short_src == "ReplicatedStorage.GunStorage.Mods.BulletHandler" then 
                            GameFramework.BulletHandler = Value 
                        end
                    end
                end 
                

                for Index, Value in next, getgc(true) do 
                    if type(Value) == "table" and rawget(Value, "Springs") and type(rawget(Value, "Springs")) == "table" then 
                        GameFramework.Main = Value;

                        for Index, Value in next, Value.Springs do 
                            local Clone = {}; 
                            for Idx, Val in next, Value do 
                                Clone[Idx] = Val;
                            end;

                            GameFramework.Originals[tostring(Index)] = Clone;
                        end;
                    end;
                end;
            end;    

            if GameName == "Apocalypse Rising 2" then 
                local Framework = require(ReplicatedFirst.Framework);   
                local PlayerClass = Framework.Classes.Players.get();
                local Bullets = Framework.Libraries.Bullets;
                local Network = Framework.Libraries.Network;
                local Raycasting = Framework.Libraries.Raycasting;
                local CameraLibrary = Framework.Libraries.Cameras;

                local Animators = Framework.Classes.Animators;
                local VehicleController = Framework.Classes.vehicle_controller;

                GameFramework.Framework = Framework;
                GameFramework.Players = PlayerClass;
                GameFramework.Bullets = Bullets;
                GameFramework.Network = Network;
                GameFramework.Raycast = Raycasting;
                GameFramework.Camera = CameraLibrary;
                GameFramework.Animators = Animators;
                GameFramework.Vehicle = VehicleController;
            end;

            if GameName == "Criminality" then 
                local ACTable;
                local RCHBFunction;
                local ONRH_S4;
                for Index, Value in next, getgc(true) do 
                    if type(Value) == "table" and rawget(Value, "A") and rawget(Value, "B") and rawget(Value, "GP") and rawget(Value, "EN") and rawget(Value, "CX1") then
                        ACTable = Value;
                    end;
                end;

                --[[for Index, Value in next, getgc(true) do 
                    if type(Value) == "table" and rawget(Value, "ONRH_S4") and type(rawget(Value, "ONRH_S4")) == "function" then 
                        ONRH_S4 = Value.ONRH_S4
                        break;
                    end;
                end;
                
                for Index, Value in next, getgc(true) do 
                    if type(Value) == "table" and rawget(Value, "lol") and type(rawget(Value, "lol")) == "function" and getinfo(Value.lol).source:find(".RCHB") then 
                        RCHBFunction = Value.lol
                        break;
                    end;
                end;]]

                --// we're gonna manipulate this here
                --[[for Index, Value in next, debug.getconstants(RCHBFunction) do 
                    if Value == 1.75 or Value == 10 then
                        setconstant(RCHBFunction, Index, 20);
                    end;
                end;
                
                for Index, Value in next,  debug.getconstants(ONRH_S4) do 
                    if Value == 1.5 or Value == 10 then
                        setconstant(ONRH_S4, Index, 20);
                    end;
                end;]]
            end;
        end)();
    end;

    do --// Modules
        if GameName == "Criminality" then
            GameFramework.Modules = {};
            local Modules = ReplicatedStorage:FindFirstChild("NewModules");
            if Modules and Modules:FindFirstChild("Shared") then 
                local FastCast = require(Modules.Shared.Services.FastCastRedux);
                --for Index, Value in next, getgc(true) do 
                --    if type(Value) == "table" and rawget(Value, "FireWithBlacklist") and type(rawget(Value, "FireWithBlacklist")) == "function" then 
                --        local Src = debug.getinfo(Value.FireWithBlacklist).short_src
                --        if Src:find("FastCastRedux") then 
                --            FastCast = Value 
                --        end
                --    end
                --end
                GameFramework.Modules.FastCast = FastCast;
            end;
        end;
    end;

    do --// Functions
        LPH_NO_VIRTUALIZE(function()

            function GameFramework:ApplyModifications()
                for Index, Value in next, GameFramework.Main.Springs do 
                    if Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                        Value.Speed = 0;
                        Value.Force = 0;
                    else 
                        Value.Speed = GameFramework.Originals[tostring(Index)].Speed;
                        Value.Force = GameFramework.Originals[tostring(Index)].Force;
                    end;
                end;
            end;

            function GameFramework:Fit(Table, Key)
                for Index, Value in pairs(Table) do
                    if Value == Key then 
                        return Index; 
                    end;
                end;
            end;

            function GameFramework:CrimRandomStr(Length)
                local t = ""
                for i = 1, Length do
                    t = t .. string.char(math.random(65,122))
                end	
                return t
            end;

            function GameFramework:FireBullet() 
                local Emoji = "ðŸ¯";
                local Tool = Client.Character:FindFirstChildOfClass("Tool") 
                local String = GameFramework:CrimRandomStr(30)..tostring(GameFramework.ShotNumber);
                local Num = 1;
                local Part = Combat.TargetPart; 
                local Position = Part.Position; 
                local Unit = (Camera.CFrame.p - Position).Unit; 
                local NinthArg = nil; 

                if rawget(require(Tool.Config), "FireRate") and Tool:FindFirstChild("Values") and Tool.Values:FindFirstChild("Ammo").Value ~= 0 then 
                    local FireRate = 0.4

                    if Library.Flags.RapidFire and Library.Flags.RapidFire.Value and (Tool.Name == "TEC-9" or Tool.Name == "Beretta") then 
                        FireRate = 1 / Library.Flags.FireRate.Value
                    end;

                    if tick() - GameFramework.LastShotTick > FireRate and Utility:AutoWall(Client.Character.Head, Part, 4) and not GameFramework.IsSettingUpReload then 
                        task.spawn(function()
                            GameFramework.ShotNumber += 1 
                            delay(5, function()
                                GameFramework.ShotNumber -= 1 
                            end);
                        end);

                        local ShootRemote = ReplicatedStorage.Events.GNX_S;
                        local HitRemote   = ReplicatedStorage.Events.ZFKLF_H; 

                        ShootRemote:FireServer(
                            tick(),
                            String,
                            Tool,
                            "FDS9I83",
                            Camera.CFrame.p,
                            {
                                [1] = Unit
                            }
                        );

                        HitRemote:FireServer(
                            Emoji,
                            Tool,
                            String,
                            1,
                            Part,
                            Position,
                            Unit,
                            nil,
                            NinthArg
                        );

                        Headshot.SoundId = HitmarkerSounds[Library.Flags["HitSound"].Value];
                        Headshot.Volume = Library.Flags.HitmarkerVolume.Value;

                        Headshot:Play()



                        if Library.Flags.Tracers.Value then 
                            task.spawn(function()
                                if Library.Flags.TracerMode.Value == "Line" then 
                                    Visuals:NewLine(Client.Character.Head.Position, Position);
                                else 
                                    Visuals:NewTracer(Client.Character.Head.Position, Position, Workspace.Filter.ToolSpawns)
                                end;
                            end);
                        end;

                        GameFramework.LastShotTick = tick()
                    end;
                end;
            end;
            
           function GameFramework:CrimMods()

                if not GameFramework.GunHasBeenModified then 
                    local GunTable = {};
                    GunTable.HasShot = false;
                    for Index, Value in next, getgc(true) do 
                        if type(Value) == "table" and rawget(Value, "Shoot") then 
                            GunTable = Value;
                        end;
                    end;

                    do --// GunTable (Silent Aim)
                        local OldShoot = GunTable.Shoot; 
                        GunTable.Shoot = function(self, ...)
                            local Args = {...};
                            GameFramework.GunHasBeenModified = true;
                            if Client.Character and Combat.TargetPart and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode.Value == "Silent Aim" and Client.Character:IsAncestorOf(Args[3]) then 
                                setreadonly(Args[5], false);
                                
                                local Origin = Args[4];

                                local BulletVelocity = GameFramework.CurrentVelocity or 1100;
                                local Velocity = Combat.TargetPart.Velocity; 

                                Velocity = Vector3.new(Velocity.X, 0, Velocity.Y);
                                if Velocity and BulletVelocity and not Library.Flags.InstantHit.Value then 
                                    local Distance = (Args[4] - Combat.TargetPart.Position).Magnitude; 
                                    local TimeToHit = Distance / BulletVelocity;

                                    local PredictedPosition = Combat.TargetPart.Position + (Velocity * TimeToHit);
                                    
                                    if Library.Flags.InstantHit and Library.Flags.InstantHit.Value then 
                                        PredictedPosition = Combat.TargetPart.Position + (Velocity / math.huge) + (Velocity / math.huge)
                                    end;
                                    local Direction = (PredictedPosition - Origin).Unit;

                                    Args[5][1] = Direction;
                                end;

                                if Library.Flags.MagicBullet and Library.Flags.MagicBullet.Value then
                                    Args[4] = (CFrame.new(Combat.TargetPart.Position) * CFrame.new(0, 0, -3)).p;
                                    Args[5][1] = (Combat.TargetPart.Position - Args[4]).Unit * 9e9

                                    Origin = Args[4];
                                end;

                                if Library.Flags.InstantHit.Value and not Library.Flags.MagicBullet.Value then 
                                    local Direction = ((Combat.TargetPart.Position - Origin).Unit * 9e9)
                                    Args[5][1] = Direction;
                                end;

                                --[[if Library.Flags.ForceHit and Library.Flags.ForceHit.Value then 
                                    task.spawn(function()
                                        task.wait(0.05);
                                        local Emoji = "ðŸ¯";
                                        local Tag = GameFramework.CrimTags;
                                        
                                        ReplicatedStorage.Events:FindFirstChild("ZFKLF_H"):FireServer(
                                            Emoji,
                                            Client.Character:FindFirstChildOfClass("Tool"),
                                            Tag,
                                            1,
                                            Combat.TargetPart,
                                            Combat.TargetPart.Position,
                                            Args[5][1]
                                        );
                                    end);
                                end;]]
                            end;

                            do --// Tracers
                                if Library.Flags.Tracers and Library.Flags.Tracers.Value then 
                                    task.spawn(function()
                                        local Origin = Args[4];
                                        local Direction = Args[5][1] * 1000;
                                        local RayHit, HitPos = Workspace:FindPartOnRayWithIgnoreList(
                                            Ray.new(Origin, Direction),
                                            {Camera, Client.Character},
                                            false,
                                            true,
                                            ""
                                        );
            
                                        if HitPos then
                                            if Library.Flags.TracerMode.Value == "Line" then 
                                                Visuals:NewLine(Origin, HitPos);
                                            else 
                                                Visuals:NewTracer(Origin, HitPos, Workspace.Filter.ToolSpawns)
                                            end;
                                        end;
                                    end);
                                end;
                            end;
                            return OldShoot(self, unpack(Args));
                        end;
                    end;
                end;
            end;

            function GameFramework:CheckDowned(Target)
                local Name = Target.Name;
                local PlayerStats = ReplicatedStorage.CharStats[Name]

                return (PlayerStats and PlayerStats.Downed.Value) or false
            end;

            function GameFramework:CrimHitObject(Object, Class, Part, WeaponInfo)
                if Object and Class ~= "Weapon" then
                    local RemoteTick = ReplicatedStorage.Events:FindFirstChild("XMHH.2"):InvokeServer(
                        "ðŸž",
                        tick(),
                        Client.Character:FindFirstChildOfClass("Tool"),
                        "DZDRRRKI",
                        Object, 
                        Class
                    );

                    ReplicatedStorage.Events:FindFirstChild("XMHH2.2"):FireServer(
                        "ðŸž",
                        tick(),
                        Client.Character:FindFirstChildOfClass("Tool"),
                        "2389ZFX34",
                        RemoteTick,
                        false,
                        Client.Character["Right Arm"],
                        Part,
                        Object,
                        Client.Character["Right Arm"].Position,
                        Part.Position
                    );
                end;

                if Object and Class == "Weapon" then 
                    if WeaponInfo and WeaponInfo.Delay and WeaponInfo.AttackType then 
                        if WeaponInfo.AttackType == "Hit" then 
                            local RemoteTick = ReplicatedStorage.Events:FindFirstChild("XMHH.2"):InvokeServer(
                                "ðŸž",
                                tick(), 
                                Client.Character:FindFirstChildOfClass("Tool"), 
                                "43TRFWX", 
                                "Normal",
                                tick(), 
                                true, 
                                true
                            );

                            task.wait(WeaponInfo.Delay) --// Wait delay so it registers.

                            ReplicatedStorage.Events:FindFirstChild("XMHH2.2"):FireServer(
                                "ðŸž",
                                tick(), 
                                Client.Character:FindFirstChildOfClass("Tool"), 
                                "2389ZFX34", 
                                RemoteTick, 
                                true, 
                                Client.Character["Left Arm"], 
                                Part, 
                                Object, 
                                Client.Character["Left Arm"].Position,
                                Part.Position
                            );
                        end;

                        if WeaponInfo.AttackType == "Finish" then
                            local RemoteTick = ReplicatedStorage.Events:FindFirstChild("XMHH.2"):InvokeServer(
                                "ðŸž",
                                tick(), 
                                Client.Character:FindFirstChildOfClass("Tool"), 
                                "EXECQX"
                            );
                            
                            task.wait(0.5);

                            ReplicatedStorage.Events:FindFirstChild("XMHH2.2"):FireServer(
                                "ðŸž",
                                tick(),
                                Client.Character:FindFirstChildOfClass("Tool"),
                                "2389ZFX34",
                                RemoteTick,
                                false,
                                Client.Character["Right Leg"], 
                                Part, 
                                Object, 
                                Client.Character["Right Leg"].Position, 
                                Part.Position
                            );
                        end;
                    end;
                end;
            end;

            function GameFramework:RunCharacterFunctions()

                --[[
                local Module = require(game:GetService("Players").LocalPlayer.Backpack["AKM 1P63"].Gun_Statistics) 

                Module.CameraRecoilUp = 0 
                Module.CameraRecoilSides = 0 
                Module.GunRecoilUp = 0 
                Module.GunRecoilSides = 0
                ]]

                do --// Eastern War 
                    if GameName == "Eastern War" then 
                        Client.Character.ChildAdded:Connect(function(Tool)
                            if Tool:IsA("Tool") then 
                                task.spawn(function()
                                    local Module = Tool:WaitForChild("Gun_Statistics", 5);

                                    if Module then 
                                        Module = require(Module)
                                        if Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                            Module.CameraRecoilUp = 0 
                                            Module.CameraRecoilSides = 0 
                                            Module.GunRecoilUp = 0 
                                            Module.GunRecoilSides = 0
                                        end

                                        if Library.Flags.RemoveSway and Library.Flags.RemoveSway.Value then 
                                            Module.SwaySpringSpeed1 = 0 
                                            Module.SwaySpringSpeed2 = 0
                                        end 
                                    end

                                end)
                            end
                        end)
                    end
                end 

                do --// Universal stuff
                    if IsStudio then 
                        RayParams.FilterDescendantsInstances = {Client.Character, Camera, Workspace.ACS_WorkSpace.Client}
                    end;
                end;

                do --// Delta 
                    if GameName == "Project Delta" then 
                        RayParams.FilterDescendantsInstances = {Client.Character, Camera, Workspace.NoCollision}
                    end;
                end;
                
                do --// Criminality
                    if GameName == "Criminality" then 
                        GameFramework.HeadGlitch = false;
                        GameFramework.StaminaTables = {};

                        RayParams.FilterDescendantsInstances = {Client.Character, Camera, Workspace.Filter}

                        for Index, Value in pairs(getgc(true)) do
                            if type(Value) == "table" and rawget(Value, "S") then 
                                GameFramework.StaminaTables[#GameFramework.StaminaTables + 1] = Value;
                            end;
                        end;

                        local ClientGUI = Client.PlayerGui;
                        local Viewmodel = Camera:FindFirstChild("ViewModel");
                        do --// Visuals, Lockpicking, Instant Reload
                            Client.Character.ChildAdded:Connect(function(Tool)
                                if Tool.ClassName == "Tool" then 

                                    if Tool and Tool:FindFirstChild("Config") then 
                                        GameFramework.CurrentConfig = require(Tool.Config);

                                        if Library.Flags.InstantReload and Library.Flags.InstantReload.Value then 
                                            GameFramework.IsSettingUpReload = Tool:FindFirstChild("IsGun"); 

                                            if GameFramework.IsSettingUpReload then 
                                                local Remote = ReplicatedStorage.Events.GNX_R;
                                                local Tool = Client.Character:FindFirstChildOfClass("Tool");
                                                Remote:FireServer(tick(), "STZNRD", Tool, math.random() / 10);

                                                --task.wait(3);
                                                --Remote:FireServer(tick(), "KLWE89U0", Tool);

                                                task.wait(0.2);
                                                GameFramework.IsSettingUpReload = false;
                                            end;
                                        end;
                                    end;

                                    GameFramework.GunHasBeenModified = false;
                                end;
                            end);

                            repeat wait() until Viewmodel;
                            Viewmodel.ChildAdded:Connect(function(Tool)
                                if Tool:IsA("Tool") then 
                                    Utility:UpdateViewmodel(Viewmodel);
                                end;
                            end);

                            ClientGUI.ChildAdded:Connect(function(GUI)
                                task.spawn(function()
                                    if GUI.Name == "LockpickGUI" then
                                        if Library.Flags.InstantLockpick and Library.Flags.InstantLockpick.Value then 
                                            task.wait(0.1);
                                            local Bars = GUI.MF.LP_Frame.Frames
                                            for Index = 1, 3 do 
                                                local BarFrame = Bars:FindFirstChild("B"..tostring(Index));
                                                local ActualBar = BarFrame:FindFirstChild("Bar");
                                                ActualBar.Size = UDim2.new(0, 0, 0, 500)
                                            end;
                                    
                                            for Index = 1, 3 do 
                                                task.wait(0.1);
                                                mouse1click();
                                                task.wait(0.1);
                                            end;

                                            task.wait(0.1);
                                            mouse1click()
                                            task.wait(0.1);
                                            mouse1click()
                                        else 
                                            task.wait(0.1);
                                            local Bars = GUI.MF.LP_Frame.Frames
                                            for Index = 1, 3 do 
                                                local BarFrame = Bars:FindFirstChild("B"..tostring(Index));
                                                local ActualBar = BarFrame:FindFirstChild("Bar");
                                                ActualBar.Size = UDim2.new(0, 30, 0, 30)
                                            end;
                                        end;
                                    end;

                                    if GUI.Name == "FlashedGUI" and Library.Flags.NoFlash and Library.Flags.NoFlash.Value then
                                        GUI.Enabled = false;
                                        GUI:GetPropertyChangedSignal("Enabled"):Connect(function()
                                            GUI.Enabled = false;
                                        end);
                                    end;

                                    if GUI.Name == "SmokeScreenGUI" and Library.Flags.NoSmoke and Library.Flags.NoSmoke.Value then 
                                        GUI.Enabled = false;
                                        GUI:GetPropertyChangedSignal("Enabled"):Connect(function()
                                            GUI.Enabled = false;
                                        end);
                                    end;

                                    if GUI.Name == "HelmetOverlayGUI" and Library.Flags.NoVisor and Library.Flags.NoVisor.Value then
                                        GUI.Enabled = false;
                                        GUI:GetPropertyChangedSignal("Enabled"):Connect(function()
                                            GUI.Enabled = false;
                                        end);
                                    end;

                                end);
                            end);

                            --game:GetService("Players")["99str4lif"].PlayerGui.CoreGUI.NotificationFrame:GetChildren()[4].Frame.NotificationText
                            --#d900: $1660
                            --ClientCoreGui = ClientGUI:WaitForChild("CoreGUI");
                            --task.wait(0.1);
                            --local NotificationFrame = ClientCoreGui:WaitForChild("NotificationFrame");
                            
                            --for Index, Frame in next, NotificationFrame:GetChildren() do 
                            --    local NotificationText = Frame:WaitForChild("NotificationText");
                            --    local Text = NotificationText.Text;
                            --    local Split = Text:split(": ");
                            --    if Split[1] and Split[2] then 
                            --        GameFramework.CrimBounties[Split[1]] = Split[2];
                            --    end;
                            --
                            --    local OtherSplit = Text:split("'s $")
                            --    if OtherSplit[1] and OtherSplit[2] and GameFramework.CrimBounties[OtherSplit[1]] then 
                            --        GameFramework.CrimBounties[OtherSplit[1]] = nil;
                            --    end;
                            --end;

                            --NotificationFrame.DescendantAdded:Connect(function(Frame)
                            --    task.wait(0.3)
                            --     if Frame.Name == "NotificationText" then 
                            --        task.wait(0.3);
                            --        NotificaitonText = Frame
                            --        local Text = NotificationText.Text;
                            --        local Split = Text:split(": ");
                            --        if Split[1] and Split[2] then 
                            --            print('hi')
                            --            GameFramework.CrimBounties[Split[1]] = Split[2];
                            --        end;
                            --
                            --        local OtherSplit = Text:split("'s $")
                            --        if OtherSplit[1] and OtherSplit[2] and GameFramework.CrimBounties[OtherSplit[1]] then 
                            --            print("woahashs")
                            --            GameFramework.CrimBounties[OtherSplit[1]] = nil;
                            --        end;
                            --    end
                            -- end);

                            Client.Character.ChildAdded:Connect(function(Object)
                                task.wait(0.05);
                                if Object.Name == "BurningScript" and Library.Flags.AntiFire and Library.Flags.AntiFire.Value then
                                    task.wait(0.1);
                                    Object:ClearAllChildren();
                                    Object:Destroy();

                                    for Index, Value in next, Client.Character:GetChildren() do 
                                        if Value:IsA("BasePart") then 
                                            if Value:FindFirstChild("Flames") then 
                                                Value.Flames:Destroy();
                                            end;

                                            if Value:FindFirstChild("Flames1") then 
                                                Value.Flames1:Destroy();
                                            end;

                                            if Value:FindFirstChild("Flames2") then 
                                                Value.Flames2:Destroy();
                                            end;
                                        end;
                                    end;
                                end;
                            end);
                        end;
                    end;
                end;

                do --// Project Delta
                    if GameName == "Project Delta" then 
                        local Humanoid = Client.Character:FindFirstChildOfClass("Humanoid");

                        Humanoid.StateChanged:Connect(function(OldState, NewState)
                            if Library.Flags.AntiFall and Library.Flags.AntiFall.Value and (NewState == Enum.HumanoidStateType.FallingDown or NewState == Enum.HumanoidStateType.Freefall) then 
                                Humanoid:ChangeState(Enum.HumanoidStateType.Landed);
                            end;
                        end);


                        local PlayerGui = Client.PlayerGui
                        local MainGui = PlayerGui and PlayerGui:WaitForChild("MainGui");

                        task.spawn(function()
                            repeat task.wait() until MainGui ~= nil;
                            MainGui.ChildAdded:Connect(function(Sound)
                                if Sound and Sound:IsA("Sound") and Library.Flags.CustomHitSounds and Library.Flags.CustomHitSounds.Value then 
                                    local SoundId = Sound.SoundId

                                    if SoundId == "rbxassetid://4585351098" or SoundId == "rbxassetid://4585382589" then
                                        Sound.SoundId = HitmarkerSounds[Library.Flags["HeadshotSound"].Value];
                                        Sound.Volume = Library.Flags.HitmarkerVolume.Value;
                                    end;

                                    if SoundId == "rbxassetid://4585382046" or SoundId == "rbxassetid://4585364605" then 
                                        Sound.SoundId = HitmarkerSounds[Library.Flags["BodyshotSound"].Value];
                                        Sound.Volume = Library.Flags.HitmarkerVolume.Value;
                                    end;

                                    if Sound.SoundId == "rbxassetid://9120454415" then 
                                        if Library.Flags.EliminateKillSound.Value then
                                            Sound.Volume = 0;
                                            Sound.SoundId = "";
                                        else 
                                            Sound.SoundId = HitmarkerSounds[Library.Flags["KillSound"].Value]
                                        end;
                                    end;

                                end;
                            end);
                        end);
                    end;
                end;

                do --// Blood and Iron 
                    if GameName == "Blood and Iron" then 
                        if not GameFramework.BulletTables then 
                            GameFramework.BulletTables = {};
                        end;

                        task.wait(4);
                        for Index, Value in next, getgc(true) do 
                            if type(Value) == "table" and rawget(Value, "BulletMuzzleVelocity") then 
                                if Library.Flags.InstantBullet.Value then 
                                    Value.BulletMuzzleVelocity = 5000;
                                    Value.BulletMaximumDeviation = 0.000005;
                                end;
                            end;
                        end;
                    end;
                end;

                do --// Blackout 
                    if GameName == "Blackout" then 
                        task.wait(0.5);

                        if Library.Flags.RemoveBobbing and Library.Flags.RemoveBobbing.Value then 
                            Client.Character.ScreenShake.Disabled = true;
                        end;

                        local Module-- = require(Client.PlayerGui.Minigames.MinigameHandler.Minigames);
                        for Index, Value in next, getgc(true) do 
                            if type(Value) == "table" and rawget(Value, "Lockpick") and type(rawget(Value, "Lockpick")) == "function" then 
                                Module = Value
                            end
                        end 
                        
                        local Lockpick = Module.Lockpick;

                        Module.Lockpick = function(...)
                            local Args = {...};

                            if Library.Flags.InstantLockpick and Library.Flags.InstantLockpick.Value then 
                                local Object = Args[2];
                                ReplicatedStorage.Events.Loot.MinigameResult:FireServer(Object, true);

                                task.wait(0.4);
                                keypress(0x45);
                            end;

                            return Lockpick(...)
                        end;

                    end; 
                end;

                do --// la skeets 
                    if GameName == "The Streets" then 
                        local Humanoid = Client.Character:WaitForChild("Humanoid");
                        local Stamina = Client.Character:WaitForChild("Stamina")

                        Stamina:GetPropertyChangedSignal("Value"):Connect(function()
                            if Library.Flags.InfiniteStamina and Library.Flags.InfiniteStamina.Value then 
                                Stamina.Value = 100;
                            end;
                        end);

                        for _, Part in next, Client.Character:GetDescendants() do 
                            if (Part:IsA("BasePart") or Part:IsA("Part")) then 
                                for Index, Value in next, getconnections(Part.Touched) do 
                                    Value:Disable()
                                end;
                        
                                Part.Touched:Connect(function(Value)
                                    if (Library.Flags.Noclip and Library.Flags.Noclip.Value and Library.Flags.NoClip.Value and Value.Name ~= "Baseplate") or (Library.Flags.Fly.Value and Library.Flags.CanFly.Value) then
                                        Value.CanCollide = false;
                                        task.wait(0.2)
                                        Value.CanCollide = true
                                    end;
                                end)
                            end;
                        end;
                    end;
                end;
            end;

            function GameFramework:Bypass()
                for _, Value in pairs(Workspace.Vehicles:GetDescendants()) do
                    if Value:IsA("VehicleSeat") then
                        local Body = Value.Parent.Parent.Body;
                        local Vehicle = Value.Parent.Parent;

                        Value:Sit(Client.Character.Humanoid);
                
                        ReplicatedStorage.Remotes.VehicleInteractions:FireServer({["Vehicle"] = Vehicle, ["Action"] = "Enter", ["Door"] = Body.FRdoor.FR_Door});
                        --Client.Character.PrimaryPart.CFrame = (Client.Character.PrimaryPart.Position - Vector3.new(0, 5, 0), Vector3.new())
                        break;
                    end;
                end;
            end;

            function GameFramework:New()
                local NewData;
                if GameName == "Project Delta" then 
                    for Index, Value in next, getgc(true) do 
                        if type(Value) == "table" and rawget(Value, "springs") and rawget(Value.springs, "sway") then
                            NewData = Value;
                        end;
                    end;
                end;

                GameFramework.CurrentData = NewData;
                return NewViewmodel;
            end;
        end)()
    end;

    do --// Blackout teleports 
        if GameName == "Blackout" then 
            local Locations = {
                ["Military Outpost"]  = Vector3.new(1109.3585205078125, 61.53301239013672, -405.55517578125);
                ["Vulture Warehouse"] = Vector3.new(1325.2720947265625, 104.73978424072266, 27.61532974243164);
                ["Science Labs"]      = Vector3.new(568.319580078125, 38.16761779785156, -427.5185852050781);
                ["Train Station"]     = Vector3.new(672.1238403320312, 13.64058780670166, 31.360015869140625);
                ["Scav Outskirts"]    = Vector3.new(359.0443115234375, 38.1496467590332, -453.2912902832031);
                ["Shipment"]          = Vector3.new(1351.1065673828125, 64.10723114013672, 412.8721923828125);
                ["Border"]            = Vector3.new(276.28631591796875, 215.1169891357422, 530.3408203125);
                ["Bunker"]            = Vector3.new(140.03817749023438, 55.033817291259766, 70.00415802001953);
                ["Feast Alley"]       = Vector3.new(781.3847045898438, 84.98567962646484, 312.5820007324219);
                ["Mall Roof"]         = Vector3.new(1116.01806640625, 145.32472229003906, 299.28173828125);
                ["Bridge"]            = Vector3.new(675.9490356445312, 36.689674377441406, 76.6071548461914);
                ["ATM-1"]             = Vector3.new(751.5917358398438, 37.6195068359375, 265.22186279296875);
                ["ATM-2"]             = Vector3.new(1146.425048828125, 37.64427947998047, -57.51604461669922);
                ["Broker-1"]          = Vector3.new(766.7476196289062, 37.61959457397461, 164.548828125);
                ["Broker-2"]          = Vector3.new(1228.158447265625, 80.88734436035156, -110.68136596679688);
                ["Merchant-1"]        = Vector3.new(899.6065673828125, 37.691688537597656, 335.113037109375);
                ["Merchant-2"]        = Vector3.new(1017.595703125, 37.675819396972656, -148.60220336914062);
                ["Blitz"]             = Vector3.new(492.2814025878906, 37.300048828125, 767.5679931640625);
                ["Scourge"]           = Vector3.new(1157.1251220703125, -108.26828002929688, -81.69584655761719);
            };

            table.sort(Locations, function(a, b)
                return a < b;
            end);

            GameFramework.Locations = Locations;
        end;
    end;

    do --// Scorched Earth 
        if GameName == "Scorched Earth" then 
            local RandomEntity = Workspace.charColliders:GetChildren()[1]
            for Index, Value in next, getgc(true) do 
                if type(Value) == "table" and type(rawget(Value, RandomEntity.Name)) == "table" then 
                    local Player = rawget(Value, RandomEntity.Name) 
                    if rawget(Player, "colliderModel") then 
                        GameFramework.EntityData = Value;
                        break
                    end
                end
            end
        end
    end 

    do --// Bad Bus
        if GameName == "Bad Business" then 
            local TS = getupvalue(require(ReplicatedStorage.TS), 1)
            GameFramework.TS = TS

            local Projectile = getupvalue(TS.Projectiles.InitProjectile, 1)
            local WeaponData = getupvalue(TS.Items.GetConfig, 3)
            local EntityList = getupvalue(TS.Characters.GetCharacter, 1)

            GameFramework.Projectile = Projectile 
            GameFramework.WeaponData = WeaponData 
            GameFramework.EntityList = EntityList
        end
    end

    do --// jit MaxXing 
        LPH_JIT_MAX(function()


            do --// Aftermath 
                if GameName == "Aftermath" then 
                    local SENV = getsenv(Client.PlayerScripts.GunController)

                    local Old; Old = hookfunction(SENV.getLookDirection2, LPH_NO_UPVALUES(function(...)
                        if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" and not checkcaller() and GameFramework.FakePart then 
                            local Position = Combat.TargetPart.CFrame.p 
                            local Origin = GameFramework.FakePart.CFrame.p 
                            return (Position - Origin).Unit
                        end 

                        return Old(...)
                    end));

                end
            end 

            do --// CBRO 
                if GameName == "Counter Blox" then 
                    do --// Client 
                        local SENV = getsenv(Client.PlayerGui.Client)

                        local Recoil; Recoil = hookfunction(SENV.getrec, LPH_NO_UPVALUES(function()
                            local Old = Recoil();
                            --Originals[tostring(Index)].Recoil.Camera.FinishStart * (Library.Flags.RecoilPercent.Value / 100)
                            if Library.Flags.ModRecoil and Library.Flags.ModRecoil.Value then 
                                return Old * (Library.Flags.RecoilPercent.Value / 100)
                            end;

                            return Old
                        end))
                    end;

                    do --// silent aim 
                        local Old; Old = hookfunction(Ray.new, LPH_NO_UPVALUES(function(...)
                            local Args = {...}

                            if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                                local Origin = Args[1] 

                                Args[2] = (Combat.TargetPart.CFrame.p - Origin).Unit * 9e9;
                            end;

                            return Old(unpack(Args))
                        end))
                    end;

                end;
            end;
        end)();

    end;
end;

do --// Hooks
    LPH_NO_VIRTUALIZE(function()
        do --// Metamethods

            do --// aftermath
                if GameName == "Aftermath" then 

                    do --// Blah 
                        --local Hit; Hit = hookfunction(SENV.getHitInternal, function(...) 
                        --    local Args = {...}
                        --    if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" and not checkcaller() then 
                        --        Args[1] = Combat.TargetPart
                        --    end 
                        --    return Hit(unpack(Args))
                        --end)

                        local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                            if not checkcaller() then 
                                if tostring(self) == "CurrentDirection" and Property == "Value" then 
                                    if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" and GameFramework.FakePart then 
                                        local Position = Combat.TargetPart.CFrame.p 
                                        local Origin = GameFramework.FakePart.CFrame.p 

                                        return (Position - Origin).Unit
                                    end;
                                end; 

                                if self == Camera and Property == "CFrame" and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                                    local Traceback = debug.traceback() 
                                    if Traceback:find("GunController") and not Traceback:find("Position", 1, true) and Client.Character and Client.Character:FindFirstChild("WorldCharacter") then 
                                        return GameFramework.FakePart.CFrame
                                    end
                                end
                            end
                            
                            return Index(self, Property)
                        end)
                    end 


                    do --// Errors 
                        local Cache = LogService:GetLogHistory()
                        local Old;

                        Old = hookfunction(LogService.GetLogHistory, function(...)
                            if not checkcaller() then
                                return {unpack(Cache)};
                            end;
                            return Old(...);
                        end);
                
                        for _, Value in pairs(getconnections(ScriptContext.Error)) do
                            Value:Disable();
                        end

                    end;

                    local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                        local Args = {...}
                        local Method = getnamecallmethod() 

                        if not checkcaller() then 
                            if Method == "FireServer" then 

                                if string.lower(tostring(self)) == "error" then 
                                    return 
                                end

                            end 
                        end
                        return Namecall(self, ...)
                    end);
                end
            end

            do --// Combat warriors 
                if GameName == "Combat Warriors" then 
                    local Remotes = {}

                    local ActualRemotes = {}
                    for Index, Value in next, getgc(true) do 
                        if type(Value) == "table" and rawget(Value, "Remote") then 
                            Remotes[Value.Remote] = Value.Remote.Name
                            Remotes[Value.Name] = Value.Remote
                            for Index, Connection in next, getconnections(Value.Remote:GetPropertyChangedSignal("Name")) do 
                                Connection:Disable() 
                            end;
                    
                            for Index, Connection in next, getconnections(Value.Remote.Changed) do 
                                Connection:Disable() 
                            end;
                    
                            Value.Remote.Name = Value.Name
                        end 

                        if type(Value) == "table" and rawget(Value, "calculateFireDirection") then 
                            GameFramework.Projectiles = Value
                        end

                        if type(Value) == "table" and rawget(Value, "_setStamina") then 
                            GameFramework.Stamina = Value 
                            table.foreach(Value, warn)
                        end

                        if type(Value) == "table" and rawget(Value, "DASH_COOLDOWN") then 
                            GameFramework.Dash = Value 
                            table.foreach(Value, print)
                        end
                    end 
                    
                    local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                        if not checkcaller() then 
                            if Property == "Name" and Remotes[self] then
                                print(self.Name, " - Fake:", Remotes[self])
                                return Remotes[self]
                            end

                            if self == Mouse and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then
                                if Property == "UnitRay" then 
                                    local Old = Index(self, Property)
                                    return Ray.new(Old.Origin, (Combat.TargetPart.Position - Old.Origin).Unit)
                                end 

                                if Property == "Hit" then
                                    return Combat.TargetPart.CFrame 
                                end

                                if Property == "Position" then 
                                    local Position, _ = Camera:WorldToScreenPoint(Combat.TargetPart.Position) 

                                    return Position
                                end 
                            end 
                        end
                        return Index(self, Property)
                    end);

                    local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                        local Args = {...}
                        local Method = getnamecallmethod() 

                        if not checkcaller() then 
                            if Method == "FireServer" then 
                                if (tostring(self) == "TakeFallDamage" or tostring(self) == "StartFallDamage" or tostring(self) == "RagdollRemoteEvent") and Library.Flags.AntiFall and Library.Flags.AntiFall.Value then 
                                    return 
                                end 

                                if tostring(self) == "UpdateLastDashTick" and Library.Flags.NoDashCooldown and Library.Flags.NoDashCooldown.Value then 
                                    return 
                                end 

                                if tostring(self) == "GotHitRE" and Library.Flags.NoBear and Library.Flags.NoBear.Value then 
                                    return 
                                end

                                if tostring(self) == "tut4" or tostring(self) == "tut3" or tostring(self) == "FinishTutorial" then 
                                    return 
                                end 

                            end 
                        end
                        return Namecall(self, ...)
                    end);

                    local Old = GameFramework.Projectiles.calculateFireDirection
                    GameFramework.Projectiles.calculateFireDirection = function(...)
                        local Args = {...}
                        if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                            local Tool = Client.Character:FindFirstChildOfClass("Tool")
                            return (CFrame.lookAt(Tool.Contents.Handle.FirePoint.WorldCFrame.Position, Combat.TargetPart.Position)).LookVector * 30;
                        end 

                        return Old(unpack(Args))
                    end;

                    local Stamina = GameFramework.Stamina._setStamina
                    GameFramework.Stamina._setStamina = function(...)
                        local Args = {...}
                        if Library.Flags.InfiniteStamina.Value then
                             
                            Args[1]._stamina = 100
                            --Args[1]._staminaChangedSignal:Fire(100)

                            return
                        end

                        return Stamina(unpack(Args))
                    end

                end;
            end 

            do --// Anarchy 
                if GameName == "State Of Anarchy" then 
                    local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                        if tostring(self) == "Shoot" and Property == "CFrame" and debug.traceback() then
                            if Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart and debug.traceback():find("shootGun", 1, true) then
                                if Library.Flags.MagicBullet.Value then 
                                    local Behind = (Combat.TargetPart.CFrame * CFrame.new(0,0,1)).p;

                                    return CFrame.new(Behind, Combat.TargetPart.CFrame.p)
                                end 

                                return CFrame.new(self.Position, Combat.TargetPart.Position)
                            end
                        end 
                    
                        return Index(self, Property)
                    end)
                end 
            end 
             
            do --// Scorched 
                if GameName == "Scorched Earth" then 
                    local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                        if tostring(self):lower() == "muzzle" and Property == "CFrame" then
                            if Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart then
                                if Library.Flags.Manipulation and Library.Flags.Manipulation.Value then 
                                    local Destination = Combat.TargetPart;
                                    local Origin = self.Position;
    
                                    if Origin and Destination then
                                        local VisiblePosition = Utility:FindVisiblePosition(Origin, Destination);
                                        
                                        if VisiblePosition then
                                            Combat.ManipulatedPosition = VisiblePosition;
                                            local Player = GameFramework.EntityData and rawget(GameFramework.EntityData, Client.Name) 

                                            local Speed = Player.loadoutData.primary.staticData.velocity
                                            local Drag = Player.loadoutData.primary.staticData.drag
                                            if Drag == 0 then 
                                                Drag = 0.0001 
                                            end 
                                            local Distance = (Origin - Destination.Position).Magnitude;
                                            local TimeToHit = Distance / Speed; 
                                            local Velocity = rawget(GameFramework.EntityData, Combat.Target.Name).colliderModel:FindFirstChildOfClass("MeshPart").Velocity

                                            local Predicted = Destination.CFrame.p + (Velocity * TimeToHit);
                                            local Delta = (Predicted - Destination.CFrame.p).Magnitude;
                                    
                                            local NewSpeed = Speed - Drag * Speed ^ 2 * TimeToHit ^ 2;
                                            TimeToHit += (Delta / NewSpeed);

                                            Predicted = Destination.CFrame.p + (Velocity * TimeToHit)
                                            return CFrame.new(VisiblePosition, Predicted);
                                        else 
                                            Combat.ManipulatedDirection = (Destination.Position - Origin).Unit;
                                            Combat.ManipulatedPosition = Origin;
                                        end;
                                    end;
                                end;

                                local Player = GameFramework.EntityData and rawget(GameFramework.EntityData, Client.Name) 

                                local Speed = Player.loadoutData.primary.staticData.velocity
                                local Drag = Player.loadoutData.primary.staticData.drag
                                if Drag == 0 then 
                                    Drag = 0.0001 
                                end 

                                local Distance = (self.Position - Destination.CFrame.p).Magnitude;
                                local TimeToHit = Distance / Speed; 
                                local Velocity = rawget(GameFramework.EntityData, Combat.Target.Name).colliderModel:FindFirstChildOfClass("MeshPart").Velocity

                                local Predicted = Destination.CFrame.p + (Velocity * TimeToHit);
                                local Delta = (Predicted - Destination.CFrame.p).Magnitude;
                        
                                local NewSpeed = Speed - Drag * Speed ^ 2 * TimeToHit ^ 2;
                                TimeToHit += (Delta / NewSpeed);

                                Predicted = Destination.CFrame.p + (Velocity * TimeToHit)
                                return CFrame.new(self.Position, Combat.TargetPart.Position)
                            end
                        end 
                    
                        return Index(self, Property)
                    end)
                end
            end 

            do --// Eastern War 

                if GameName == "Eastern War" then
                    do --// Game 
                        local NewIndex; NewIndex = hookmetamethod(game, "__newindex", function(self, Property, Value) 
                            if self == Camera and Property == "CFrame" and Library.Flags.RemoveCameraBobbing and Library.Flags.RemoveCameraBobbing.Value and debug.traceback() then 
                                if debug.traceback():find("Framework", 1 , true) then 
                                    Value = Camera.CFrame 
                                end 
                            end 

                            return NewIndex(self, Property, Value)
                        end);

                        local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                            if tostring(self) == "FirePart" and Property == "CFrame" and debug.traceback() then
                                if Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart then
                                    if Library.Flags.BulletTP.Value then 
                                        local Behind = (Combat.TargetPart.CFrame * CFrame.new(0,0,1)).p;
    
                                        return CFrame.new(Behind, Combat.TargetPart.CFrame.p)
                                    end 
    
                                    return CFrame.new(self.Position, Combat.TargetPart.Position)
                                end
                            end 
                        
                            return Index(self, Property)
                        end)

                        --[[local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                            local Args = {...};
                            local Method = getnamecallmethod()
                            
                            if self == workspace and not checkcaller() then --// Silent aim
                                if debug.traceback() and Method == "Raycast" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart then
                                    local Trace = debug.traceback() 
                                    if not Trace:find("ViewmodelDistance") and not Trace:find("RenderViewmodel") then 
                                        print(debug.traceback())
                                        local HitPart = Combat.TargetPart;
                                        local Origin = Args[1];

                                        if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then
                                            Args[1] = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                            Origin = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                        end;
                                        Args[2] = (HitPart.Position - Origin).Unit * 1000;
                                    end;
                                end;
        
                            end;

                            return Namecall(self, unpack(Args));
                        end);]]
                    end 

                end;
            end;

            do --// Universal
                if not IsStudio and GameName == "Universal" then

                    do --// Main
                        local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                            if not checkcaller() then 
                                if self == Lighting and Properties["Lighting"][Property] then
                                    return Properties["Lighting"][Property];
                                end;
                            end;
                            return Index(self, Property)
                        end);

                        local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                            local Args = {...};
                            local Method = getnamecallmethod()
                            
                            local Blocked = Library.Flags.BlockedMethods and Library.Flags.BlockedMethods.Value or {};

                            if Method == "Destroy" and self == Client then 
                                return 
                            end 
                            if Method == "BulkMoveTo" and table.find(Blocked, Method) then 
                                return 
                            end;

                            if Method == "PivotTo" and table.find(Blocked, Method) then 
                                return 
                            end;

                            if Method == "TranslateBy" and table.find(Blocked, Method) then 
                                return 
                            end;

                            if Method == "SetPrimaryPartCFrame" and table.find(Blocked, Method) then 
                                return 
                            end;

                            if self == workspace and not checkcaller() then --// Silent aim
                                local Ignored;
                                local OGOrigin;
                                local CanContinue = false;

                                if Library.Flags.CheckForFireFunc and Library.Flags.CheckForFireFunc.Value and debug.traceback() and (Method == "FindPartOnRay" or Method == "FindPartOnRayWithWhitelist" or Method == "FindPartOnRayWithIgnoreList" or Method == "Raycast" or Method == "ViewportPointToRay" or Method == "ScreenPointToRay") then 
                                    local Traceback = tostring(debug.traceback()):lower();

                                    if Traceback:find("bullet") or Traceback:find("gun") or Traceback:find("fire") then 
                                        CanContinue = true;
                                    else 
                                        return Namecall(self, ...);
                                    end;
                                end;

                                if Method == "Raycast" then 
                                    OGOrigin = Args[1];
                                    Ignored = Args[3] and Args[3].FilterDescendantsInstances;
                                end;

                                if Method == "FindPartOnRayWithIgnoreList" then 
                                    OGOrigin = Args[1].Origin;
                                    Ignored = Args[2];
                                end;
                                if Method == "FindPartOnRayWithWhitelist" then 
                                    OGOrigin = Args[1].Origin;
                                end;
                                if Method == "FindPartOnRay" then 
                                    OGOrigin = Args[1].Origin;
                                end;

                                if Origin and Library.Flags.Origin then 
                                    if table.find(Library.Flags.Origin.Value, "Camera") and OGOOrigin == Camera.CFrame.p then 
                                        CanContinue = true;
                                    end;
                                else 
                                    CanContinue = true;
                                end;
                                
                                if Ignored and Library.Flags.Include then
                                    if table.find(Library.Flags.Include.Value, "Camera") and not table.find(Ignored, Camera) then
                                        return Namecall(self, ...);
                                    end;

                                    if table.find(Library.Flags.Include.Value, "Character") and not table.find(Ignored, Client.Character) then
                                        return Namecall(self, ...);
                                    end;
                                end;

                                if CanContinue and Method == "ViewportPointToRay" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Library.Flags.SilentMethod and Library.Flags.SilentMethod.Value == Method and Combat.TargetPart then 
                                    local Origin = Camera.CFrame.p;
        
                                    if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then 
                                        Origin = (Camera.CFrame * CFrame.new(0,0,1)).p;
                                    end;

                                    local HitPart = Combat.TargetPart 
                    
                                    return Ray.new(Origin, (HitPart.Position - Origin).Unit * Library.Flags.MultiplyUnitBy.Value);
                                end;
                    
                                if CanContinue and Method == "ScreenPointToRay" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Library.Flags.SilentMethod and Library.Flags.SilentMethod.Value == Method and Combat.TargetPart then
                                    local Origin = Camera.CFrame.p;

                                    if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then 
                                        Origin = (Camera.CFrame * CFrame.new(0,0,1)).p;
                                    end;
                                    local HitPart = Combat.TargetPart
                                    
                                    return Ray.new(Origin, (HitPart.Position - Origin).Unit * Library.Flags.MultiplyUnitBy.Value);
                                end;
        
                                if CanContinue and Method == "Raycast" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Library.Flags.SilentMethod and Library.Flags.SilentMethod.Value == "Raycast" and Combat.TargetPart then 
                                    local HitPart = Combat.TargetPart;
                                    local Origin = Args[1];

                                    if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then
                                        Args[1] = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                        Origin = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                    end;
                                    Args[2] = (HitPart.Position - Origin).Unit * Library.Flags.MultiplyUnitBy.Value;
                                end;
        
                                if CanContinue and Method == "FindPartOnRayWithIgnoreList" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Library.Flags.SilentMethod and Combat.TargetPart and Library.Flags.SilentMethod.Value == "FindPartOnRayWithIgnoreList" then 
                                    local HitPart = Combat.TargetPart; 
                                    local OriginalRay = Args[1];
                                    local Origin = OriginalRay.Origin;

                                    if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then 
                                        Origin = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                    end;

                                    Args[1] = Ray.new(Origin, (HitPart.Position - Origin).Unit * Library.Flags.MultiplyUnitBy.Value);
                                end;
        
                                if CanContinue and Method == "FindPartOnRayWithWhitelist" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Library.Flags.SilentMethod and Combat.TargetPart and Library.Flags.SilentMethod.Value == "FindPartOnRayWithWhitelist" then 
                                    local HitPart = Combat.TargetPart; 
                                    local OriginalRay = Args[1];
                                    local Origin = OriginalRay.Origin;

                                    if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then 
                                        Origin = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                    end;

                                    Args[1] = Ray.new(Origin, (HitPart.Position - Origin).Unit * Library.Flags.MultiplyUnitBy.Value);
                                end;

                                if CanContinue and Method == "FindPartOnRay" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Library.Flags.SilentMethod and Combat.TargetPart and Library.Flags.SilentMethod.Value == "FindPartOnRay" then 
                                    local HitPart = Combat.TargetPart; 
                                    local OriginalRay = Args[1];
                                    local Origin = OriginalRay.Origin;

                                    if Library.Flags.BulletTP and Library.Flags.BulletTP.Value then 
                                        Origin = (HitPart.CFrame * CFrame.new(0,0,1)).p;
                                    end;
                                    Args[1] = Ray.new(Origin, (HitPart.Position - Origin).Unit * Library.Flags.MultiplyUnitBy.Value);
                                end;
                            end;

                            return Namecall(self, unpack(Args));
                        end);
                    end;
                end;
            end;

            do --// CBRO
                if GameName == "Counter Blox" or GameName == "Arsenal" then 
                    local Index; Index = hookmetamethod(game, '__index', function(self, Property)
                        if not checkcaller() then --// Gun mods
                            if Property == "Value" then 
                                
                                --// Spread
                                if (self.Name == "SpreadRecovery" or self.Name == "Spread" or self.Name == "Fire" or self.Name == "Jump" or self.Name == "Stand" or self.Name == "Land" or self.Name == "Move" or self.Name == "Ladder" or self.Name == "InitialJump" or self.Name == "Crouch") and Library.Flags.ReduceSpread and Library.Flags.ReduceSpread.Value then 
                                    local Old = Index(self, Property)
                                    return Old * (Library.Flags.SpreadPercent.Value / 100)
                                end;

                                if (self.Name == "RecoilControl") and GameName == "Arsenal" and Library.Flags.ModRecoil and Library.Flags.ModRecoil.Value then 
                                    local Old = Index(self, Property)
                                    return Old * (Library.Flags.RecoilPercent.Value / 100)
                                end;

                                if self.Name == "ReloadTime" and Library.Flags.InstantReload and Library.Flags.InstantReload.Value then 
                                    return 0.1;
                                end;

                                if self.Name == "EquipTime" and Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                                    return 0.1;
                                end;
                            end;

                            
                            if self == Camera and Property == "CFrame" and GameName == "Arsenal" and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                                local Traceback = debug.traceback();

                                if Traceback and (Traceback:find("Weapons")) then
                                    task.spawn(function()
                                        GameFramework.IsFiring = true 
                                        task.wait(0.1)
                                        GameFramework.IsFiring = false;
                                    end);
                                    return CFrame.new(Client.Character.Head.CFrame.p, Combat.TargetPart.CFrame.p)
                                end; 

                                if Traceback and Traceback:find("Functions") and GameFramework.IsFiring then 
                                    return CFrame.new(Client.Character.Head.CFrame.p, Combat.TargetPart.CFrame.p)
                                end;

                            end;

                        end;

                        return Index(self, Property)
                    end)
                end;

            end

            do --// Project Delta
                if GameName == "Project Delta" then

                    local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                        local Args = {...};
                        local Method = getnamecallmethod();
                        local ExecutorCall = checkcaller();

                        if not ExecutorCall then 
                            if Method == "GetAttribute" then 
                                if Args[1] == "AccuracyDeviation" and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                                    return 0;
                                end;

                                if Args[1] == "MovementModifer" and Library.Flags.RemoveWeight and Library.Flags.RemoveWeight.Value then 
                                    return 0;
                                end;

                                if Args[1] == "BlockADS" and Library.Flags.PreventAntiScope and Library.Flags.PreventAntiScope.Value then 
                                    return false 
                                end;

                                if Args[1] == "UpAngle" and Library.Flags.ForcePitch and Library.Flags.ForcePitch.Value then 
                                    return 0;
                                end;
                            end;

                            if Method == "Raycast" then 
                                local Traceback = debug.traceback();
                                if ((Library.Flags.InstantBullet and Library.Flags.InstantBullet.Value) or (Library.Flags.Manipulation and Library.Flags.Manipulation.Value)) and Traceback and Traceback:find("onStep", 1, true)  then
                                    
                                    if Library.Flags.Manipulation and Library.Flags.Manipulation.Value and Combat.ManipulatedPosition and Combat.TargetPart and GameFramework.IsShooting then 
                                        Args[1] = Combat.ManipulatedPosition;
                                        Args[2] = (Combat.TargetPart.Position - Combat.ManipulatedPosition).Unit
                                    end;

                                    if Library.Flags.InstantBullet and Library.Flags.InstantBullet.Value then 
                                        Args[2] = Args[2] * 9e9
                                    end;
                                end;
                            end;

                            if Method == "FireServer" then 
                                if self.Name == "Drowning" and Library.Flags.AntiDrown and Library.Flags.AntiDrown.Value then 
                                    return
                                end;
                                if self.Name == "ProjectileInflict" then 

                                    if Args[1] == Client.Character.HumanoidRootPart then 
                                        return coroutine.yield();
                                    end;

                                    if Library.Flags.InstantBullet and Library.Flags.InstantBullet.Value then 
                                        if GameFramework.PDCodes[Args[3]] then 
                                            local Info = GameFramework.PDCodes[Args[3]]  
                                            local Origin = Info.Origin 
                                            local Speed = Info.Speed
                                            local Tick = Info.Tick 
                                            local Destination = Args[1].CFrame.p 

                                            local EquippedItem = ReplicatedStorage.Players[Client.name].Status.GameplayVariables.EquippedTool.Value

                                            local Distance = (Origin - Destination).Magnitude;
                                            local TimeToHit = Distance / Speed; 
                                            local Velocity = Args[1].Velocity 

                                            local Predicted = Destination + (Velocity * TimeToHit);
                                            local Delta = (Predicted - Destination).Magnitude;
                                    
                                            local NewSpeed = Speed - 0.013 * Speed ^ 2 * TimeToHit ^ 2;
                                            TimeToHit += (Delta / NewSpeed);

                                            if TimeToHit > 0 then 
                                                Tick = TimeToHit + Tick 
                                            end

                                            Args[4] = Tick --// FUCK YOU
                                        end 
                                    end 

                                    if (Library.Flags.VisualizeHits and Library.Flags.VisualizeHits.Value) or (Library.Flags.DisplayDamage and Library.Flags.DisplayDamage.Value) then 
                                        task.spawn(function()
                                            if Library.Flags.VisualizeHits and Library.Flags.VisualizeHits.Value then 
                                                Visuals:NewHitmarker(Args[1].Position)
                                            end;

                                            if Library.Flags.DisplayDamage and Library.Flags.DisplayDamage.Value then 
                                                task.spawn(function()
                                                    local Part = Args[1];
                                                    local IsHeadshot = (Part.Name:find("Head") or Part.Name:find("Face")) and true or false;
                                                    local Armor = Utility:GetArmor(Part)
                                                    local ArmorProtection = 1;
                                                    if Armor then 
                                                        ArmorProtection = Utility:GetArmorProtection(Armor, Part.Parent.Name);
                                                    end;

                                                    local BulletStats = Utility:GetBulletStats(GameFramework.LastBulletType);
                                                    local Damage = BulletStats.Damage 
                                                    local ArmorPen = BulletStats.Penetration 

                                                    if ArmorProtection ~= 1 then
                                                        local FinalizedDamage = Utility:CalculateDamage(Damage, ArmorPen, ArmorProtection, IsHeadshot)

                                                        Damage = FinalizedDamage
                                                    else 
                                                        if IsHeadshot then 
                                                            Damage = Damage * 2 
                                                        end;
                                                    end; 

                                                    Visuals:NewHitDamage(Part.Position, Damage, Args[1])
                                                end);   
                                            end;
                                        end);
                                    end;
                                end;
                            end;

                            if Method == "InvokeServer" then 
                                --[[
                                local args = {
                                    [1] = Vector3.new(0.982620894908905, -0.007612740155309439, 0.18546777963638306),
                                    [2] = -48571,
                                    [3] = 1722411459.4940598
                                }

                                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("FireProjectile"):InvokeServer(unpack(args))

                                GameFramework.HitCodes = {
                                    Args[2] = { 
                                        ["Origin"] = Camera.CFrame 
                                        ["Direction"] = Args[1]
                                        ["Hit"] = inflict Args[2]
                                    }
                                }
                                local args = {
                                    [1] = game:GetService("Players"):WaitForChild("Mother45896").Character.FaceHitBox,
                                    [2] = CFrame.new(-0.138916015625, 0.284637451171875, -0.28125, 0.8023183345794678, 0.025571443140506744, -0.5963485240936279, -0.08943109959363937, 0.9929543733596802, -0.07774131000041962, 0.5901589393615723, 0.11570535600185394, 0.7989522814750671),
                                    [3] = -48571,
                                    [4] = 1722411459.4950824
                                }

                                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ProjectileInflict"):FireServer(unpack(args))

                                
                                ]]

                                if self.Name == "FireProjectile" then 

                                    task.spawn(function()
                                        local EquippedItem = ReplicatedStorage.Players[Client.Name].Status.GameplayVariables.EquippedTool.Value;
                                        local BulletCaliber = nil;
                                        if EquippedItem then 
                                            local Attachments = EquippedItem:FindFirstChild("Attachments");
                                            local ItemProperties = EquippedItem:FindFirstChild("ItemProperties")
                                        
                                            if Attachments then 
                                                local Magazine = Attachments:FindFirstChild("Magazine");
                                                if Magazine then
                                                    Magazine = Magazine:GetChildren()[1];
                                                    if Magazine then 
                                                        local Caliber = Magazine.ItemProperties["LoadedAmmo"]:GetChildren()[1]
                                                        if Caliber then 
                                                            BulletCaliber = Caliber:GetAttribute("AmmoType")
                                                            Caliber = Caliber:GetAttribute("AmmoType");
                                                        end;
                                                    end
                                                else
                                                    if ItemProperties["LoadedAmmo"] then 
                                                        local LoadedAmmo = ItemProperties:GetAttribute("LoadedAmmo");
                                                        local Caliber = ItemProperties["LoadedAmmo"]:GetChildren()
                                                        if Caliber and Caliber[1] then
                                                            BulletCaliber = Caliber[1]:GetAttribute("AmmoType")
                                                            Caliber = Caliber[1]:GetAttribute("AmmoType"); 
                                                        end;
                                                    end;
                                                end;
                                            end;
                                        end;
                                        GameFramework.PDCodes[Args[2]] = {
                                            Tick = Args[3], 
                                            Direction = Args[1], 
                                            Origin = Camera.CFrame.p,
                                            Speed = ReplicatedStorage.AmmoTypes:FindFirstChild(BulletCaliber):GetAttribute("MuzzleVelocity"),
                                        };
                                        
                                        if not LPH_OBFUSCATED then 
                                            warn(Args[2])
                                            print(GameFramework.PDCodes[Args[2]].Speed) 
                                            print(GameFramework.PDCodes[Args[2]].Tick) 
                                            print(GameFramework.PDCodes[Args[2]].Origin)
                                        end;
                                    end);
                                end 

                                if self.Name == "FireProjectile" and Combat.ManipulatedPosition and Combat.ManipulatedDirection and Library.Flags.Manipulation and Library.Flags.Manipulation.Value and Combat.TargetPart then 
                                    Args[1] = Combat.ManipulatedDirection;
                                end;

                                if self.Name == "Reload" and Library.Flags.InstantReload and Library.Flags.InstantReload.Value then
                                    if Args[2] then 
                                        Args[1] = nil 
                                        Args[2] = 0/0 
                                        Args[3] = nil
                                    end;
                                end;
                            end;
                            
                        end;

                        return Namecall(self, unpack(Args))
                    end);

                    local NewIndex; NewIndex = hookmetamethod(game, "__newindex", function(self, Property, Value)

                        if self == Lighting and ((Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value) or (Library.Flags.AllowTime and Library.Flags.AllowTime.Value)) then 
                            if Property == "Ambient" and Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value then 
                                Value = Library.Flags.Ambience.Color;
                            end;
    
                            if Property == "ClockTime" and Library.Flags.AllowTime and Library.Flags.AllowTime.Value then
                                Value = Library.Flags.Time.Value
                            end;
                        end;

                        if self == Camera and not checkcaller() and Property == "CFrame" then
                            do --// Camera Bobbing and third person
                                if Library.Flags.RemoveCameraBobbing and Library.Flags.RemoveCameraBobbing.Value then 
                                    local Traceback = debug.traceback();

                                    if Traceback:find("updateClient", 1, true) or Traceback:find("updateShake", 1, true) then 
                                        Value = Camera.CFrame;
                                    end;
                                end;
                                if Library.Flags.ThirdPerson and Library.Flags.ThirdPerson.Value and Library.Flags.ThirdPersonToggle and Library.Flags.ThirdPersonToggle.Value then
                                    Value = Value + Camera.CFrame.LookVector * -Library.Flags.ThirdPersonDistance.Value;
                                end;
                            end;
                        end;
                        return NewIndex(self, Property, Value)
                    end);

                end;
            end;

            do --// Blackout
                if GameName == "Blackout" then 
                    local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                        local Args = {...};
                        local Method = getnamecallmethod();
                        local ExecutorCall = checkcaller();

                        if not ExecutorCall then 
                            if Method == "GetAttribute" then 
                                if Args[1] == "Stamina" and Library.Flags.InfiniteStamina and Library.Flags.InfiniteStamina.Value then 
                                    return 100;
                                end;
                            end;

                            if Method == "FireServer" then 
                                if self.Name == "Stamina" and Library.Flags.InfiniteStamina and Library.Flags.InfiniteStamina.Value then
                                    return;
                                end;

                                if self.Name == "MinigameMistake" and Library.Flags.InfiniteLockpick and Library.Flags.InfiniteLockpick.Value then 
                                    return 
                                end;
                                
                                if self.Name == "Shoot" and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                                    local Origin = Args[1];
                                    local BulletDestination = Combat.TargetPart.Position;

                                    local Direction = (BulletDestination - Origin).unit;
                                    
                                    local Orientation = CFrame.new(Origin, BulletDestination);
                                    
                                    Args[2] = Orientation;
                                end;

                                if self.Name == "Damage" and Library.Flags.AntiFall and Library.Flags.AntiFall.Value then 
                                    return;
                                end;

                                if self.Name == "MinigameResult" and Library.Flags.InstantLockpick and Library.Flags.InstantLockpick.Value then
                                    if Args[2] == nil then 
                                        Args[2] = true;
                                    end;
                                end;
                            end;

                            if Method == "Raycast" and debug.traceback() then
                                local Traceback = debug.traceback() 
                                if (Traceback:find("ActiveCast") or Traceback:find("CanRayPierce")) and Library.Flags.InstantBullet and Library.Flags.InstantBullet.Value then 
                                    Args[2] = Args[2] * 9e9;
                                end;

                                if (Traceback:find("HitboxCaster")) and Library.Flags.ExtendReach and Library.Flags.ExtendReach.Value then 
                                    Args[2] = Args[2] * 1000;
                                end;

                                --[[if (Traceback:find("ActiveCast") or Traceback:find("CanRayPierce")) and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.MagicBullet and Library.Flags.MagicBullet.Value and Combat.TargetPart then 
                                    Args[1] = (CFrame.new(Combat.TargetPart.Position) * CFrame.new(0, 0, -3)).p;
                                    Args[2] = (Combat.TargetPart.Position - Args[1]).Unit * 9e9;
                                end;]]
                            end;
                        end;

                        return Namecall(self, unpack(Args))
                    end);

                    --[[local NewIndex; NewIndex = hookmetamethod(game, "__newindex", function(self, Property, Value)
                        if not checkcaller() then

                            if self == Lighting and ((Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value) or (Library.Flags.AllowTime and Library.Flags.AllowTime.Value)) then 
                                if Property == "Ambient" and Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value then 
                                    Value = Library.Flags.Ambience.Color;
                                end;
        
                                if Property == "ClockTime" and Library.Flags.AllowTime and Library.Flags.AllowTime.Value then
                                    Value = Library.Flags.Time.Value
                                end;
                            end;

                            if Property == "CFrame" and self == Camera then
                                local Traceback = debug.traceback();

                                if Traceback:find("ScreenShake") and Library.Flags.RemoveBobbing and Library.Flags.RemoveBobbing.Value then 
                                    return NewIndex(self, Property, Camera.CFrame);
                                end;

                                if Traceback:find("RenderSteppedUpdate", 1, true) and Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                    return NewIndex(self, Property, Camera.CFrame); 
                                end;
                            end;
                        end;

                        return NewIndex(self, Property, Value);
                    end);]]
                end;
            end;

            do --// Apoc
                if GameName == "Apocalypse Rising 2" then 
                    local OldGroundCast = GameFramework.Raycast.CharacterGroundCast;
                    local OldSwimCheck = GameFramework.Raycast.SwimCheckCast;
                    local OldFire = GameFramework.Bullets.Fire;

                    local OldSend = GameFramework.Network.Send;
                    --[[do --// Guns
                        setupvalue(GameFramework.Bullets.Fire, 7, function(Character, Item, ...)
                            if Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                local Impulse = GameFramework.Recoil(Character, Item, ...);
                                Impulse[1] = Impulse[1] * 0;
                                Impulse[2] = Impulse[2] * 0;
                                Impulse[3] = Impulse[3] * 0;
                                Impulse[4] = Impulse[4] * 0;
                                Impulse[5] = Impulse[5] * 0;
                            end;
                            return GameFramework.Recoil(Character, Item, ...)
                        end);

                        setupvalue(GameFramework.Bullets.Fire, 1, function(Character, Camera, ...)
                            if Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                                return GameFramework.Spread(
                                    {
                                        MoveState = "Walking",
                                        Zooming = true,
                                    },
                                    {
                                        FirstPerson = true;
                                    }
                                );
                            end;
                            return GameFramework.Spread(Character, Camera, ...);
                        end);

                        GameFramework.Bullets.Fire = function(self, ...)
                            local Args = {...};

                            if Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart then 
                                local Position = Combat.TargetPart.Position;
                                local Origin = Args[4];

                                Args[5] = (Destination - Origin).Unit;
                            end;
                            return OldFire(self, unpack(Args))
                        end;
                    end;]]

                    do --// Networking

                        --[[local DirtyNames = {
                            ["Statistic Report"] = true,
                            ["Zombie State Resync Attempt"] = true,
                            ["Resync Leaderboard"] = true,
                            ["Sync Debug Info"] = true,
                            ["Resync Character Physics"] = true,
                            ["Update Character Position"] = true,
                            ["Get Player Stance Speed"] = true,
                            ["Force Charcter Save"] = true,
                            ["Update Character State"] = true,
                            ["Sync Near Chunk Loot"] = true,
                            ["Character Config Resync"] = true,
                            ["Animator State Desync Check"] = true,
                            ["Character Humanoid Update"] = true,
                            ["Character Root Update"] = true,
                         };
                         
                        GameFramework.Network.Send = function(self, Name, ...)
                            local Args = {...};

                            if DirtyNames[Name] then
                                return 
                            end;
                    
                            if Name:find("Set Char") then 
                                Args[1] = "Climbing";
                    
                                if Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Valu then 
                                    Args[3] = true; 
                                    Args[4] = true; 
                                end;
                            end;
                    
                            if Name == "Character Reload Firearm Intiated" and Library.Flags.InstantReload and Library.Flags.InstantReload.Value then 
                                local Item = GameFramework.Players.Character.EquippedItem.__item.Id; 
                                local Second = Args[2];
                    
                                task.spawn(function()
                                    GameFramework.Network:Send("Character Reload Firearm Comitted", Item, Second);
                                    GameFramework.Network:Send("Character Reload Firearm Clear", Item);
                                    GameFramework.Network:Send("Character Reload Firearm Clear", Item);
                                end);
                            end;
                            return OldSend(self, Name, unpack(Args));
                        end;]]

                    end;
                    
                end;
            end;

            do --// Criminality 
                if GameName == "Criminality" then 

                    do --// Adonis Bypass
                        for _, Value in pairs(getgc(true)) do
                            if type(Value) == "table" and type(rawget(Value, "Detected")) == "function" then

                                local Old; Old = hookfunction(Value.Detected, function(self, ...)
                                    local Args = {...};
                                    return Old("_", unpack(Args))
                                end);
                            end;
                        end;
                    end;

                    do --// Errors 
                        local Cache = LogService:GetLogHistory()
                        local Old;

                        Old = hookfunction(LogService.GetLogHistory, function(...)
                            if not checkcaller() then
                                return {unpack(Cache)};
                            end;
                            return Old(...);
                        end);
                
                        for _, Value in pairs(getconnections(ScriptContext.Error)) do
                            Value:Disable();
                        end

                    end;

                    local NewIndex; NewIndex = hookmetamethod(game, "__newindex", function(self, Property, Value) 
                        if not checkcaller() then 
                            if self == Lighting and ((Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value) or (Library.Flags.AllowTime and Library.Flags.AllowTime.Value)) then 
                                if Property == "Ambient" and Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value then 
                                    Value = Library.Flags.Ambience.Color;
                                end;
        
                                if Property == "ClockTime" and Library.Flags.AllowTime and Library.Flags.AllowTime.Value then
                                    Value = Library.Flags.Time.Value
                                end;
                            end;

                            if self == Camera and (Property == "CoordinateFrame" or Property == "coordinateFrame") and ((Library.Flags.RemoveBobbing and Library.Flags.RemoveBobbing.Value) or Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value) then 
                                return NewIndex(self, Property, Camera.CFrame)
                            end;

                            if Property == "Value" and (tostring(self) == "Broken" or tostring(self) == "Destroyed") and Library.Flags.AntiBreak and Library.Flags.AntiBreak.Value then
                                if Value == false then 
                                    Value = true; 
                                end;
                            end;
                        end;

                        return NewIndex(self, Property, Value);
                    end);

                    --[[local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                        if tostring(self) == "Head" and Property == "Size" and not checkcaller() then 
                            return Vector3.new(1.2000000476837158, 1, 1);
                        end;

                        if Property == "Value" and (tostring(self) == "Broken" or tostring(self) == "Destroyed") and Library.Flags.AntiBreak and Library.Flags.AntiBreak.Value and not checkcaller() and Client.Character then
                            return false;
                        end;

                        return Index(self, Property)
                    end);]]

                    local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                        local Args = {...};
                        local Method = getnamecallmethod();

                        if string.lower(Method) == "fireserver" and not checkcaller() then 

                            if (Args[1] == "__--r" or Args[1] == "HITRGP" or Args[1] == "FllH") and Library.Flags.AntiRagdoll and Library.Flags.AntiRagdoll.Value then 
                                return
                            end;

                            if Args[1] == "Drown" and Library.Flags.AntiDrown and Library.Flags.AntiDrown.Value then 
                                return 
                            end;

                            if self.Name == "__DFfDD" and Library.Flags.AntiFall and Library.Flags.AntiWire and (Library.Flags.AntiFall.Value or Library.Flags.AntiWire.Value) and Client.Character and Client.Character.Humanoid.Health >= 16 then 
                                return 
                            end; 

                            if self.Name == "GNX_S" then 
                                if Library.Flags.RapidFire and Library.Flags.RapidFire.Value then 
                                    Args[1] = 0/0;
                                end;

                                if (Library.Flags.InstantHit and Library.Flags.InstantHit.Value) or (Library.Flags.MagicBullet and Library.Flags.MagicBullet.Value) then 
                                    Args[6][1] = Args[6][1] / 9e9;
                                end;

                                task.spawn(function()
                                    GameFramework.ShotNumber += 1 
                                    delay(5, function()
                                        GameFramework.ShotNumber -= 1 
                                    end);
                                end);
                            end;

                            if self.Name == "ZFKLF_H" then 
                                local Tool     = Args[2]; 
                                local Part     = Args[5];
                                local Position = Args[6];

                                if Library.Flags.DisplayDamage and Library.Flags.DisplayDamage.Value then 
                                    task.spawn(function()

                                        local Module = require(Tool:FindFirstChild("Config"));
                                        
                                        if Module.Damage then
                                            local Damage = Module.Damage;
                                            if Part.Name == "Head" then 
                                                Damage = Damage * Module.HeadshotMultiplier 
                                            elseif Part.Name == "Left Leg" or Part.Name == "Right Leg" then 
                                                Damage = Damage * Module.LimbMultiplier 
                                            end
                                            Visuals:NewHitDamage(Position, Damage, Part)
                                        end
                                    end);
                                end
                            end
                            --[[
                                local HitRemote   = ReplicatedStorage.Events.ZFKLF_H; 

                                ShootRemote:FireServer(
                                    tick(),
                                    String,
                                    Tool,
                                    "FDS9I83",
                                    Camera.CFrame.p,
                                    {
                                        [1] = Unit
                                    }
                                );

                                HitRemote:FireServer(
                                    Emoji,
                                    Tool,
                                    String,
                                    1,
                                    Part,
                                    Position,
                                    Unit,
                                    nil,
                                    NinthArg
                                );
                            ]]
                        end;

                        return Namecall(self, unpack(Args));
                    end);
               
                    do --// getrenv stuff
                        if getrenv() and getrenv()._G then 
                            setmetatable(getrenv()._G, {
                                __newindex = function(self, Index, Value)
                                    if Index == "TTT" then
                                        local Upvalues = getupvalues(2);

                                        if Upvalues then 
                                            local GunSettings = Upvalues[2].fcf;

                                            if GunSettings and typeof(GunSettings) == "userdata" then --// check if table is proxied
                                                local RawMetaTable = getrawmetatable(GunSettings); --// fuck you pedovvz
                                                local FireRateIndex = nil;
                                                local RealFireRate = nil;

                                                if RawMetaTable then
                                                    setreadonly(RawMetaTable, false); --// incase he ever makes it readonly

                                                    if type(RawMetaTable.__index) == "table" then  --// check if its a table (majority of gunmods go here);

                                                        do --// Main Mods
                                                            if RawMetaTable.__index["FireModeSettings"] and Library.Flags.RapidFire and Library.Flags.RapidFire.Value then
                                                                RawMetaTable.__index["FireModeSettings"].SemiRate = Library.Flags.FireRate.Value
                                                                RawMetaTable.__index["FireModeSettings"].BurstRate = Library.Flags.FireRate.Value
                                                                RawMetaTable.__index["FireModeSettings"].AutoRate = Library.Flags.FireRate.Value
                                                                RawMetaTable.__index["FireModeSettings"].FireRate = Library.Flags.FireRate.Value
                                                            end;

                                                            if RawMetaTable.__index["FireSlowDown"] and Library.Flags.Walkshoot and Library.Flags.Walkshoot.Value then 
                                                                RawMetaTable.__index["FireSlowDown"].Enabled = false;
                                                            end;

                                                            if RawMetaTable.__index["BulletSettings"] then 
                                                                GameFramework.CurrentVelocity = RawMetaTable.__index["BulletSettings"].Velocity; 
                                                            end;
                                                                                        
                                                            if RawMetaTable.__index["AimSettings"] and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                                                                RawMetaTable.__index["AimSettings"].Spread = 0;
                                                            end;

                                                            if RawMetaTable.__index["SniperSettings"] and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                                                                RawMetaTable.__index["SniperSettings"].Spread = 0;
                                                            end;

                                                            if RawMetaTable.__index["Spread"] and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                                                                RawMetaTable.__index["Spread"] = 0;
                                                            end;

                                                            if RawMetaTable.__index["ChargeupEnabled"] and Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                                                                RawMetaTable.__index["ChargeupEnabled"] = false
                                                            end;

                                                            if RawMetaTable.__index["ShotgunSettings"] and Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                                                                RawMetaTable.__index["ShotgunSettings"].FirePump = false;
                                                            end;
                                        
                                                            if RawMetaTable.__index["AimSpeed"] and Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                                                                RawMetaTable.__index["AimSpeed"] = 0;
                                                            end;
                                        
                                                            if RawMetaTable.__index["SniperSettings"] and Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                                                                RawMetaTable.__index["SniperSettings"].AimSpeed = 0;
                                                            end;
                                        
                                                            if (RawMetaTable.__index["FirePumpWait1"] or RawMetaTable.__index["FirePumpWait2"]) and Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                                                                RawMetaTable.__index["FirePumpWait1"] = 0;
                                                            end;
                                        
                                                            if RawMetaTable.__index["AimSettings"] and Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                                                                RawMetaTable.__index["AimSettings"].AimSpeed = 0;
                                                            end;
                                        
                                                            if RawMetaTable.__index["ChargeUpSettings"] then 
                                                                if Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                                                                    RawMetaTable.__index["ChargeUpSettings"] = {
                                                                        ChargeTime = 0,
                                                                        ChargeDB = 0,
                                                                    };
                                                                end;
                                                            end;
                                        
                                                            if RawMetaTable.__index["EquipTime"] and Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                                                                RawMetaTable.__index["EquipTime"] = 0;
                                                            end;
                                        
                                                            if RawMetaTable.__index["EquipAnimSpeed"] and Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                                                                RawMetaTable.__index["EquipAnimSpeed"] = 9e9;
                                                            end;

                                                        end;
                                                    end;
                                                end;
                                            end;
                                        end;

                                        task.spawn(function()
                                            if not GameFramework.GunHasBeenModified then 
                                                GameFramework:CrimMods();
                                            end;
                                        end);
                                    end;
                                end;

                                --[[__index = function(self, Index)
                                    if debug.getinfo(2).name == "Shoot" then    --// Was shoot called?
                                        for Index, Value in next, getupvalues(2) do
                                            if type(Value) == "function" then  --// Get list of functions that are upvalues (level 2)

                                                --// god this is so fucking aids
                                                for Idx, Val in pairs(getupvalues(Value)) do  --// get upvalues of the upvalues that are functions
                                                    if type(Val) == "table" and rawget(Val, "accelerate") and type(rawget(Val, "accelerate")) == "function" then --// check if upvalue == table and contains index "accelerate" that is function
                                                        local Old = Val.accelerate; 

                                                        Val.accelerate = function(self, Vector) --// hook
                                                            
                                                            --// remove recoil
                                                            if Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                                                return Old(self, Vector3.new(0, 0, 0));
                                                            end;

                                                            return Old(self, Vector);
                                                        end;
                                                    end;
                                                end;
                                            end;
                                        end;
                                    end;
                                end;]]
                            });

                        else 
                        end
                    end;
                end;
            end;

            do --// Gunfight arena 
                if GameName == "Gunfight Arena" then 

                    local NewIndex; NewIndex = hookmetamethod(game, "__newindex", function(self, Property, Value) 

                        if self == Lighting and ((Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value) or (Library.Flags.AllowTime and Library.Flags.AllowTime.Value)) then 
                            if Property == "Ambient" and Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value then 
                                Value = Library.Flags.Ambience.Color;
                            end;
    
                            if Property == "ClockTime" and Library.Flags.AllowTime and Library.Flags.AllowTime.Value then
                                Value = Library.Flags.Time.Value
                            end;
                        end;

                        if not checkcaller() and Property == "CFrame" and debug.traceback() and debug.traceback():find("Fire", 1, true) and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                            return 
                        end;

                        if not checkcaller() and Property == "CFrame" and debug.traceback() and Library.Flags.RemoveBobbing and Library.Flags.RemoveBobbing.Value and (debug.traceback():find("UpdateArm", 1, true) or debug.traceback():find("WeaponRender", 1, true) or debug.traceback():find("MoveArm", 1, true) or debug.traceback():find("UpdateWeaponParts", 1, true)) then 
                            Value = Camera.CFrame
                        end;

                        return NewIndex(self, Property, Value)
                    end);

                    local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                        if not checkcaller() and Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" and Property == "CFrame" and debug.traceback() then 
                            if debug.traceback():find("Fire", 1, true) then
                                if tostring(self) ~= "Camera" then 
                                    return CFrame.new(self.Position, Combat.TargetPosition);
                                else 
                                    return CFrame.new(Combat.CurrentPosition, Combat.TargetPosition);
                                end;
                            end;
                        end;
                        return Index(self, Property)
                    end);
                end;
            end;

            do --// the skeets lol
                if GameName == "The Streets" then 
                    local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                        local Args = {...};
                        local Method = getnamecallmethod()

                        if Method == "FireServer" then 
                            if self.Name == "Input" and (Args[1] == "ml" or Args[1] == "moff1") and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                                local Velocity = Vector3.new(Combat.TargetPart.Velocity.X, 0, Combat.TargetPart.Velocity.Z)
                                local AimVelocity = Library.Flags.AimVelocity.Value; 
                                
                                local ShootAt = Combat.TargetPart.CFrame + Velocity / AimVelocity + Velocity / math.huge; 
        
                                Args[2]["mousehit"] = ShootAt;
                            end;

                        end;


                        return Namecall(self, unpack(Args));
                    end);

                    local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                        if not checkcaller() then
                            if Property == "Anchored" then 
                                return false 
                            end;
                        end;

                        return Index(self, Property)
                    end);
                end;
            end;

            do --// Lone
                if GameName == "Lone Survival" then 
                    do --// namecall
                        local Namecall; Namecall = hookmetamethod(game, "__namecall", function(self, ...)
                            local Method = getnamecallmethod();
                            local Args = {...};
                            if not checkcaller() then 
                                if Method == "Raycast" and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart and debug.traceback() then
                                    if debug.traceback():find("Projectile") then
                                        local HitPart = Combat.TargetPart;
                                        local Origin = Args[1];
                                        Args[2] = (HitPart.Position - Origin).Unit * 9e9;
                                        return Namecall(self, unpack(Args))
                                    end;
                                end;
        
                                if Method == "BulkMoveTo" then return end;
                            end;
                            return Namecall(self, ...)
                        end);
                    end;
        
                    do --// Newindex 
                        local NewIndex; NewIndex = hookmetamethod(game, "__newindex", function(self, prop, val)
        
                            if not checkcaller() and self == Camera and prop == "CFrame" and getcallingscript() and tostring(getcallingscript()):lower() == "startup" and Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                return NewIndex(self, prop, Camera.CFrame);
                            end;
                            return NewIndex(self, prop, val)
                        end);
                    end;
                end;
            end;
        end;

        do --// Game Functions

            do --// Korrupt Zombies 
                if GameName == "Korrupt Zombies" then 
                    local Manager = require(ReplicatedStorage.Modules.Client.Managers.ProjectileManager)

                    local Old = Manager.FireProjectile 
                    
                    Manager.FireProjectile = function(self, ...)
                        local Args = {...}
                    
                        if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" and type(Args[1]) == "table" then 
                            Args[1].HitPosition = Combat.TargetPart.Position 
                        end 

                        return Old(self, unpack(Args))
                    end 
                    
                    local Weapons = require(ReplicatedStorage.Modules.Shared.Managers.WeaponInfo)

                    GameFramework.OldWeapons = Utility:DeepCopy(Weapons)

                    for Index, Value in next, getgc(true) do 
                        if type(Value) == "table" and rawget(Value, "Stamina") then
                            GameFramework.Character = Value
                        end
                    end
                end 

            end 

            do --// Project Delta
                if GameName == "Project Delta" then 
                    local OldUpdateClient = GameFramework.FPS.updateClient;
                    local OldBullet = GameFramework.Bullet.CreateBullet;
                    local OldSetZoomTarget = GameFramework.SetTargets.SetZoomTarget;

                    GameFramework.FPS.updateClient = function(...)
                        local Args = {...};

                        do --// Provided in Args[1]

                            if Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                                Args[1].EquipTValue = 100;
                            end;

                            if Library.Flags.RapidFire and Library.Flags.RapidFire.Value then 
                                Args[1].FireRate = 1 / Library.Flags.FireRate.Value 
                            end;

                            if Library.Flags.InstantAim and Library.Flags.InstantAim.Value and rawget(Args[1], "AimInSpeed") and rawget(Args[1], "AimOutSpeed") then 
                                Args[1].AimInSpeed = 0;
                                Args[1].AimOutSpeed = 0;
                            end;

                            if Library.Flags.UnlockFiremodes and Library.Flags.UnlockFiremodes.Value and rawget(Args[1], "FireModes")then 
                                Args[1].FireModes = {
                                    "Auto", "Semi"
                                };
                            end;

                            if Library.Flags.RemoveObstructions and Library.Flags.RemoveObstructions.Value and rawget(Args[1], "TouchWallPosY") then 
                                Args[1].TouchWallPosY = 0;
                                Args[1].TouchWallPosZ = 0;
                                Args[1].TouchWallRotX = 0;
                                Args[1].TouchWallRotY = 0;
                            end;
                        end;

                        do  --// GameFramework.CurrentData
                            task.spawn(function()
                                if GameFramework.CurrentData then --// Character Mods
                                    Visuals.CurrentAimPart = GameFramework.CurrentData.aimPart;
                                    if Library.Flags.RemoveObstructions and Library.Flags.RemoveObstructions.Value then 
                                        GameFramework.CurrentData.springs.wallTouchTilt.Force = 0;
                                        GameFramework.CurrentData.springs.wallTouchTilt.Speed = 0;
                                    else 
                                        GameFramework.CurrentData.springs.wallTouchTilt.Force = GameFramework.Originals.Springs.wallTouchTilt.Force;
                                        GameFramework.CurrentData.springs.wallTouchTilt.Speed = GameFramework.Originals.Springs.wallTouchTilt.Speed;
                                    end;


                                    if Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                                        GameFramework.CurrentData.springs.cameraRecoil.Force = 0;
                                        GameFramework.CurrentData.springs.cameraRecoil.Speed = 0;

                                        GameFramework.CurrentData.springs.recoilPos.Force = 0;
                                        GameFramework.CurrentData.springs.recoilPos.Speed = 0;
                                        
                                        GameFramework.CurrentData.springs.recoilRot.Force = 0;
                                        GameFramework.CurrentData.springs.recoilRot.Speed = 0;
                                    else 
                                        GameFramework.CurrentData.springs.cameraRecoil.Force = GameFramework.Originals.Springs.cameraRecoil.Force;
                                        GameFramework.CurrentData.springs.cameraRecoil.Speed = GameFramework.Originals.Springs.cameraRecoil.Speed;

                                        GameFramework.CurrentData.springs.recoilPos.Force = GameFramework.Originals.Springs.recoilPos.Force;
                                        GameFramework.CurrentData.springs.recoilPos.Speed = GameFramework.Originals.Springs.recoilPos.Speed;

                                        GameFramework.CurrentData.springs.recoilRot.Force = GameFramework.Originals.Springs.recoilRot.Force;
                                        GameFramework.CurrentData.springs.recoilRot.Speed = GameFramework.Originals.Springs.recoilRot.Speed;
                                    end;

                                    if Library.Flags.InstantLean and Library.Flags.InstantLean.Value then 
                                        GameFramework.CurrentData.springs.leanAlpha.Force = 25;
                                        GameFramework.CurrentData.springs.leanAlpha.Speed = 50;
                                    else 
                                        GameFramework.CurrentData.springs.leanAlpha.Force = 50;
                                        GameFramework.CurrentData.springs.leanAlpha.Speed = 4;
                                    end;

                                    if Library.Flags.RemoveSway and Library.Flags.RemoveSway.Value then 
                                        GameFramework.CurrentData.springs.sway.Force = 0;
                                        GameFramework.CurrentData.springs.sway.Speed = 0;
                                    else 
                                        GameFramework.CurrentData.springs.sway.Force = GameFramework.Originals.Springs.sway.Force;
                                        GameFramework.CurrentData.springs.sway.Speed = GameFramework.Originals.Springs.sway.Speed;
                                    end;

                                    if Library.Flags.RemoveBobbing and Library.Flags.RemoveBobbing.Value then 
                                        GameFramework.CurrentData.springs.jumpTilt.Force = 0;
                                        GameFramework.CurrentData.springs.jumpTilt.Speed = 0;

                                        GameFramework.CurrentData.springs.walkCycle.Speed = 0;
                                        GameFramework.CurrentData.springs.walkCycle.Force = 0;

                                        GameFramework.CurrentData.springs.sprintCycle.Speed = 0;
                                        GameFramework.CurrentData.springs.sprintCycle.Force = 0;

                                        GameFramework.CurrentData.springs.strafeTilt.Speed = 0;
                                        GameFramework.CurrentData.springs.strafeTilt.Force = 0;
                                    else 
                                        GameFramework.CurrentData.springs.jumpTilt.Force = GameFramework.Originals.Springs.jumpTilt.Force;
                                        GameFramework.CurrentData.springs.jumpTilt.Speed = GameFramework.Originals.Springs.jumpTilt.Speed;

                                        GameFramework.CurrentData.springs.walkCycle.Speed = GameFramework.Originals.Springs.walkCycle.Speed;
                                        GameFramework.CurrentData.springs.walkCycle.Force = GameFramework.Originals.Springs.walkCycle.Force;

                                        GameFramework.CurrentData.springs.sprintCycle.Speed = GameFramework.Originals.Springs.sprintCycle.Speed;
                                        GameFramework.CurrentData.springs.sprintCycle.Force = GameFramework.Originals.Springs.sprintCycle.Force;

                                        GameFramework.CurrentData.springs.strafeTilt.Speed = GameFramework.Originals.Springs.strafeTilt.Speed;
                                        GameFramework.CurrentData.springs.strafeTilt.Force = GameFramework.Originals.Springs.strafeTilt.Force;
                                    end;
                                end
                            end);
                        end;

                        do --// Autoshoot
                            task.spawn(function()
                                if Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode.Value == "Silent Aim" and rawget(Args[1], "weapon") and rawget(Args[1], "WeldedTool") and rawget(Args[1], "viewModel") and rawget(Args[1], "ToolStance") and rawget(Args[1], "lastUseTime") and rawget(Args[1], "RecoilPatternPos") and rawget(Args[1], "aimPart") and Combat.TargetPart then
                                    if Library.Flags.AutoShoot and Library.Flags.AutoShoot.Value and Library.Flags.AutoShootBind and Library.Flags.AutoShootBind.Value then
                                        if Library.Flags.AutoShootMode.Value == "Standard" then 
                                            if Utility:IsVisible(Combat.TargetPart) then 
                                                GameFramework.WeaponFunctions.RangedWeaponDefault(Args[1]);
                                            end;
                                        elseif Library.Flags.AutoShootMode.Value == "Adaptive" then
                                            local FoundATarget = false
                                            if Utility:IsVisible(Combat.TargetPart) then 
                                                GameFramework.WeaponFunctions.RangedWeaponDefault(Args[1]);
                                                FoundATarget = true;
                                            end;
                                            if not FoundATarget then 
                                                for Index, Part in next, Combat.TargetPart.Parent:GetChildren() do
                                                    if Part:IsA("BasePart") and not FoundATarget then
                                                        if Part.Name:lower():find("head") and Utility:IsVisible(Part) then 
                                                            FoundATarget = true;
                                                            Combat.TargetPart = Part;
                                                        elseif Part.Name:lower():find("torso") and Utility:IsVisible(Part) then 
                                                            FoundATarget = true;
                                                            Combat.TargetPart = Part;

                                                        else 
                                                            if Utility:IsVisible(Part) then 
                                                                FoundATarget = true;
                                                                Combat.TargetPart = Part;
                                                            end;
                                                        end;
                                                    end;
                                                end;
                                            end;

                                            if FoundATarget then 
                                                GameFramework.WeaponFunctions.RangedWeaponDefault(Args[1]);
                                            end;
                                        end;
                                    end;
                                end;
                            end);
                        end;
                        return OldUpdateClient(unpack(Args))
                    end;

                    GameFramework.Bullet.CreateBullet = function(self, ...)
                        local Args = {...};

                        GameFramework.LastBulletType = tostring(Args[5]);

                        if Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Library.Flags.AimMode and Library.Flags.AimMode.Value == "Silent Aim" and Combat.TargetPart then 
                            local Origin = Camera.CFrame.p;
                            local Destination = Combat.TargetPart.Position;

                            Args[8] = {
                                ClassName = "Part",
                                CFrame = CFrame.new(Origin, Destination);
                            };

                            if Library.Flags.Manipulation and Library.Flags.Manipulation.Value then 
                                local Destination = Combat.TargetPart;
                                local Origin = Args[8].CFrame.p;

                                if Origin and Destination then
                                    local VisiblePosition = Utility:FindVisiblePosition(Origin, Destination);
                                    
                                    if VisiblePosition then
                                        Combat.ManipulatedPosition = VisiblePosition;
                                        Combat.ManipulatedDirection = (Destination.Position - VisiblePosition).unit
                                        Args[8] = {
                                            ClassName = "Part";
                                            CFrame = CFrame.new(VisiblePosition, Destination.CFrame.p);
                                            Position = VisiblePosition;
                                        };
                                    else 
                                        Combat.ManipulatedDirection = (Destination.Position - Origin).Unit;
                                        Combat.ManipulatedPosition = Origin;
                                    end;
                                end;
                            end;
                        end;

                        if Library.Flags.Tracers and Library.Flags.Tracers.Value then 
                            task.spawn(function()
                                local Origin = Vector3.new(0, 0, 0);
                                local Direction = Args[8].CFrame.lookVector;

                                local Viewmodel = Utility.CurrentViewmodel;
                                local Item = Viewmodel:FindFirstChild("Item");
                                local Barrel = nil;

                                if Item then 
                                    Barrel = Item:FindFirstChild("Barrel");

                                    if not Barrel then 
                                        local Attachments = Item:FindFirstChild("Attachments");
                                        Barrel = Attachments.Front:GetChildren()[1].Barrel;
                                    end;
                                end;

                                Origin = Barrel.Position;

                                if Library.Flags.Manipulation and Library.Flags.Manipulation.Value and GameFramework.Manipulated then 
                                    Origin = Combat.ManipulatedPosition;
                                end;

                                if Barrel then 
                                    local RayCast = Workspace:Raycast(Origin, Direction * 7500, RayParams);

                                    if RayCast and RayCast.Position then
                                        if Library.Flags.TracerMode.Value == "Line" then 
                                            Visuals:NewLine(Origin, RayCast.Position);
                                        else 
                                            Visuals:NewTracer(Origin, RayCast.Position, Workspace.NoCollision)
                                        end;
                                    end;
                                end;
                            end);
                        end;

                        task.spawn(function()
                            GameFramework.IsShooting = true; 
                            task.wait(0.5);
                            GameFramework.IsShooting = false;
                        end);
                        return OldBullet(self, unpack(Args));
                    end;

                    GameFramework.SetTargets.SetZoomTarget = function(...)
                        local Args = {...};

                        if Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                            Args[4] = 0;
                        end;

                        return OldSetZoomTarget(unpack(Args));
                    end;
                end;
            end;

            do --// Criminality
                
                if GameName == "Criminality" then
                    local FastCast = GameFramework.Modules.FastCast;
                    local GunTable = GameFramework.GunTable;
                    do --// Gun Modules and Bypass
                        if GameFramework.ACTable then 
                            hookfunction(GameFramework.ACTable.CX1, function() return end)
                            hookfunction(GameFramework.ACTable.A, function() return end)
                            hookfunction(GameFramework.ACTable.B, function() return end)
                        end;
                    end;

                    if FastCast then 
                        do --// FastCast (Wallbang)
                            local OldBlacklist = FastCast.FireWithBlacklist;

                            FastCast.FireWithBlacklist = function(self, ...)
                                local Args = {...};

                                if Args[1].fc[1] then 
                                    if Library.Flags.Wallbang and Library.Flags.Wallbang.Value then 
                                        table.insert(Args[5], Workspace.Map);
                                    end;
                                end;
                                return OldBlacklist(self, unpack(Args));
                            end;
                        end;
                    end;
                end;
            end;

            do --// Blackout
                if GameName == "Blackout" then 
                    local OldFire = GameFramework.BulletHandler.Fire;

                    GameFramework.BulletHandler.Fire = function(...)
                        local Args = {...};
                        
                        if tostring(Args[6].Character) == Client.Name then 
                            if Library.Flags.SilentAim and Library.Flags.SilentAim.Value and Combat.TargetPart  and Library.Flags.AimMode.Value == "Silent Aim" then 
                                local Origin = Args[2];
                                --local Behind = (Combat.TargetPart.CFrame * CFrame.new(0,0,1)).p;
                                local Behind = (Combat.TargetPart.CFrame * CFrame.new(0,0,1)).p;
                                if Library.Flags.MagicBullet.Value then 
                                    Args[2] = Behind 
                                    Origin = Behind
                                end 
                                Args[3] = (Combat.TargetPart.Position - Origin).Unit * 1000
                            end;

                            if Library.Flags.Tracers and Library.Flags.Tracers.Value then 
                                task.spawn(function()
                                    local Origin = Args[2];
                                    local Direction = Args[3];
                                    if Direction and Origin then 
                                        local RayCast = Workspace:Raycast(Origin, Direction, RayParams);

                                        if RayCast and RayCast.Position then 
                                            if Library.Flags.TracerMode.Value == "Line" then 
                                                Visuals:NewLine(Origin, RayCast.Position);
                                            else 
                                                Visuals:NewTracer(Origin, RayCast.Position, Camera)
                                            end;
                                        end;
                                    end;
                                end);
                            end;
                        end;
                        
                        return OldFire(unpack(Args))
                    end;
                end;
            end;
         end;
    end)();

    LPH_JIT(function() --// Criminality
        if GameName == "Criminality" then 
            --// this is a really bad method of doing it but i had to do this so wave would work.
            local GetConfig = require(ReplicatedStorage.NewModules.Shared.Extensions.GetConfig) 
            --for Index, Value in next, getgc(true) do 
            --    if type(Value) == "function" and debug.getinfo(Value).short_src and debug.getinfo(Value).short_src:find("GetConfig") and not debug.getinfo(Value).short_src:find("GetConfigAddon") then 
            --        GetConfig = Value
            --    end
            --end 
        
            local OldConfig; OldConfig = hookfunction(GetConfig, LPH_NO_UPVALUES(function(...) 
                local Table  = OldConfig(...)

                do --// Modifications 
                    if Table["Recoil"] and Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                        Table["Recoil"] = 0
                    end;

                    if Table["FireSlowDown"] and Library.Flags.Walkshoot and Library.Flags.Walkshoot.Value then 
                        Table["FireSlowDown"].Enabled = false;
                    end;

                    if Table["BulletSettings"] then 
                        GameFramework.CurrentVelocity = Table["BulletSettings"].Velocity; 
                    end;
                                                
                    if Table["AimSettings"] and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                        Table["AimSettings"].Spread = 0;
                    end;

                    if Table["SniperSettings"] and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                        Table["SniperSettings"].Spread = 0;
                    end;

                    if Table["Spread"] and Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                        Table["Spread"] = 0;
                    end;

                    if Table["ChargeupEnabled"] and Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                        Table["ChargeupEnabled"] = false
                    end;

                    if Table["ShotgunSettings"] and Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                        Table["ShotgunSettings"].FirePump = false;
                    end;

                    if Table["AimSpeed"] and Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                        Table["AimSpeed"] = 0;
                    end;

                    if Table["SniperSettings"] and Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                        Table["SniperSettings"].AimSpeed = 0;
                    end;

                    if (Table["FirePumpWait1"] or Table["FirePumpWait2"]) and Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                        Table["FirePumpWait1"] = 0;
                    end;

                    if Table["AimSettings"] and Library.Flags.InstantAim and Library.Flags.InstantAim.Value then 
                        Table["AimSettings"].AimSpeed = 0;
                    end;

                    if Table["ChargeUpSettings"] then 
                        if Library.Flags.InstantCharge and Library.Flags.InstantCharge.Value then 
                            Table["ChargeUpSettings"] = {
                                ChargeTime = 0,
                                ChargeDB = 0,
                            };
                        end;
                    end;

                    if Table["EquipTime"] and Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                        Table["EquipTime"] = 0;
                    end;

                    if Table["EquipAnimSpeed"] and Library.Flags.InstantEquip and Library.Flags.InstantEquip.Value then 
                        Table["EquipAnimSpeed"] = 9e9;
                    end;

                    task.spawn(function()
                        task.wait(1)
                        GameFramework:CrimMods()
                    end);
                end;

                return Table
            end));
        end;
    end)();
end;

do --// Loops 
    LPH_NO_VIRTUALIZE(function()
        if GameName == "Project Delta" then 
            for Index, Value in next, getconnections(RunService.RenderStepped) do 
                GameConnections[Index] = Value;
            end;
        end;

        local Current = CFrame.new();
        
        local Fake = {
            Real = {
                CFrame = CFrame.new(),
            };
            Fake = {
                CFrame = CFrame.new(),
            },
        };

        Loops.RenderStepped = RunService.RenderStepped:Connect(function(DeltaTime)
            task.spawn(function()
                Camera = Workspace.CurrentCamera;
                
                if GameFramework.FakePart then 

                    if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                        GameFramework.FakePart.CFrame = CFrame.new(Camera.CFrame.p, Combat.TargetPart.CFrame.p)
                    else 
                        GameFramework.FakePart.CFrame = Camera.CFrame
                    end 
                end

                do --// Enemies
                    --// Variables for targetting
                    local LastDistance, ClosestTarget, ActualPlayer = nil, nil, nil;
                    local LastAimDistance, ClosestAimTarget, ActualAimPlayer = nil, nil, nil;
                    
                    do --// Loop through
                        for Index, Value in next, Visuals.Enemies do
                            task.spawn(function()
                                if Value.Info.Class == "AI" then
                                
                                    Value.Info.Team = Value:GetTeam()
                                    Value.Info.Character = Value:GetCharacter();
                                else
                                    if GameName ~= "Deadline" then 
                                        Value.Info.Character = Value:GetCharacter();
                                        Value.Info.Team = Value:GetTeam()
                                    end;
                                end;
                                
                                if GameName == "Scorched Earth" and GameFramework.EntityData then 
                                    Value.Info.Data = rawget(GameFramework.EntityData, Value.Info.Username)
                                end 

                                local Class = Value.Info.Class;
                                local Team = Value.Info.Team;
                                
                                do --// Vis
                                    if (Library.Flags.ESPFlags and Library.Flags.ESPFlags.Value and table.find(Library.Flags.Flags.Value, "Visible")) or (Library.Flags.VisibleCheck and Library.Flags.VisibleCheck.Value) or (Library.Flags.HighlightVisible and Library.Flags.HighlightVisible.Value) then 
                                        local Root = Value:GetRoot();

                                        if Root and Utility:IsVisible(Root) then 
                                            Value.Info.IsVisible = true 
                                        else 
                                            Value.Info.IsVisible = false
                                        end; 

                                    else 
                                        Value.Info.IsVisible = false;
                                    end;
                                end;

                                do --// Targetting 
                                    do --// Main
                                        if Library.Flags.SilentAim and Library.Flags.SilentAim.Value and not Value.Info.IsFriendly and Library.Flags.VisibleCheck and ((Library.Flags.VisibleCheck.Value and Value.Info.IsVisible) or not Library.Flags.VisibleCheck.Value) then
                                            if (((Library.Flags.IncludeAi and Library.Flags.IncludeAi.Value and (Class == "Player" or Class == "AI")) or Class == "Player") or (Library.Flags.IncludeAi and not Library.Flags.IncludeAi.Value and Class ~= "AI")) then
                                                if not Library.Flags.TeamCheck or (Library.Flags.TeamCheck and Library.Flags.TeamCheck.Value and Team ~= Utility.Team) or (Library.Flags.TeamCheck and not Library.Flags.TeamCheck.Value) then
                                                    do --// Main
                                                        local Character = Value.Info.Character
                                                        
                                                        
                                                        local HasHumanoidPassed = false
                                                        local Target = Character and Value:GetRoot()
                                                        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")

                                                        if GameName == "Aftermath" and Character then 
                                                            if Value.Info.Class == "Player" then 
                                                                Humanoid = Character.Parent:FindFirstChildOfClass("Humanoid")
                                                            end
                                                        end; 

                                                        if GameName == "Criminality" and Character then 
                                                            if (Library.Flags.IgnoreDowned.Value and GameFramework:CheckDowned(Character)) or Character:FindFirstChildOfClass("ForceField") or Character:FindFirstChildOfClass("Forcefield") then 
                                                                HasHumanoidPassed = false; 
                                                            end;
                                                        end;

                                                        if (Humanoid and Humanoid.Health >= Library.Flags.MinimumHealth.Value) or not Humanoid or GameName == "Aftermath" then
                                                            HasHumanoidPassed = true
                                                        end
                                                
                                                        if Target and HasHumanoidPassed then
                                                            local Distance = (Target.Position - Camera.CFrame.p).Magnitude
                                                            Distance = Distance / DistanceConversions[PreferredDistances[GameName]].Conversion
                                                
                                                            if Distance < Library.Flags.MaxDistance.Value then
                                                                local ScreenPos, IsOnScreen = Camera:WorldToViewportPoint(Target.Position)
                                                                local Center = Vector2.new(Visuals.FOVCircle.Position.X.Offset, Visuals.FOVCircle.Position.Y.Offset);
                                                
                                                                if IsOnScreen then
                                                                    local DistanceFromCenter = (Center - Vector2.new(ScreenPos.X, ScreenPos.Y)).Magnitude
                                                
                                                                    if DistanceFromCenter <= (LastDistance or (Library.Flags.EnableFOV.Value and Visuals.FOVCircle.Size.X.Offset / 2) or 2000) then
                                                                        local AllowedParts = {}
                                                                        local List = Library.Flags.TargettedBones.Value
                                                                        local BodyParts = Character 
                                                                        if GameName == "Bad Business" then 
                                                                            BodyParts = Character:FindFirstChild("Body")
                                                                        end

                                                                        if BodyParts then 
                                                                            for _, Part in ipairs(BodyParts:GetChildren()) do
                                                                                if Part:IsA("BasePart") or Part:IsA("MeshPart") or Part:IsA("Part") then
                                                                                    local PartNameLowered = Part.Name:lower()
                                                        
                                                                                    if table.find(List, "Thorax") and (PartNameLowered:find("torso") or PartNameLowered:find("chest")) then
                                                                                        table.insert(AllowedParts, Part)
                                                                                    elseif table.find(List, "Legs") and PartNameLowered:find("leg") then
                                                                                        table.insert(AllowedParts, Part)
                                                                                    elseif table.find(List, "Head") and PartNameLowered:find("head") and not PartNameLowered:find("hitbox") and not PartNameLowered:find("fake") then
                                                                                        table.insert(AllowedParts, Part)
                                                                                    end
                                                                                end
                                                                            end
                                                                        end;
                                                
                                                                        if #AllowedParts >= 1 then
                                                                            local Random = math.random(1, #AllowedParts)
                                                                            ClosestTarget = AllowedParts[Random]
                                                                            LastDistance = DistanceFromCenter
                                                                            ActualPlayer = Index

                                                                            if ClosestTarget and GameName == "Games Unite" then 
                                                                                ClosestTarget = Value:GetRoot()
                                                                            end 
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
                                                    end;
                                                end
                                            end;
                                        end;
                                    end;
                                end;
        
                                do --// ESP Update
                                    if Library.Flags.MSDelay then 
                                        if tick() - Value.Info.LastUpdate > (Library.Flags.MSDelay.Value / 10000) then
                                            Value.Info.LastUpdate = tick();
                                            Value:Update()
                                        end;
                                    end;
                                end;
                                
                                do --// Anti desync 
                                    if Value.Info.Class == "Player" and Library.Flags.ResolveDesync and Library.Flags.ResolveDesync.Value and Value.Info.Character and Value.Info.Character:FindFirstChild("Head") then 
                                        local Position = ReplicatedStorage.Players:FindFirstChild(Value.Object.Name).Status.UAC:GetAttribute("LastVerifiedPos");
                                        local Root = Value.Info.Character:FindFirstChild("HumanoidRootPart");

                                        if Root then
                                            Root.CFrame = (Root.CFrame - Root.Position) + Position
                                        end;
                                    end;

                                
                                end; 

                                do --// HBE
                                    if Library.Flags.HBE and Library.Flags.HBE.Value and Library.Flags.ExpandHeads.Value and (GameName == "Blood and Iron" or GameName == "Combat Warriors") then 
                                        local Character = Value.Info.Character; 
        

                                        if Character and Character:FindFirstChild("Head") then 

                                            Character.Head.Size = Vector3.new(Library.Flags.Headsize.Value, Library.Flags.Headsize.Value, Library.Flags.Headsize.Value);
                                            Character.Head.Transparency = 0.7;
                                            Character.Head.CanCollide = false;
                                        end;
                                    else 
                                        local Character = Value.Info.Character; 
        
                                        if Character and Character:FindFirstChild("Head") then 
                                            Character.Head.Size = Vector3.new(1.2000000476837158, 1, 1);
                                            Character.Head.Transparency = 0;
                                            Character.Head.CanCollide = true;
                                        end;
                                    end;
                                end;
                            end);
                        end;
                    end;
        
                    Combat.Target = ActualPlayer;
                    Combat.TargetName = ActualPlayerName;
                    Combat.TargetPart = ClosestTarget;
        
                    if ClosestTarget then 
                        Combat.TargetPosition = ClosestTarget.Position;
                        Combat.CurrentPosition = Camera.CFrame.p;
                    end;
        
                    do --// Functions   
                        do --// Aim Assist
                            task.spawn(function()
                                Combat:AimAssist(DeltaTime);
                            end);
                        end;
        
                        do --// Info Viewer
                            if GameName == "Project Delta" then 
                                if Combat.Target and Combat.TargetPart and Library.Flags.InventoryViewer and Library.Flags.InventoryViewer.Value then
                                    local PlayerData = ReplicatedStorage.Players:FindFirstChild(Combat.Target.name)
        
                                    if PlayerData then 
                                        local Inventory = PlayerData.Clothing
                                        local Hotbar = PlayerData.Inventory
        
                                        local Options = Library.Flags.InventoryOptions.Value
                                        local Health = math.floor(Combat.Target.Character.Humanoid.Health);
        
                                        Visuals.InfoFrame.Visible = true;
                                        Visuals:UpdateInfo(Combat.TargetPart, Combat.Target, Health, Inventory, Hotbar, Options);
                                    else 
                                        Visuals.InfoFrame.Visible = false;
                                    end;
                                else 
                                    Visuals.InfoFrame.Visible = false;
                                end;
                            end;
        
                            if GameName == "Universal" then
                                if IsStudio then 
                                    if Combat.Target and Combat.TargetPart and Library.Flags.InventoryViewer and Library.Flags.InventoryViewer.Value then
                                        local Inventory = Combat.Target:FindFirstChild("Inventory");
                                        local Hotbar = Combat.Target:FindFirstChild("Hotbar");
                                        local Options = Library.Flags.InventoryOptions.Value
                                        local Health = math.floor(Combat.Target.Humanoid.Health);
            
                                        Visuals.InfoFrame.Visible = true;
                                        Visuals:UpdateInfo(Combat.TargetPart, Combat.Target, Health, Inventory, Hotbar, Options);
                                    else 
                                        Visuals.InfoFrame.Visible = false;
                                    end;
                                else 
                                    if Combat.Target and Combat.TargetPart and Library.Flags.InventoryViewer and Library.Flags.InventoryViewer.Value then
                                        local Inventory = Combat.Target.Backpack
                                        local Options = Library.Flags.InventoryOptions.Value
                                        local Health = math.floor(Combat.TargetPart.Parent.Humanoid.Health);
            
                                        Visuals.InfoFrame.Visible = true;
                                        Visuals:UpdateInfo(Combat.TargetPart, Combat.Target, Health, Inventory, nil, Options);
                                    else 
                                        Visuals.InfoFrame.Visible = false;
                                    end;
                                end;
                            end;
        
                        end;
                    end;
        
                    do --// Auras
                        task.spawn(function()
                            if Library.Flags.KillAura and Library.Flags.KillAura.Value then
                                if GameName == "Combat Warriors" then 
                                    local Tool = Client.Character and Client.Character:FindFirstChildOfClass("Tool") 
                                    if not GameFramework.LastHitTick then 
                                        GameFramework.LastHitTick = tick() 
                                    end 

                                    if Tool and Tool:FindFirstChild("CooldownProgress") and Tool.CooldownProgress.Value == 1 and Combat.TargetPart and tick() - GameFramework.LastHitTick > 0.5 then 
                                        GameFramework.LastHitTick = tick()
                                        ReplicatedStorage.Communication:WaitForChild("Events"):WaitForChild("MeleeSwing"):FireServer(Tool, 3)
                                        task.wait(0.1)

                                        local args = {
                                            [1] = Tool,
                                            [2] = Combat.TargetPart,
                                            [3] = Tool.Hitboxes:GetChildren()[1],
                                            [4] = Tool.Hitboxes:GetChildren()[1].Position,
                                            [5] = Tool.Hitboxes:GetChildren()[1]:FindFirstChild("DmgPoint").CFrame,
                                            [6] = CFrame.new(Camera.CFrame.p, Combat.TargetPart.CFrame.p).lookVector,
                                            [7] = CFrame.new(Tool.Hitboxes:GetChildren()[1].Position, Combat.TargetPart.CFrame.p).lookVector,
                                            [8] = Tool.Hitboxes:GetChildren()[1].CFrame.lookVector
                                        }

                                        ReplicatedStorage.Communication:WaitForChild("Events"):WaitForChild("MeleeDamage"):FireServer(unpack(args))
                                        
                                    end 

                                    --[[
                                        // SWING
                                        local args = {
                                            [1] = game:GetService("Players").LocalPlayer:indFirstChildOfClass("Tool"),
                                            [2] = 3
                                        }

                                        game:GetService("ReplicatedStorage"):WaitForChild("Communication"):WaitForChild("Events"):WaitForChild("MeleeSwing"):FireServer(unpack(args))


                                        // Hit 
                                        local args = {
                                            [1] = game:GetService("Players").LocalPlayer:indFirstChildOfClass("Tool"),
                                            [2] = game:GetService("Players"):WaitForChild("vtmxrs").Character:FindFirstChild("Right Leg"),
                                            [3] = game:GetService("Players").LocalPlayer:FindFirstChildOfClass("Tool").Hitboxes:GetChildren()[1],
                                            [4] = game:GetService("Players").LocalPlayer:indFirstChildOfClass("Tool").Hitboxes:GetChildren()[1].Position,
                                            [5] = game:GetService("Players").LocalPlayer:indFirstChildOfClass("Tool").Hitboxes:GetChildren()[1]:FindFirstChild("DmgPoint").CFrame,
                                            [6] = CFrame.new(Camera.CFrame.p, Target.CFrame.p).lookVector,
                                            [7] = CFrame.new(game:GetService("Players").LocalPlayer:FindFirstChildOfClass("Tool").Hitboxes:GetChildren()[1].Position, Target.CFrame.p).lookVector,
                                            [8] = game:GetService("Players").LocalPlayer:FindFirstChildOfClass("Tool").Hitboxes:GetChildren()[1].CFrame.lookVector
                                        }

                                        game:GetService("ReplicatedStorage"):WaitForChild("Communication"):WaitForChild("Events"):WaitForChild("MeleeDamage"):FireServer(unpack(args))

                                    ]]

                                end 

                                if GameName == "Blackout" then
                                    if Combat.TargetPart and (Combat.TargetPart.Position - Camera.CFrame.p).Magnitude < 20 then
                                        ReplicatedStorage.MeleeStorage.Events.Swing:InvokeServer();
                                        --task.wait(0.2);
                                        ReplicatedStorage.MeleeStorage.Events.Hit:FireServer(Combat.TargetPart, Combat.TargetPart.Position);
                                    end;
                                end;
        
                                if GameName == "Criminality" and GameFramework.CurrentConfig and Combat.TargetPart then 
                                    if not GameFramework:CheckDowned(Combat.TargetPart.Parent) and GameFramework.CurrentConfig and rawget(GameFramework.CurrentConfig, "Mains") and GameFramework.CurrentConfig.Mains.E ~= nil  and Combat.TargetPart and (Combat.TargetPart.Position - Camera.CFrame.p).Magnitude < 20 then 
                                        local SwingTime = GameFramework.CurrentConfig.Mains.E.SwingTime; 
        
                                        if Client.Character:FindFirstChildOfClass("Tool") and (Client.Character:FindFirstChildOfClass("Tool").Name == "Fire-Axe" or Client.Character:FindFirstChildOfClass("Tool").Name == "Sledgehammer") then 
                                            SwingTime = 1.5
                                        end;
        
                                        GameFramework:CrimHitObject(
                                            Combat.TargetPart.Parent,
                                            "Weapon",
                                            Combat.TargetPart,
                                            {Delay = SwingTime, AttackType = "Hit"}
                                        );
                                    end;
                                end;
                            end;
        
                            if Library.Flags.FinishAura and Library.Flags.FinishAura.Value and Combat.TargetPart then 
                                if GameName == "Criminality" then 
                                    if GameFramework:CheckDowned(Combat.TargetPart.Parent) and GameFramework.CurrentConfig and rawget(GameFramework.CurrentConfig, "Mains") and GameFramework.CurrentConfig.Mains.E ~= nil  and Combat.TargetPart and (Combat.TargetPart.Position - Camera.CFrame.p).Magnitude < 20 then 
                                        local SwingTime = GameFramework.CurrentConfig.Mains.E.SwingTime; 
                                        GameFramework:CrimHitObject(
                                            Combat.TargetPart.Parent,
                                            "Weapon",
                                            Combat.TargetPart,
                                            {Delay = SwingTime, AttackType = "Finish"}
                                        );
                                    end;
                                end;
                            end;
        
                            if Library.Flags.RegisterAura and Library.Flags.RegisterAura.Value and Library.Flags["Safe Aura"].Value  and GameName == "Criminality" then
                                local Closest, Distance;
                                for Index, Value in next, Workspace.Map.BredMakurz:GetChildren() do 
                                    if Value:FindFirstChild("Values") and Value:FindFirstChild("MainPart") and Value.Values.Broken.Value == false then 
                                        local Root = Value.MainPart;
                                        if (Client.Character.HumanoidRootPart.Position - Root.Position).Magnitude <= 10 then 
                                            Closest = Root;
                                            Distance = (Client.Character.HumanoidRootPart.Position - Root.Position).Magnitude;
                                        end;
                                    end;
                                end;
        
                                if Closest and Client.Character:FindFirstChildOfClass("Tool") then
                                    if Client.Character:FindFirstChildOfClass("Tool").Name == "Crowbar" then
                                        delay(0.4, function()
                                            GameFramework:CrimHitObject(Closest.Parent, "Register", Closest);
                                        end);
                                    else 
                                        GameFramework:CrimHitObject(Closest.Parent, "Register", Closest);
                                    end;
                                end;
                            end;
                        end);
                    end;
                    
                    do --// Autoshoot 
                        if GameName == "Criminality" then 
                            task.spawn(function()
                                if Client.Character:FindFirstChildOfClass("Tool") and Library.Flags.Autoshoot and Library.Flags.Autoshoot.Value and Combat.TargetPart then 
                                    GameFramework:FireBullet();
                                    
                                end;
                                --[[local Tool = Client.Character:FindFirstChildOfClass("Tool");
                                if Library.Flags.Autoshoot and Library.Flags.Autoshoot.Value then 
                                    if Client.Character and Client.Character:FindFirstChild("Head") and Combat.TargetPart and Client.Character:FindFirstChildOfClass("Tool") and Client.PlayerGui:FindFirstChild("GunGUI") then 
        
                                        if Tool:FindFirstChild("Values") and Tool:FindFirstChild("IsGun")then 
        
                                            local Origin = Client.Character.Head.Position;
                                            local Destination = Combat.TargetPart.Position;
        
                                            do
                                                Destination = Combat.TargetPart;
                                                if Utility:IsVisible(Destination) then 
                                                    local Firemode = Client.PlayerGui.GunGUI.Frame.Main.Mode.Text;
                                                    --"[AUTO]"
        
                                                    GameFramework.IsActivating = true;
                                                    Tool:Activate();
                                                else 
                                                    if GameFramework.IsActivating then
                                                        GameFramework.IsActivating = false;
                                                        Tool:Deactivate();
                                                    end;
                                                    
                                                end;
                                            end;
        
                                        end;
                                    end;
                                else 
                                    if GameFramework.IsActivating and Tool then 
                                        GameFramework.IsActivating = false;
                                        Tool:Deactivate();
                                    end;
                                end;]]
                            end);
                        end;
                    end;
                end;

                do --// ESP Preview
                    local Preview = Library.Windows[1] and Library.Windows[1].CurrentPreview;

                    if Preview then 
                        Preview:Update();
                    end;
                end;
        
                do --// Client

                    if GameName ~= "Gunfight Arena" then
                        if GameName ~= "Bad Business" then 
                            Utility.Team = Client.Team;
                        else 
                            local Beta = game:GetService("Teams").Beta.Players
                            local Omega = game:GetService("Teams").Omega.Players
                            local FFA = game:GetService("Teams").FFA.Players 
                            local Infected = game:GetService("Teams").Beta.Players 
                            local Survivors = game:GetService("Teams").Survivors.Players

                            if Beta:FindFirstChild(Client.Name) then 
                                return Beta 
                            end 

                            if Omega:FindFirstChild(Client.Name) then 
                                return Omega 
                            end 

                            if FFA:FindFirstChild(Client.Name) then 
                                return "FFA_DISABLE_TEAMS" 
                            end 

                            if Infected:FindFirstChild(Client.Name) then 
                                return Infected 
                            end 

                            if Survivors:FindFirstChild(Client.Name) then 
                                return Survivors 
                            end 
                        end
                    else 
                        Utility.Team = Client:GetAttribute("Team");
                    end;
        
                    do --// Character 
                        if Client.Character and GameName ~= "Deadline" then 
                            local Character = Client.Character;
                            local Root = Character:FindFirstChild("HumanoidRootPart");
                            local Humanoid = Character:FindFirstChildOfClass("Humanoid");
                            do --// Humanoid Related 
                                if Humanoid and Root then 
                                    do --// Movement
                                        if GameName == "Combat Warriors" or GameName == "Project Delta" or GameName == "Criminality" or GameName == "Universal" or GameName == "Blackout" or GameName == "The Streets" or GameName == "State Of Anarchy" or GameName == "Korrupt Zombies" then 
        
                                            do --// Viewmodel highlight
                                                if GameName == "Project Delta" then 
                                                    if Library.Flags.HighlightViewmodel and Library.Flags.HighlightViewmodel.Value and Utility.CurrentViewmodel then 
                                                        Utility.ViewmodelHighlight.Adornee = Utility.CurrentViewmodel;
                                                        Utility.ViewmodelHighlight.OutlineColor = Library.Flags.ViewmodelOutlineColor.Color;
                                                    end;
                                                end;
                                            end;
        
                                            do --// Water blur 
                                                if Library.Flags.AntiDrown and Library.Flags.AntiDrown.Value then
                                                    if GameName == "Project Delta" then 
                                                        Lighting.WaterBlur.Enabled = false;
                                                    end;
                                                end;
                                            end;
        
                                            do --// Bunny hop 
                                                if Library.Flags.Bunnyhop and Library.Flags.Bunnyhop.Value then
                                                    if GameName == "Project Delta" then 
                                                        local Old = Humanoid:GetAttribute("JumpCooldown");
                                                        if Old then 
                                                            Humanoid:SetAttribute("JumpCooldown", Old - 3);
                                                        end;
                                                    end;
                                                end;
                                            end;
        
                                            do --// Anti fall
                                                if GameName == "Blackout" then 
                                                    if Library.Flags.AntiFall and Library.Flags.AntiFall.Value then 
                                                        Client.Character.RagdollClient.Disabled = true;
                                                    else 
                                                        Client.Character.RagdollClient.Disabled = false;
                                                    end;
                                                end;
                                            end
        
                                            do --// Criminality CharStats
                                                if GameName == "Criminality" then 
                                                    local SelfStats = ReplicatedStorage.CharStats[Client.Name];
        
                                                    if Library.Flags.AntiRagdoll and Library.Flags.AntiRagdoll.Value then 
        
                                                        SelfStats.RagdollTime.Value = 0;
                                                        SelfStats.Grabbed.Value = false;
                                                        SelfStats.RagdollTime.RagdollSwitch2.Value = false;
                                                        SelfStats.RagdollTime.RagdollTime2.Value = 0;
        
                                                        SelfStats.RagdollTime.SRagdolled.Value = false;
                                                        SelfStats.Downed.Value = false;
                                                        SelfStats.Handcuffed.Value = false;
                                                        SelfStats.Grabbed.Value = false;
                                                        SelfStats.RagdollTime.RagdollSwitch.Value = false;
                                                        SelfStats.RagdollTime.SRagdolled.Value = false;
                                                        
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics, true)
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming, true)
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running, true)				
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp, true)
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)				
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed, true)
                                                        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)
        
                                                        for Index, Value in next, Character:GetChildren() do
                                                            if Value:FindFirstChild(Value.Name.."Collider") then 
                                                                Value:FindFirstChild(Value.Name.."Collider").CanCollide = false;
                                                            end;
                                                        end;
        
                                                    end;
                                                    
                                                    if SelfStats:FindFirstChild("AccelerationModifier") and SelfStats:FindFirstChild("AccelerationModifier2") then 
                                                        if Library.Flags.LessInertia and Library.Flags.LessInertia.Value then 
                                                            SelfStats.AccelerationModifier.Value = 9e9;
                                                            SelfStats.AccelerationModifier2.Value = 9e9;
                                                        else 
                                                            SelfStats.AccelerationModifier.Value = 1;
                                                            SelfStats.AccelerationModifier2.Value = 1;
                                                        end;
            
                                                        if Library.Flags.Walkshoot and Library.Flags.Walkshoot.Value then
                                                            for Index, Value in pairs(GameFramework.StaminaTables) do 
                                                                Value.WS = 18;
                                                            end;
                                                        end;
            
                                                        if Library.Flags.InfiniteStamina and Library.Flags.InfiniteStamina.Value then 
                                                            for Index, Value in pairs(GameFramework.StaminaTables) do 
                                                                Value.S = 100;
                                                            end;
                                                        end;
                                                    end
                                                end;
                                            end;
        
                                            do --//  IncreaseJump and IncreaseSpeed
        
                                                if GameName ~= "Fallen" then 
                                                    --// IncreaseSpeed
                                                    if Library.Flags.IncreaseSpeed and Library.Flags.IncreaseSpeed.Value then
                                                        if GameName ~= "Criminality" and GameName ~= "The Streets" then 
                                                            if getconnections and GameName ~= "Universal" then 
                                                                for _, Connection in ipairs(getconnections(Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"))) do 
                                                                    Connection:Disable()
                                                                end
                                                            end
                                                            Humanoid.WalkSpeed = Library.Flags.SpeedValue.Value
                                                        end 

                                                        if GameName == "Criminality" or GameName == "The Streets" then
                                                            task.spawn(function()
                                                                RunService.Heartbeat:Wait()
                                                                local Direction = Humanoid.MoveDirection
                                                                local Root = Client.Character:FindFirstChild("HumanoidRootPart")
                                                                if Root and Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then 
                                                                    Root.CFrame = Root.CFrame + Vector3.new(Direction.X * Library.Flags.SpeedValue.Value, 0, Direction.Z * Library.Flags.SpeedValue.Value)
                                                                end
                                                            end)
                                                        end
                                                    end
        
                                                    --// IncreaseJump
                                                    if Library.Flags.IncreaseJump and Library.Flags.IncreaseJump.Value then
                                                        if GameName ~= "Universal" and GameName ~= "Criminality" then 
                                                            if getconnections and GameName ~= "Universal" then 
                                                                for _, Connection in ipairs(getconnections(Humanoid:GetPropertyChangedSignal("JumpPower"))) do 
                                                                    Connection:Disable()
                                                                end
                                                            end
        
                                                            if GameName == "Project Delta" then 
                                                                Humanoid.JumpHeight = Library.Flags.JumpValue.Value;
                                                            end;
        
                                                            Humanoid.JumpPower = (GameName ~= "Project Delta" and GameName ~= "Criminality") and Library.Flags.JumpValue.Value;
                                                            if GameName == "Criminality" then 
                                                                Humanoid.UseJumpPower = false
                                                            end
                                                        else 
                                                            Humanoid.JumpHeight = Library.Flags.JumpValue.Value
                                                            if GameName == "Criminality" then 
                                                                Humanoid.UseJumpPower = false
                                                            end
                                                        end
                                                    else 
                                                        if GameName == "Criminality" then 
                                                            Humanoid.UseJumpPower = true
                                                        end
                                                    end;
                                                end;
                                            end;
        
                                            do --// Removals 
                                                if GameName == "Project Delta" and Library.Flags.EnableRemovals and Library.Flags.EnableRemovals.Value then 
                                                    local PlayerGui = Client.PlayerGui
                                                    local MainGui = PlayerGui and PlayerGui.MainGui
                                                    local ScreenVFX = MainGui and MainGui.MainFrame:FindFirstChild("ScreenEffects")
        
                                                    if ScreenVFX then 
                                                        local Removals = Library.Flags.Removals.Value
        
                                                        local Viewmodel = Utility.CurrentViewmodel
        
                                                        if Viewmodel and Viewmodel:FindFirstChild("Item") and Viewmodel.Item:FindFirstChild("Attachments") then 
                                                            local Sight = Viewmodel.Item.Attachments:FindFirstChild("Sight")
        
                                                            if Sight and Sight:FindFirstChildOfClass("Model") then 
                                                                local Reticle = Sight:FindFirstChildOfClass("Model"):FindFirstChild("Reticle")
                                                                local Prism = Reticle and Reticle:FindFirstChild("PrismScopeGui")
        
                                                                if Prism then 
                                                                    local ScopeParallax, ScopeLines = Prism.Parallax, Prism.Sight
        
                                                                    if ScopeLines and table.find(Removals, "ScopeLines") then 
                                                                        ScopeLines.Visible = false
                                                                    elseif ScopeLines and not table.find(Removals, "ScopeLines") then 
                                                                        ScopeLines.Visible = true
                                                                    end
        
                                                                    if ScopeParallax and table.find(Removals, "Scope") then 
                                                                        for _, Value in next, ScopeLines:GetChildren() do 
                                                                            Value.Visible = false
                                                                        end
                                                                        ScopeParallax.Visible = false
                                                                    elseif ScopeParallax and not table.find(Removals, "Scope") then 
                                                                        ScopeParallax.Visible = true
                                                                        for _, Value in pairs(ScopeLines:GetChildren()) do 
                                                                            Value.Visible = true
                                                                        end
                                                                    end
                                                                end
                                                            end
                                                        end
        
                                                        
                                                        if table.find(Removals, "Flashbang") then 
                                                            ScreenVFX.Flashbang.Visible = false;
                                                        end;
        
                                                        if table.find(Removals, "Parallax") then 
                                                            ScreenVFX.Parallax.Visible = false;
                                                        end;
        
                                                        ScreenVFX.Visor.Visible = not table.find(Removals, "Visor")
                                                        ScreenVFX.HelmetMask.Visible = not table.find(Removals, "Visor")
                                                        ScreenVFX.Mask.Visible = not table.find(Removals, "Visor")
                                                        PlayerGui.PerformanceMonitor3.Enabled = not table.find(Removals, "ServerInfo")
                                                        
                                                        ScreenVFX.Parent.InteractionFrame.FireMode.Visible = not table.find(Removals, "WeaponInfo")
                                                        ScreenVFX.Parent.InteractionFrame.EquipedItem.Visible = not table.find(Removals, "WeaponInfo")
                                                    end
                                                end
                                            end;

                                            do --// AntiAim 
                                                do --// Project Delta 
                                                    if GameName == "Project Delta" and Library.Flags.AntiAim and Library.Flags.AntiAim.Value then 

                                                        do --// Yaw 
                                                            Humanoid.AutoRotate = false;
                                                            local Root = Humanoid.RootPart;
                                                
                                                            local Angle = -math.atan2(Camera.CFrame.LookVector.Z, Camera.CFrame.LookVector.X) + math.rad(-90); do
                                                                if Library.Flags.YawBase.Value == "Random" then 
                                                                    Angle = -math.atan2(Camera.CFrame.LookVector.Z, Camera.CFrame.LookVector.X + math.rad(math.random(0, 360)));
                                                                elseif Library.Flags.YawBase.Value == "Spin" then 
                                                                    Angle = -math.atan2(Camera.CFrame.LookVector.Z, Camera.CFrame.LookVector.X) + tick() * 10 % 360;
                                                                elseif Library.Flags.YawBase.Value == "None" then 
                                                                    Angle = -math.atan2(Camera.CFrame.LookVector.Z, Camera.CFrame.LookVector.X) + math.rad(-90);
                                                                end
                                                            end;
                                                
                                                            local Offset = math.rad(Library.Flags.YawOffset.Value)
                                                
                                                            local Angled = CFrame.new(Root.Position) * CFrame.Angles(0, Angle + Offset, 0);
                                                
                                                            if Library.Flags.YawBase.Value == "Targets" and Combat.TargetPart then 
                                                                Angled = CFrame.new(Root.Position, Combat.TargetPart.Position) * CFrame.Angles(0, Offset, 0);
                                                            end;
                                                            Root.CFrame = Utility:Rotate(Angled)
                                                        end;

                                                        do --// Pitch
                                                            local Pitch = Library.Flags.PitchValue.Value;

                                                            if Library.Flags.PitchBase.Value == "Down" then 
                                                                Pitch = -1
                                                            elseif Library.Flags.PitchBase.Value == "Up" then 
                                                                Pitch = 1
                                                            elseif Library.Flags.PitchBase.Value == "Nod" then 
                                                                local Sine = math.sin(tick() * 2)
                                                                Pitch = Sine
                                                            elseif Library.Flags.PitchBase.Value == "Random" then 
                                                                Pitch = math.random() / 10
                                                            end;

                                                            ReplicatedStorage.Remotes.UpdateTilt:FireServer(Pitch);
                                                        end;
                                                    else 
                                                        Humanoid.AutoRotate = true;
                                                    end;
                                                end;

                                                do --// Aftermath 

                                                    if GameName == "Aftermath" then 
                                                        if Client.Character:FindFirstChild("WorldCharacter"):FindFirstChild("HumanoidRootPart") and Combat.TargetPart then
                                                            Humanoid.AutoRotate = false 
                                                            local Angle = -math.atan2(Camera.CFrame.LookVector.Z, Camera.CFrame.LookVector.X) + math.rad(-90)
                                                            local Offset = math.rad(0)
                                                            local Angled = CFrame.new(Client.Character.WorldCharacter.HumanoidRootPart.Position, Combat.TargetPart.Position) * CFrame.Angles(0, Offset, 0);
                                                            Client.Character.WorldCharacter.HumanoidRootPart.CFrame = Utility:Rotate(Angled)
                                                        else 
                                                            Humanoid.AutoRotate = true
                                                        end
                                                    end
                                                end
                                            end;

                                            do --// Character Korrupt Zombies 
                                                if GameName == "Korrupt Zombies" and GameFramework.Character then 
                                                    if Library.Flags.InfiniteStamina and Library.Flags.InfiniteStamina.Value then 
                                                        GameFramework.Character.Stamina = 9e9 
                                                        GameFramework.Character.MaxStamina = 9e9 
                                                    else
                                                        if GameFramework.Character.Stamina > 10 then 
                                                            GameFramework.Character.Stamina = 10
                                                        end

                                                        if GameFramework.Character.MaxStamina > 10 then 
                                                            GameFramework.Character.MaxStamina = 10
                                                        end
                                                    end;
                                                end
                                            end
                                        end;

                                        if GameName == "The Streets" or GameName == "Project Delta"  or GameName == "State Of Anarchy" or GameName == "Korrupt Zombies" or GameName == "Blackout" then 
                                            task.spawn(function() --// Fly 
                                                if Library.Flags.Fly and Library.Flags.Fly.Value and Library.Flags.CanFly.Value and RunService.Heartbeat:Wait() then
                                                    CameraLookVector = Camera.CFrame.LookVector 
                                                    NormalCameraLookVector = CameraLookVector
                                                    local UpPos, DownPos, NonePos = Vector3.new(0, 1, 0), Vector3.new(0, -1, 0), Vector3.new(0,0,0)
                                                
                                                    local base = Humanoid.RootPart.CFrame
                                                    local IsUpPressed = UserInputService:IsKeyDown(Enum.KeyCode.E)
                                                    local IsDownPressed = UserInputService:IsKeyDown(Enum.KeyCode.Q)
                                                    local IsForwardPressed = UserInputService:IsKeyDown(119)
                                                    local IsBackwardPressed = UserInputService:IsKeyDown(115)
                                                                
                                                    Humanoid:ChangeState(Enum.HumanoidStateType.Running)
                                                    if GameName == "The Streets" then 
                                                        Humanoid.PlatformStand = false
                                                    end;

                                                    Humanoid.RootPart.Velocity = NonePos
                                                    
                                                    --if GameName == "Project Delta"  or GameName == "Blackout" then 
                                                    --    Humanoid.RootPart.Anchored = true;
                                                    --end; 

                                                    local Delta = DeltaTime * Library.Flags.FlySpeed.Value * 3
                    
                                                    local Vector = ((
                                                        Humanoid.MoveDirection + 
                                                                    
                                                        (IsUpPressed and UpPos or NonePos) +
                                                        (IsDownPressed and DownPos or NonePos) + 
                                                                    
                                                        (IsForwardPressed and Vector3.new(0, NormalCameraLookVector.Y, 0) or NonePos) + 
                                                        (IsBackwardPressed and Vector3.new(0, -NormalCameraLookVector.Y, 0) or NonePos)
                                                    ) * Delta)
                                                                
                                                    base += Vector
                                                                
                                                    local Position = base.Position
                                                    Humanoid.RootPart.CFrame = CFrame.new(Position, Position + CameraLookVector)
                                                end;
                                            end);
                                        end;
                                    end;

                                    do --// Water Walk 
                                        if Library.Flags.WaterWalk and Library.Flags.WaterWalk.Value then 
                                            local RAY = Ray.new(Root.Position, Vector3.new(0, -10, 0))
                                            local _, Position, _, Material = Workspace:FindPartOnRayWithWhitelist(RAY, {Workspace.Terrain})
                                            
                                            if Material and Material == Enum.Material.Water then 
                                                if not GameFramework.WaterPart then 
                                                    local WaterPart = Instance.new("Part", workspace.NoCollision)
                                                    WaterPart.Transparency = 1 
                                                    WaterPart.Size = Vector3.new(10, 1, 10)
                                                    WaterPart.CanCollide = true 
                                                    WaterPart.Anchored = true
                                                    GameFramework.WaterPart = WaterPart 
                                                else 
                                                    GameFramework.WaterPart.Position = Position
                                                end
                                            end
                                        end
                                    end
                                end;
                            end;

                            do --// Self highlight 
                                if Library.Flags.SelfHighlight and Library.Flags.SelfHighlight.Value and Character then
                                    Visuals.SelfHighlight.Adornee = Character;
                                    Visuals.SelfHighlight.Enabled = true; 

                                    local Fill, Outline = Library.Flags.SelfFillColor, Library.Flags.SelfOutlineColor;

                                    Visuals.SelfHighlight.FillColor = Fill.Color; 
                                    Visuals.SelfHighlight.OutlineColor = Outline.Color; 

                                    Visuals.SelfHighlight.FillTransparency = Fill.Transparency; 
                                    Visuals.SelfHighlight.OutlineTransparency = Outline.Transparency;
                                else 
                                    Visuals.SelfHighlight.Enabled = false;
                                end;
                            end;

                            do --// head glitch 
                                if GameFramework.HeadGlitch then 
                                    Character.Head.CanCollide = false;
                                    Character.Head.CFrame = Client.Character.HumanoidRootPart.CFrame * CFrame.new(0, -4, 0);
                                end;
                            end;
                        end;
                    end;

                    if GameName == "Scorched Earth" then
                        local Character = GameFramework.EntityData and rawget(GameFramework.EntityData, Client.Name)
                        if Character then
                            local Root = rawget(GameFramework.EntityData, Client.Name).colliderModel:FindFirstChildOfClass("MeshPart")
                            local Humanoid = rawget(GameFramework.EntityData, Client.Name).colliderModel:FindFirstChildOfClass("Humanoid")
                            task.spawn(function() --// Fly 
                                if Library.Flags.Fly and Library.Flags.Fly.Value and Library.Flags.CanFly.Value and RunService.Heartbeat:Wait() then
                                    local CameraLookVector = Camera.CFrame.LookVector 
                                    local NormalCameraLookVector = CameraLookVector
                                    local UpPos, DownPos, NonePos = Vector3.new(0, 1, 0), Vector3.new(0, -1, 0), Vector3.new(0, 0, 0)
                                    
                                    local base = Root.CFrame
                                    local IsUpPressed = UserInputService:IsKeyDown(Enum.KeyCode.E)
                                    local IsDownPressed = UserInputService:IsKeyDown(Enum.KeyCode.Q)
                                    local IsForwardPressed = UserInputService:IsKeyDown(Enum.KeyCode.W)
                                    local IsBackwardPressed = UserInputService:IsKeyDown(Enum.KeyCode.S)
                                    local IsLeftPressed = UserInputService:IsKeyDown(Enum.KeyCode.D)
                                    local IsRightPressed = UserInputService:IsKeyDown(Enum.KeyCode.A)
                                    
                                    Root.Velocity = NonePos
                                    
                                    local Delta = DeltaTime * Library.Flags.FlySpeed.Value * 3
                                    
                                    local ForwardBackward = Vector3.new(NormalCameraLookVector.X, 0, NormalCameraLookVector.Z).Unit
                                    local RightLeft = Vector3.new(NormalCameraLookVector.Z, 0, -NormalCameraLookVector.X).Unit
                                    
                                    local Vector = (
                                        (Humanoid.MoveDirection) +
                                        (IsUpPressed and UpPos or NonePos) +
                                        (IsDownPressed and DownPos or NonePos) +
                                        (IsForwardPressed and ForwardBackward or NonePos) +
                                        (IsBackwardPressed and -ForwardBackward or NonePos) +
                                        (IsLeftPressed and -RightLeft or NonePos) +
                                        (IsRightPressed and RightLeft or NonePos)
                                    ) * Delta
                                    
                                    base += Vector
                                    
                                    local Position = base.Position
                                    Root.CFrame = CFrame.new(Position, Position + CameraLookVector)
                                    
                                end;
                            end);
                        end
                    end 
                    
        
                    do --// Custom Weapon Info
                        Visuals.WeaponInfo.Visible = GameName == "Project Delta" and Library.Flags.WeaponInfo and Library.Flags.WeaponInfo.Value or false;
        
                        if Visuals.WeaponInfo.Visible then 
                            Visuals.WeaponInfo.Text = "";
                            Visuals.WeaponInfo.ZIndex = 3;
                            Visuals.WeaponInfo.Position = UDim2.new(0, Camera.ViewportSize.X / 2, 0, (Camera.ViewportSize.Y / 2) + 20);
                        do
                            local EquippedItem = ReplicatedStorage.Players[Client.name].Status.GameplayVariables.EquippedTool.Value;
                            local Center = Camera.ViewportSize / 2;

                            if EquippedItem then 
                                local WeaponName = EquippedItem.Name;
        
                                local Attachments = EquippedItem:FindFirstChild("Attachments");
                                local ItemProperties = EquippedItem:FindFirstChild("ItemProperties")
                                

                                if Attachments then 
                                    local Magazine = Attachments:FindFirstChild("Magazine");
                                    if Magazine then
                                        Magazine = Magazine:GetChildren()[1];
                                        if Magazine then 
                                            local Ammo, MaxAmmo = Magazine.ItemProperties:GetAttribute("LoadedAmmo"), Magazine.ItemProperties:GetAttribute("MaxLoadedAmmo");
                                            local Caliber = Magazine.ItemProperties["LoadedAmmo"]:GetChildren()[1]
                                            if Caliber then 
                                                    Caliber = Caliber:GetAttribute("AmmoType");
        
                                                    Visuals.WeaponInfo.Text = WeaponName:upper() .. " ["..tostring(Ammo).."/"..tostring(MaxAmmo).."] | "..tostring(Caliber):upper();
                                            else 
                                                    Caliber = "NO AMMO";
        
                                                    Visuals.WeaponInfo.Text = WeaponName:upper() .. " ["..tostring(Ammo).."/"..tostring(MaxAmmo).."] | "..tostring(Caliber):upper();
                                            end;
                                        else 
                                            Visuals.WeaponInfo.Text = WeaponName .. " [NO MAGAZINE]";
                                            end;
                                        else
                                            if not ItemProperties["LoadedAmmo"] then 
                                                Visuals.WeaponInfo.Text = WeaponName .. " [NO MAGAZINE]";
                                            else 
                                                local MaxLoadedAmmo = ItemProperties:GetAttribute("MaxLoadedAmmo");
                                                local LoadedAmmo = ItemProperties:GetAttribute("LoadedAmmo");
        
                                                local Caliber = ItemProperties["LoadedAmmo"]:GetChildren()
                                                if Caliber and Caliber[1] then 
                                                    Caliber = Caliber[1]:GetAttribute("AmmoType");
                                                    
                                                    Visuals.WeaponInfo.Text = WeaponName:upper() .. " ["..tostring(LoadedAmmo).."/"..tostring(MaxLoadedAmmo).."] | "..tostring(Caliber):upper();
                                                else 
                                                    Caliber = "NO AMMO";
                                                    
                                                    Visuals.WeaponInfo.Text = WeaponName:upper() .. " ["..tostring(LoadedAmmo).."/"..tostring(MaxLoadedAmmo).."] | "..tostring(Caliber):upper();
                                                end;
                                            end;
                                        end;
                                    else 
                                        Visuals.WeaponInfo.Text = WeaponName;
                                    end;
                                end;

                                if Library.Flags.InfoFollowBarrel.Value and Visuals.CurrentAimPart then
                                    local Origin = Visuals.CurrentAimPart.CFrame.p;
                                    local LookVector = Visuals.CurrentAimPart.CFrame.lookVector; 
                                    local Distance = 1000;
                                    
                                    local Ray = Workspace:Raycast(Origin, LookVector * Distance, RayParams);
                                    if Ray and Ray.Position then 
                                        local Position, IsOnScreen = Camera:WorldToViewportPoint(Ray.Position);

                                        if IsOnScreen then 
                                            Visuals.WeaponInfo.Position = UDim2.new(0, Position.X, 0, Position.Y);
                                        else 
                                            Visuals.WeaponInfo.Position = UDim2.new(0, Center.X, 0, Center.Y + 20);
                                        end;
                                    else 
                                        Visuals.WeaponInfo.Position = UDim2.new(0, Center.X, 0, Center.Y + 20);
                                    end;
                                else 
                                    Visuals.WeaponInfo.Position = UDim2.new(0, Center.X, 0, Center.Y + 20);
                                end;
                            end;
                        end;
        
                    end;
                end;
                
                do --// FOV Stuff
                    if Library.Flags.FOVEffects then 
                        if Library.Flags.FOVPosition.Value == "Camera" then 
                            Visuals.FOVCircle.Position = UDim2.new(0, Camera.ViewportSize.X / 2, 0, Camera.ViewportSize.Y / 2);
                        else
                            local MouseLocation = UserInputService:GetMouseLocation();
                            Visuals.FOVCircle.Position = UDim2.new(0, MouseLocation.X, 0, MouseLocation.Y);
                        end;
                        Visuals.FOVGradient.Enabled = Library.Flags.FOVEffects.Value;
                        Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                        Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVEffects.Value and Color3.fromRGB(255, 255, 255) or Library.Flags.FOVColor.Color;
                        Visuals.FOVCircle.UIStroke.Transparency = Library.Flags.FOVColor.Transparency;
                        if Library.Flags.DynamicFOV.Value then
                            task.spawn(function()
                                task.wait(0.01)
                                local Difference = (OldFieldOfView / Camera.FieldOfView);
                                local FOVRadius = Library.Flags.Radius.Value;
        
                                Visuals.FOVCircle.Size = UDim2.new(0, Difference * FOVRadius, 0, Difference * FOVRadius);
                            end);
                        else 
                            Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                        end;
        
                        --// FOV effects
                        if Library.Flags["EasingDirection"] and Library.Flags["FOVEffects"].Value then 
                            Visuals:UpdateFOVColor(Library.Flags["EasingStyle"].Value, Library.Flags["EasingDirection"].Value, Library.Flags.RainbowFOV.Value);
                        end;
                    end;
                end;
        
                do --// Custom Objects
                    for Object, Data in next, CustomObjects do
                        task.spawn(function()
                            if tick() - Data.LastTick > (Library.Flags.MSDelay.Value / 10000) then
                                Data.LastTick = tick()
        
                                local CustomName = Data.CustomName
                                local Flag = Data.Flag
                                local Main = Data.Main
        
                                --local CanShow = not CustomChecks or CustomChecks(Object)
                                local CanShow = false;
                                if Data.CustomChecks then 
                                    CanShow = Data.CustomChecks(Object);
                                else 
                                    CanShow = true;
                                end;
        
                                if Object and Library.Flags[Flag] and Library.Flags[Flag].Value and CanShow then
                                    if type(CustomName) == "function" then
                                        if (Data.TextUpdate and tick() - Data.LastTextUpdate > Data.TextUpdate) or not Data.TextUpdate then
                                            CustomName = Data.CustomName(Object)
                                            Data.LastText = CustomName
                                            Data.LastTextUpdate = tick()
                                        else
                                            CustomName = Data.LastText or ""
                                        end
                                    end
        
                                    local Position = Data.GetPosition(Object)
                                    if Position then
                                        local Distance = (Camera.CFrame.p - Position).Magnitude
                                        Distance = Distance / DistanceConversions[PreferredDistances[GameName]].Conversion
        
                                        if Distance <= Library.Flags.CustomDistance.Value then
                                            local Pos, IsOnScreen = Camera:WorldToViewportPoint(Position)
        
                                            Main.Visible = IsOnScreen
                                            if Main.Visible then
                                                Main.FontFace = Library.Flags.WorldFont.Value == "Smallest Pixel" and Library.SmallFont or Library.MenuFont
                                                Main.TextSize = Library.Flags.WorldFont.Value == "Smallest Pixel" and Library.SmallSize or Library.TextSize
                                                Main.Text = CustomName
                                                Main.TextColor3 = Library.Flags[Data.Color].Color
                                                Main.Position = UDim2.new(0, Pos.X, 0, Pos.Y)
        
                                                Main.TextTransparency = Library.Flags.FadeObjects and Library.Flags.FadeObjects.Value and Visuals:Map(Distance, 0, Library.Flags.CustomDistance.Value + 40, 0, 1) or 0
        
                                                if Object.Name == "Backpack" then
                                                    Main.TextXAlignment = Enum.TextXAlignment.Left
                                                end
                                            end
                                        else
                                            Main.Visible = false
                                        end
                                    else
                                        Main.Visible = false
                                    end
                                else
                                    Main.Visible = false
                                end
                            end 
                        end);
                    end
                end;
        
                do --// Custom items like grenades, mines, etc
                    ESPConstructor:UpdateItems();
                end;
        
                do --// Tracers
                    if Library.Flags.Tracers and Library.Flags.Tracers.Value then
                        Visuals:UpdateLines()
                    end;
                end;
        
                do --// Hitmarkers
                    Visuals:UpdateHitmarkers()
                end;

                do --// Radar
                    if Library.Flags.Radar and Library.Flags.Radar.Value then
                        Visuals.RadarFrame.Visible = true;
                        local DelayV = Library.Flags.RadarDelay and  Library.Flags.RadarDelay.Value / 2.5 or 200
                        if tick() - Visuals.RadarTick >= (DelayV / 1000) then 
                            Visuals:UpdateRadar();
                            Visuals.RadarTick = tick();
                        end;
                    else 
                        Visuals.RadarFrame.Visible = false;
                    end;
                end;

                do --// Hit damage 
                    Visuals:UpdateDamage()
                end;
        
                do --// Lighting 
                    if Library.Flags.AllowAmbient and Library.Flags.AllowAmbient.Value then 
                        Lighting.Ambient = Library.Flags.Ambience.Color;
                    else 
                        if GameName == "Blackout" then 
                            Lighting.Ambient = Properties.Lighting.Ambient;
                        end
                    end;
        
                    if Library.Flags.AllowTime and Library.Flags.AllowTime.Value then 
                        Lighting.ClockTime = Library.Flags.Time.Value;
                    end;
        
                    do --// Atmosphere
                        local Atmosphere = Lighting:FindFirstChildOfClass("Atmosphere")
                        if Atmosphere then 
                            if Library.Flags["FogDensity"] and Library.Flags["FogDensity"].Value and Library.Flags["FogDensityValue"]  then 
                                Atmosphere.Density = Library.Flags["FogDensityValue"].Value;
                            end;
                
                            if Library.Flags["EnableFogColor"] and Library.Flags["EnableFogColor"].Value and Library.Flags["FogColor"] then 
                                Atmosphere.Color = Library.Flags["FogColor"].Color;
                                Atmosphere.Decay = Library.Flags["FogColor"].Color;
                            else
                                Atmosphere.Color = Properties.Atmosphere.Color;
                                Atmosphere.Decay = Properties.Atmosphere.Decay;
                            end;
                            
                            if Library.Flags["EnableGlare"] and Library.Flags["EnableGlare"].Value and Library.Flags["GlareValue"] then 
                                Atmosphere.Glare = Library.Flags["GlareValue"].Value;
                            else 
                                Atmosphere.Glare = Properties.Atmosphere.Glare;
                            end;
                            
                            if Library.Flags["EnableHaze"] and Library.Flags["EnableHaze"].Value and Library.Flags["HazeValue"] then 
                                Atmosphere.Haze = Library.Flags["HazeValue"].Value;
                            else 
                                Atmosphere.Haze = Properties.Atmosphere.Haze;
                            end;
                        end;
                    end;
        
                    do --// Clouds
                        local Clouds = Workspace:FindFirstChild("Terrain") and Workspace.Terrain:FindFirstChildOfClass("Clouds")
                        if Clouds then 
                            if Library.Flags["CloudDensity"] and Library.Flags["CloudDensity"].Value and Library.Flags["CloudDensityValue"]  then 
                                Clouds.Density = Library.Flags["CloudDensityValue"].Value;
                            end;
                
                            if Library.Flags["EnableCloudColor"] and Library.Flags["EnableCloudColor"].Value and Library.Flags["CloudColor"] then 
                                Clouds.Color = Library.Flags["CloudColor"].Color;
                            else
                                if GameName ~= "Scorched Earth" then 
                                    Clouds.Color = Properties.Clouds.Color
                                end
                            end;
                        end;
                    end;
        
                    do --// Terrain
                        if Workspace:FindFirstChild("Terrain") and GameName ~= "Fallen" then 
                            for Index, Value in pairs({"Grass", "LeafyGrass", "Ground", "Rock", "Sand"}) do 
                                if Properties.Terrain[Value] then 
                                    local OriginalColor = Properties.Terrain[Value];
                                    if Library.Flags[Value.."Enabled"] and Library.Flags[Value.."Enabled"].Value and Library.Flags[Value.."Color"] then 
                                        Workspace.Terrain:SetMaterialColor(Enum.Material[Value], Library.Flags[Value.."Color"].Color);
                                    else 
                                        Workspace.Terrain:SetMaterialColor(Enum.Material[Value], OriginalColor);
                                    end;
                                end;
                            end;
                        end;
                    end;
                end;
        
                do --// Chatbot 
                    if tick() - Chatbot.LastTick > 3 then 
                        Chatbot.LastTick = tick()
            
                        if Library.Flags.Chatspam and Library.Flags.Chatspam.Value then 
                            local Emojis = Library.Flags.Emojis.Value and Chatbot.Emojis or {""};
                            local Symbols = Library.Flags.Symbols.Value and Chatbot.Symbols or {""};
                            local Type = {""};
                            local Phrase = Chatbot.Phrases[Library.Flags.Phrase.Value or {""}];
                            local Wrapped = Chatbot:WrapMessage(Type[math.random(1, #Type)], Phrase, Emojis, Symbols);
        
                            if GameName == "Project Delta" then
                                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Wrapped, "Global");
                            else
                                if ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") then 
                                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(Wrapped, "All");
                                end;
                            end;
                        end;
                    end;
                end;
                
                do --// Crosshair
                    if GameName == "Universal" then
                        if not IsStudio and game.PlaceId ~= 3221241066 and game.PlaceId ~= 17772691665 then 
                            Visuals:UpdateCrosshair(1000, Camera.CFrame.p, Camera.CFrame.LookVector, Camera);
                        else 
                            if Camera:FindFirstChildOfClass("Model") then 
                                local GunModel = Camera:FindFirstChildOfClass("Model"):FindFirstChildOfClass("Model");
                                if GunModel then
                                    local AimPart = GunModel:FindFirstChild("AimPart");
                                    local Silencer = GunModel:FindFirstChild("Silenciador");
                                    Visuals:UpdateCrosshair(1000, AimPart.CFrame.p, AimPart.CFrame.LookVector, Camera);
                                else 
                                    Visuals.CrossAdornee.Transparency = 1;
                                end;
                            else 
                                Visuals.CrossAdornee.Transparency = 1;
                            end;
                        end;
                    elseif GameName == "Project Delta" or GameName == "State Of Anarchy" or GameName == "Scorched Earth" then
                        if GameName == "State Of Anarchy" then 
                            local VM = Workspace.Ignore.Rigs:GetChildren()[1] 
                            if VM then 
                                Visuals.CurrentAimPart = VM.Essentials.Shoot
                            end
                        end 

                        if Visuals.CurrentAimPart and Library.Flags.Crosshair and Library.Flags.Crosshair.Value then 
                            if GameName == "Project Delta" then
                                Visuals:UpdateCrosshair(1000, Visuals.CurrentAimPart.CFrame.p, Visuals.CurrentAimPart.CFrame.LookVector, Workspace.NoCollision);
                            elseif GameName == "State Of Anarchy" or GameName == "Scorched Earth" then
                                Visuals:UpdateCrosshair(1000, Visuals.CurrentAimPart.CFrame.p, Visuals.CurrentAimPart.CFrame.LookVector, Camera);
                            end;
                        else 
                            Visuals.CrossAdornee.Transparency = 1;
                        end;
                    end;
                end;

                do --// Crim instant reload 
                    if GameFramework.LastReloadTick > 0.1 and not GameFramework.IsSettingUpReload and GameName == "Criminality" and Library.Flags.InstantReload and Library.Flags.InstantReload.Value then 
                        local Remote = ReplicatedStorage.Events.GNX_R;
                        local Tool = Client.Character:FindFirstChildOfClass("Tool");
                        Remote:FireServer(tick(), "KLWE89U0", Tool);
                        Remote:FireServer(tick(), "KLWE89U0", Tool);
                        GameFramework.LastReloadTick = tick();
                    end;
                end;

                do --// Korrupt 
                    if not GameFramework.LastModUpdate then 
                        GameFramework.LastModUpdate = tick()
                    end 

                    if GameName == "Korrupt Zombies" and Library.Flags.NoRecoil then
                        local Val = Library.Flags.BulletTP.Value 
                        if not Val and Workspace.Ignore:FindFirstChild("MapFolder") then 
                            Workspace.Ignore.MapFolder.Parent = Workspace 
                        elseif Val and Workspace:FindFirstChild("MapFolder") then 
                            Workspace.MapFolder.Parent = Workspace.Ignore
                        end 

                        local Weapons = require(ReplicatedStorage.Modules.Shared.Managers.WeaponInfo)

                        if tick() - GameFramework.LastModUpdate > 3 then
                            GameFramework.LastModUpdate = tick()
                            if Library.Flags.NoRecoil.Value then
                                for Index, V in next, Weapons do 
                                    if type(Weapons[Index]) == "table" then 
                                        Weapons[Index].FirstShotRecoil = 0 
                                        Weapons[Index].RecoilPerShot = 0 
                                    end
                                end 
                            else 
                                for Index, V in next, Weapons do
                                    if type(Weapons[Index]) == "table" then 
                                        Weapons[Index].FirstShotRecoil = GameFramework.OldWeapons[Index].FirstShotRecoil
                                        Weapons[Index].RecoilPerShot =  GameFramework.OldWeapons[Index].RecoilPerShot
                                    end 
                                end 
                            end 
    
                            if Library.Flags.NoSpread.Value then
                                for Index, V in next, Weapons do 
                                    if type(Weapons[Index]) == "table" then 
                                        Weapons[Index].SpreadPerShot = 0 
                                        Weapons[Index].MaxSpread = 0 
                                    end
                                end 
                            else 
                                for Index, V in next, Weapons do
                                    if type(Weapons[Index]) == "table" then 
                                        Weapons[Index].SpreadPerShot = GameFramework.OldWeapons[Index].SpreadPerShot
                                        Weapons[Index].MaxSpread =  GameFramework.OldWeapons[Index].MaxSpread 
                                    end
                                end 
                            end 
    
                        end;

                    end
                end

                do --// Scorched Earth GunMods
                    local Player = GameFramework.EntityData and rawget(GameFramework.EntityData, Client.Name) 
                    if Player then
                        if Library.Flags.RemoveRecoil and Library.Flags.RemoveRecoil.Value then 
                            --Player.loadoutData.primary.staticData.recoilS = 0.0001
                            Player.loadoutData.primary.staticData.recoilCamVisual = Vector3.new()

                            --Player.loadoutData.secondary.staticData.recoilS = 0.0001 
                            Player.loadoutData.secondary.staticData.recoilCamVisual = Vector3.new()
                        end; 

                        if Library.Flags.RemoveDrag and Library.Flags.RemoveDrag.Value then 
                            Player.loadoutData.primary.staticData.drag = 0.0001
                            Player.loadoutData.secondary.staticData.drag = 0.0001
                        end;

                        if Library.Flags.RemoveSpread and Library.Flags.RemoveSpread.Value then 
                            Player.loadoutData.primary.staticData.accuracy = 1
                            Player.loadoutData.secondary.staticData.accuracy = 1
                        end; 

                        if Library.Flags.RemoveSway and Library.Flags.RemoveSway.Value then 
                            Player.loadoutData.primary.staticData.mouseSwayMult = 0.001
                            Player.loadoutData.primary.staticData.swayMult = 0.001
                            
                            Player.loadoutData.secondary.staticData.mouseSwayMult = 0.001
                            Player.loadoutData.secondary.staticData.swayMult = 0.001
                        end
                    end
                end
            end);
        end);

        if GameName == "Project Delta" then 
            Loops.Heartbeat = RunService.Heartbeat:Connect(function()
                if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then  --// Manipulation 
                    local Root = Client.Character.HumanoidRootPart; 
                    Fake.Real.CFrame = Root.CFrame; 

                    do --// Manipulation
                        if Combat.ManipulatedPosition and Combat.ManipulatedDirection and Library.Flags.Manipulation and Library.Flags.Manipulation.Value and Combat.TargetPart  then 
                            task.spawn(function()
                                if GameFramework.Manipulated and GameFramework.IsShooting then

                                    local OldPos = Client.Character.HumanoidRootPart.CFrame 
                                    Client.Character.HumanoidRootPart.CFrame = CFrame.new(Combat.ManipulatedPosition, Combat.ManipulatedDirection)
                                    Fake.Fake.CFrame = Client.Character.HumanoidRootPart.CFrame;
                                end;
                            end);
                        end;
                    end; 

                    if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") and Client.Character:FindFirstChild("LeftFoot") and Client.Character:FindFirstChild("Humanoid") and Library.Flags.Spiderman and Library.Flags.Spiderman.Value and Library.Flags.ClimbWalls and Library.Flags.ClimbWalls.Value then

                        pcall(function()
                            local Foot = Client.Character:FindFirstChild("LeftFoot");
                            local Root = Client.Character:FindFirstChild("HumanoidRootPart");
                            local Humanoid = Client.Character:FindFirstChild("Humanoid");
                            local RaycastResult = Workspace:Raycast(Foot.CFrame.p, Root.CFrame.lookVector * 2.5, RayParams);
        
                            if RaycastResult and RaycastResult.Instance then 
                                if not GameFramework.FlyViolationStart then 
                                    GameFramework.FlyViolationStart = tick();
                                end;
        
                                if tick() - GameFramework.FlyViolationStart >= 6 then 
                                    GameFramework.FlyViolationStart = nil;
                                end;
        
                                local TimeTillViolation = tick() - GameFramework.FlyViolationStart;
        
                                Visuals.Flybar.Visible = true;
                                local LerpedColor = Color3.fromRGB(230, 20, 20):lerp(Color3.fromRGB(20, 230, 20), 1 - TimeTillViolation / 6);
                                Visuals.FlyInvert.BackgroundColor3 = LerpedColor;
        
                                Visuals.FlyInvert.Size = UDim2.new(0, -(Visuals.Flybar.AbsoluteSize.X * (1 - TimeTillViolation / 6)), 1, 0);
        
                                Visuals.Flybar.AnchorPoint = Vector2.new(0.5, 0)
                                Visuals.Flybar.Position = UDim2.new(0.5, 0, 0.5, 270);
        
                                local ClimbSpeed = Library.Flags.SpidermanSpeed.Value
                                Root.Velocity = Vector3.new(Root.Velocity.X, ClimbSpeed, Root.Velocity.Z);
        
                                if Humanoid:GetState() ~= Enum.HumanoidStateType.Climbing then 
                                    Humanoid:ChangeState(Enum.HumanoidStateType.Climbing)
                                end;
                            else 
                                GameFramework.FlyViolationStart = nil;
                                Visuals.Flybar.Visible = false;
                            end;
                        end)
                    else 
                        GameFramework.FlyViolationStart = nil;
                        Visuals.Flybar.Visible = false;
                    end;

                    if Library.Flags.Manipulation and Library.Flags.Manipulation.Value and Library.Flags.VisualizeManipulation and Library.Flags.VisualizeManipulation.Value then

                        pcall(function()
                            local Root = Client.Character.Head
        
                            if Root and Combat.TargetPart then 
                                local VisiblePosition = Utility:FindVisiblePosition(Root.Position, Combat.TargetPart);
        
                                if VisiblePosition and GameFramework.ManipulatedIndex then 
                                    local Likeliness = 15 - GameFramework.ManipulatedIndex
        
                                    Visuals.ManipulationBar.Visible = true;
                                    local LerpedColor = Color3.fromRGB(20, 230, 20):lerp(Color3.fromRGB(230, 20, 20), 1 - Likeliness / 6);
                                    Visuals.ManipulationInvert.BackgroundColor3 = LerpedColor;
        
                                    Visuals.ManipulationInvert.Size = UDim2.new(0, -(Visuals.ManipulationBar.AbsoluteSize.X * (1 - Likeliness / 6)), 1, 0);
        
                                    Visuals.ManipulationBar.AnchorPoint = Vector2.new(0.5, 0)
                                    Visuals.ManipulationBar.Position = UDim2.new(0.5, 0, 0.5, 340);
                                end;
                            else 
        
                                Visuals.ManipulationBar.Visible = false;
                            end;
                        end)
        
                    else 
                        Visuals.ManipulationBar.Visible = false;
                    end;
                end;
            end);

            Loops.DesyncRS = RunService:BindToRenderStep("Desync", Enum.RenderPriority.First.Value, function()
                if Client.Character then 
                    local Character = Client.Character;
                    local Root = Character:FindFirstChild("HumanoidRootPart")
    
                    if Root then
                        Root.CFrame = Fake.Real.CFrame
                    end;
                end;
            end);
        end;

        if GameName == "The Streets" or GameName == "State Of Anarcy" then 
            RunService.Stepped:Connect(function()
                if Client.Character then 
                    for _, Part in next, Client.Character:GetDescendants() do 
                        if (Part:IsA("BasePart") or Part:IsA("Part") or Part:IsA("MeshPart")) and Library.Flags.Noclip and Library.Flags.Noclip.Value and Library.Flags.NoClip.Value  then 
                            Part.CanCollide = false
                        end;
                    end;
                end;
            end);
        end;

    end)()
end;

do --// Connections 
    LPH_NO_VIRTUALIZE(function() --// Macro
        do --// Camera
            Connections.Camera_ChildAdded = Camera.ChildAdded:Connect(function(Model)
                if GameName == "Project Delta" then 
                    Model:WaitForChild("Humanoid");
                    Utility:UpdateViewmodel(Model);
                end;

                task.wait(0.1);
                if Model:IsA("Model") and GameName ~= "Project Delta" then 
                    Utility:UpdateViewmodel(Model);
                end;

                do --// Criminality 
                    if GameName == "Criminality" then 
                        if Model.Name == "BlindEffect" and Library.Flags.NoFlash and Library.Flags.NoFlash.Value then 
                            Model.Enabled = false;
                        end;

                        if Model.Name == "TEGA_Effect" and Library.Flags.NoTega and Library.Flags.NoTega.Value then 
                            Model.Enabled = false;
                        end;

                        if (Model.Name == "Concussion_Effect" or Model.Name == "Concussion_Effect2") and Library.Flags.NoConcuss and Library.Flags.NoConcuss.Value then 
                            Model.Enabled = false;
                        end;
                     end;
                end;

            end);

            Connections.CameraFOV_Changed = Camera:GetPropertyChangedSignal("FieldOfView"):Connect(function()
                if Library.Flags.ZoomToggle and Library.Flags.ZoomToggle.Value and Library.Flags.ZoomKey and Library.Flags.ZoomKey.Value then 
                    Camera.FieldOfView = Library.Flags.ZoomLevel.Value;
                    return;
                end;
            end);
            
            Connections.CameraCFChanged = Camera:GetPropertyChangedSignal("CFrame"):Connect(function()
                if GameFramework.FakePart then 

                    if Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then 
                        GameFramework.FakePart.CFrame = CFrame.new(Camera.CFrame.p, Combat.TargetPart.CFrame.p)
                    else 
                        GameFramework.FakePart.CFrame = Camera.CFrame
                    end 
                end
            end)
        end;

        do --// Client 
            Connections.Client_CharacterAdded = Client.CharacterAdded:Connect(function()
                GameFramework.CurrentData = nil;
                task.wait(1);

                if GameName == "Project Delta" then 
                    task.wait(2)
                    GameFramework:New();
                end;

                repeat task.wait() until Client.Character and Client.Character:FindFirstChildOfClass("Humanoid");
                GameFramework:RunCharacterFunctions();
            end);
        end;

        do --// Studio testing
            if IsStudio then 
                local Bots = Workspace:FindFirstChild("Bots");
                local Grenades = Workspace:WaitForChild("Grenades");
                local Mines = Workspace:WaitForChild("Mines");
                local Claymores = Workspace:WaitForChild("Claymores");

                local ACS_WorkSpace = Workspace:WaitForChild("ACS_WorkSpace");
                local BulletModel = ACS_WorkSpace:WaitForChild("Client");

                if Bots then 
                    for Index, Value in next, Bots:GetChildren() do
                        if Value ~= Client then 
                            ESPConstructor:New(Value, false);
                        end;
                    end
                end;

                if Grenades then 
                    for Index, Value in next, Grenades:GetChildren() do 
                        ESPConstructor:NewGrenade({
                            Name = "F1 Grenade";
                            Model = Value;
                            Root = Value;
                        });
                    end;
                end;

                if Mines then 
                    for Index, Value in next, Mines:GetChildren() do 
                        ESPConstructor:NewMine({
                            Name = "Landmine",
                            Model = Value;
                            Root = Value;
                        });
                    end;
                end;

                if Claymores then 
                    for Index, Value in next, Claymores:GetChildren() do 
                        ESPConstructor:NewClaymore({
                            Name = "Claymore",
                            Model = Value;
                            Root = Value;
                        });
                    end;
                end;

                if BulletModel then 
                    BulletModel.ChildAdded:Connect(function(Bullet)
                        if Camera:FindFirstChildOfClass("Model") then 
                            local GunModel = Camera:FindFirstChildOfClass("Model"):FindFirstChildOfClass("Model");
                            if GunModel then
                                local AimPart = GunModel:FindFirstChild("AimPart");
                                local Silencer = GunModel:FindFirstChild("Silenciador");

                                local Ray = Workspace:Raycast(Silencer.Position, (AimPart.CFrame.LookVector * 1000), RayParams);
                                if Ray and Ray.Position then
                                    Visuals:NewLine(Silencer.CFrame.p, Ray.Position)
                                    Visuals:NewHitmarker(Ray.Position)
                                end;
                            end;
                        end;
                    end);
                end;
            end;
        end;

        do --// Grenades 
            if GameName == "Project Delta" then 
                --[[
                    Fuse Timers:
                     F1 = 3
                     M84 = 1.2
                     RGD5 = 3;
                     RGO = IMPACT
                ]]
                local Effects = Workspace.NoCollision:FindFirstChild("Effects");

                if Effects then 
                    Effects.ChildAdded:Connect(function(Grenade)
                        task.wait(0.3);
                        local Name = Grenade.Name;
                        if Name == "RGD5" or Name == "F1" or Name == "M84" or Name == "RGO" or Name == "PG4" then 

                            if Name == "RGO" or Name == "RGN" or Name == "PG4" then 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade.PrimaryPart or Grenade:FindFirstChildOfClass("MeshPart") or Grenade:FindFirstChildOfClass("Part");
                                    TimeForExplosion = 5 - 0.3;
                                    IsImpact = true;
                                });
                            else 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade.PrimaryPart or Grenade:FindFirstChildOfClass("MeshPart") or Grenade:FindFirstChildOfClass("Part");
                                    TimeForExplosion = 3 - 0.3;
                                    IsImpact = false;
                                });
                            end;
                        end;
                    end);

                    Effects.ChildRemoved:Connect(function(Grenade)
                        if Visuals.Items[Grenade] then 
                            for Index, Value in next, Visuals.Items[Grenade].Components do 
                                Value:Destroy();
                            end;
                            Visuals.Items[Grenade] = nil;
                        end;
                    end);
                end;
            end;

            if GameName == "Criminality" then 
                local Effects = Workspace.Debris.VParts;

                if Effects then 
                    Effects.ChildAdded:Connect(function(Grenade)
                        repeat task.wait() until Grenade
                        local Base = Grenade:WaitForChild("Base");
                        local Name = GameFramework.CrimMeshes[Base.MeshId];

                        if Name then 
                            if GameFramework.CrimTextures[Base.TextureID] then 
                                Name = GameFramework.CrimTextures[Base.TextureID];
                            end;


                            if Name == "Grenade" then 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade;
                                    TimeForExplosion = 2.5;
                                    IsImpact = false;
                                });
                            elseif Name == "Incendiary-Grenade" or Name == "Molotov" then 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade;
                                    TimeForExplosion = 5 - 0.3;
                                    IsImpact = true;
                                });
                            else 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade;
                                    TimeForExplosion = 1.8;
                                    IsImpact = true;
                                });
                            end;
                        end;

                        --[[if Name == "RGD5" or Name == "F1" or Name == "M84" or Name == "RGO" or Name == "PG4" then 

                            if Name == "RGO" or Name == "RGN" or Name == "PG4" then 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade.PrimaryPart or Grenade:FindFirstChildOfClass("MeshPart") or Grenade:FindFirstChildOfClass("Part");
                                    TimeForExplosion = 5 - 0.3;
                                    IsImpact = true;
                                });
                            else 
                                ESPConstructor:NewGrenade({
                                    Name = Name;
                                    Model = Grenade;
                                    Root = Grenade.PrimaryPart or Grenade:FindFirstChildOfClass("MeshPart") or Grenade:FindFirstChildOfClass("Part");
                                    TimeForExplosion = 3 - 0.3;
                                    IsImpact = false;
                                });
                            end;
                        end;]]
                    end);

                    Effects.ChildRemoved:Connect(function(Grenade)
                        if Visuals.Items[Grenade] then 
                            for Index, Value in next, Visuals.Items[Grenade].Components do 
                                Value:Destroy();
                            end;
                            Visuals.Items[Grenade] = nil;
                        end;
                    end);
                end;
            end;
        end;

        do --// Players
            do --// Main
                if GameName ~= "Gunfight Arena" then 
                    for Index, Value in next, Players:GetPlayers() do
                        if Value ~= Client and Value:IsA("Player") then 
                            ESPConstructor:New(Value, false);
                        end;
                    end;

                    Connections.Players_PlayerAdded = Players.PlayerAdded:Connect(function(Value)
                        if Value ~= Client and Value:IsA("Player") then 
                            ESPConstructor:New(Value, false);
                        end;
                    -- Library:UpdateFriendliesDropdown();
                    end);

                    Connections.Players_PlayerRemoving = Players.PlayerRemoving:Connect(function(Value)
                        Visuals.Enemies[Value]:Remove();

                    end);
                elseif GameName == "Gunfight Arena" then 
                    for Index, Value in next, Players:GetChildren() do
                        if Value ~= Client then 
                            ESPConstructor:New(Value, false);
                        end;
                    end;

                    Connections.Players_PlayerAdded = Players.ChildAdded:Connect(function(Value)
                        if Value ~= Client then 
                            ESPConstructor:New(Value, false);
                        end;
                    end);

                    Connections.Players_PlayerRemoving = Players.ChildRemoved:Connect(function(Value)
                        Visuals.Enemies[Value]:Remove();
                    end);
                end;
            end;

            do --// Frontlines
                if GameName == "Frontlines" then 

                    for Index, Value in next, Workspace:GetChildren() do
                        if Value:IsA("Model") and Value.Name == "soldier_model" then 
                            ESPConstructor:New(Value);
                        end;
                    end;

                    Workspace.ChildAdded:Connect(function(Value)
                        if Value:IsA("Model") and Value.Name == "soldier_model" then 
                            ESPConstructor:New(Value) 
                        end 
                    end);

                    Workspace.ChildRemoved:Connect(function(Value)
                        if Visuals.Enemies[Value] then 
                            Visuals.Enemies[Value]:Remove();
                        end
                    end);
                end 
            end
        end;

        pcall(function() --// Scorched Earth
            GameFramework.Assets = {} 

            for Index, Value in next, ReplicatedStorage.itemsModels:GetChildren() do 
                if Value:FindFirstChild("localModel") and Value.localModel.PrimaryPart and Value.localModel.PrimaryPart:IsA("MeshPart") then 
                    GameFramework.Assets[Value.localModel.PrimaryPart.MeshId] = Value.Name;
                end;
            end;
        end)

        do --// Blackout 
            if GameName == "Blackout" then 
                local NPCS = Workspace:FindFirstChild("NPCs");
                local WaveNPCs = Workspace.WaveSurvival.NPCs;
                local Arena = Workspace.Arena;
                local ActiveTasks = Workspace.ActiveTasks;

                do --// Brokers / Merchants
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = NPCS.Other,
                        Flag = "Traders",
                        CustomName = function(Object)
                            local Name = Object.name
                            if Object.PrimaryPart then 
                                local Distance = math.floor((Object.PrimaryPart.CFrame.p - Camera.CFrame.p).Magnitude);
                                local Contents = Object:FindFirstChild("Inventory");

                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                            end;
                    
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            if Object.PrimaryPart then 
                                return Object.PrimaryPart.CFrame.p;
                            end;
                        end;
                    });
                end;

                do --// Ammo boxes 
                    --workspace.Debris.Misc.AmmoBox.Base
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = Workspace.Debris.Misc,
                        Flag = "AmmoBox",
                        Name = "AmmoBox",
                        CustomName = function(Object)
                            local Name = Object.Name
                            if Object:FindFirstChild("Base") then 
                                local Percentage  = Object.Base.AmmoBox.Gui.Percentage;

                                local Distance = math.floor((Object:FindFirstChild("Base").CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | " .. Percentage.Text.. " remaining\nDistance: "..tostring(Distance).. "s";
                            end;
                    
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            if Object:FindFirstChild("Base") then 
                                return Object:FindFirstChild("Base").CFrame.p;
                            end;
                        end;
                        CustomChecks2 = function(Object)
                            if Object.Name == "AmmoBox" then 
                                return true 
                            end; 

                            return false
                        end;
                    });
                end;

                do --// NPCs
                    do --// Basic hostile NPC
                        for Index, Value in next, NPCS.Hostile:GetChildren() do 
                            ESPConstructor:New(Value);
                        end;

                        NPCS.Hostile.ChildAdded:Connect(function(Value)
                            ESPConstructor:New(Value);
                        end);

                        NPCS.Hostile.ChildRemoved:Connect(function(Value)
                            Visuals.Enemies[Value]:Remove();
                        end);
                    end;

                    do --// Wave NPC
                        for Index, Value in next, WaveNPCs:GetChildren() do 
                            ESPConstructor:New(Value);
                        end;

                        WaveNPCs.ChildAdded:Connect(function(Value)
                            ESPConstructor:New(Value);
                        end);

                        WaveNPCs.ChildRemoved:Connect(function(Value)
                            Visuals.Enemies[Value]:Remove();
                        end);
                    end;

                    do --// Arena NPC 
                        for Index, Value in next, Arena:GetChildren() do
                            if Value:IsA("Model") and Value:FindFirstChild("CurrentGear") then 
                                ESPConstructor:New(Value);
                            end;
                        end;

                        Arena.ChildAdded:Connect(function(Value)
                            task.wait(0.5)
                            if Value:IsA("Model") and Value:FindFirstChild("CurrentGear") then 
                                ESPConstructor:New(Value);
                            end;
                        end);

                        Arena.ChildRemoved:Connect(function(Value)
                            if Visuals.Enemies[Value] then 
                                Visuals.Enemies[Value]:Remove();
                            end;
                        end);
                    end;

                    do --// Task NPCs 
                        for Index, Value in next, ActiveTasks:GetChildren() do 
                            for Index, Value in next, Value:GetChildren() do 
                                if Value:IsA("Model") and Value:FindFirstChild("CurrentGear") then 
                                    ESPConstructor:New(Value);
                                end;
                            end;

                            Value.ChildAdded:Connect(function(Value) 
                                task.wait(0.5);
                                if Value:IsA("Model") and Value:FindFirstChild("CurrentGear") then 
                                    ESPConstructor:New(Value);
                                end;
                            end);

                            Value.ChildRemoved:Connect(function(Value)
                                if Visuals.Enemies[Value] then 
                                    Visuals.Enemies[Value]:Remove();
                                end;
                            end);
                        end;

                        ActiveTasks.ChildAdded:Connect(function(Value)
                            for Index, Value in next, Value:GetChildren() do 
                                if Value:IsA("Model") and Value:FindFirstChild("CurrentGear") then 
                                    ESPConstructor:New(Value);
                                end;
                            end;

                            Value.ChildAdded:Connect(function(Value) 
                                task.wait(0.5);
                                if Value:IsA("Model") and Value:FindFirstChild("CurrentGear") then 
                                    ESPConstructor:New(Value);
                                end;
                            end);

                            Value.ChildRemoved:Connect(function(Value)
                                if Visuals.Enemies[Value] then 
                                    Visuals.Enemies[Value]:Remove();
                                end;
                            end);
                        end);
                    end;
                end;    

                do --// Airdrops
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = Workspace.Debris.Airdrop,
                        Flag = "Airdrops",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Distance = Object.PrimaryPart and math.floor((Object.PrimaryPart.CFrame.p - Camera.CFrame.p).Magnitude);
                            Name = Name .. " | Distance: "..tostring(Distance).. "s";
                    
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            if Object and Object.PrimaryPart then 
                                return Object.PrimaryPart.CFrame.p;
                            end;
                        end;
                    });
                end;

                do --// Terminals
                    
                    ESPConstructor:NewListener({
                        Type = "MeshPart",
                        Parent = Workspace.Terminals,
                        Flag = "Terminals",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Distance = math.floor((Object.CFrame.p - Camera.CFrame.p).Magnitude);
                            Name = Name .. " | Distance: "..tostring(Distance).. "s";
                    
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            if Object then 
                                return Object.CFrame.p;
                            end;
                        end;
                    });
                end;

                do --// Corpses
                    ESPConstructor:NewListener({
                        Type = "MeshPart",
                        Parent = Workspace.Debris.Loot,
                        Flag = "Bodybags",
                        CustomName = function(Object)
                            local ObjectName = Object:FindFirstChild("LootTable") and Object:FindFirstChild("LootTable"):GetAttribute("LootName") or "";
                            if Object.Position then
                                local Money, Valuables = 0, 0;
                                if Object:FindFirstChild("LootTable") then
                                    Money = Object:FindFirstChild("LootTable"):GetAttribute("Cash");
                                    Valuables = Object:FindFirstChild("LootTable"):GetAttribute("Valuables");
                                end;
                                local Distance = math.floor((Object.Position - Camera.CFrame.p).Magnitude);
                                if Object.Name == "DeathBag" then 
                                    Name = ObjectName.."'s ".. "Body bag" .." | Distance: "..tostring(Distance).. "s\n".."Money: "..tostring(Money) .. " Valuables: "..tostring(Valuables);
                                else 
                                    Name = ObjectName.." | Distance: "..tostring(Distance).. "s\n".."Money: "..tostring(Money) .. " Valuables: "..tostring(Valuables);
                                end;
                            end;
                    
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            return Object.Position;
                        end;
                    });
                end;
            end;
        end;


        do --// Aftermath 
            if GameName == "Aftermath" and Workspace:FindFirstChild("game_assets") and Workspace.game_assets:FindFirstChild("item_spawns") then 
                ESPConstructor:NewListener({
                    Type = "Model",
                    Parent = Workspace.game_assets.item_spawns,
                    Flag = "Items",
                    CustomName = function(Object)
                        if Object.PrimaryPart then
                            local Name = Object.Name
                            local Distance = math.floor((Object.PrimaryPart.Position - Camera.CFrame.p).Magnitude);
                            
                            return Name .. " | " ..tostring(Distance).."s";
                        end
                    end;
                
                    GetPosition = function(Object)
                        if Object.PrimaryPart then
                            return Object.PrimaryPart.Position;
                        end
                    end;
                });
            end 

        end 

        do --// SOA 
            if GameName == "State Of Anarchy" then 
                ESPConstructor:NewListener({
                    Type = "Model",
                    Parent = Workspace.Interactable.Containers,
                    Flag = "Corpse",
                    CustomName = function(Object)
                        local Name = Object.Name
                        local Distance = math.floor((Object.PrimaryPart.Position - Camera.CFrame.p).Magnitude);
                        
                        return Name .. " | " ..tostring(Distance).."s";
                    end;
                
                    GetPosition = function(Object)
                        return Object.PrimaryPart.Position;
                    end;

                    
                    CustomChecks2 = function(Object)
                        task.wait(1);

                        if Object.Name:find("Corpse") then 
                            return true; 
                        end;

                        return false
                    end;
                });

                ESPConstructor:NewListener({
                    Type = "Model",
                    Parent = Workspace.Interactable.PickUps,
                    Flag = "Items",
                    CustomName = function(Object)
                        local Name = Object.Name
                        local Root = Object:FindFirstChildOfClass("MeshPart") or Object.PrimaryPart or Object:FindFirstChildOfClass("Part")
                        if Root then 
                            local Distance = math.floor((Root.Position - Camera.CFrame.p).Magnitude);
                            
                            return Name .. " | " ..tostring(Distance).."s";
                        end;
                    end;
                
                    GetPosition = function(Object)
                        local Root = Object:FindFirstChildOfClass("MeshPart") or Object.PrimaryPart or Object:FindFirstChildOfClass("Part")
                        if Root then 
                            return Root.Position
                        end;
                    end;

                    
                });
            end 


        end 

        do --// la skeets 
            if GameName == "The Streets" then 
                local Items = Workspace:FindFirstChild("Item Shops") 
                do --// Objects
                    ESPConstructor:NewListener({
                        Parent = Items,
                        Name = {"Uzi | $150", "Glock | $400", "Glock | $200", "Sawed Off | $150", "Sawed Off | $300"},
                        Flag = "GunShops",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object:FindFirstChild("Head");

                            if Root then 
                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object:FindFirstChild("Head");
                            if Root then 
                                return Root.CFrame.p;
                            end;
                            return Object.WorldPivot.p;
                        end;
                    })
                end;

                do --// Proximity prompts 
                    ProxPromptService.PromptButtonHoldBegan:Connect(function(Prompt, Player)
                        if Player == Client and Library.Flags.InstantInteract and Library.Flags.InstantInteract.Value then 
                            fireproximityprompt(Prompt)
                        end;
                    end);
                end;
            end;
        end;
        
        do --// Project Delta 
            do --// Lobby / Game 
                if GameName == "Project Delta" then 
                    do --// Items
                        ESPConstructor:NewListener({
                            Type = "Model",
                            Parent = Workspace.DroppedItems,
                            Flag = "Items",
                            CustomName = function(Object)
                                local Name = "Item";
                                local Root = Object.PrimaryPart or Object:FindFirstChildOfClass("MeshPart");
                                if Root then 
                                    local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude / 3);
                                    Name = Object.Name .." | Distance: "..tostring(Distance).. "m";
                                end;
                        
                                return Name;
                            end;
                        
                            GetPosition = function(Object)
                                local Root = Object.PrimaryPart or Object:FindFirstChildOfClass("MeshPart");
                                if Root then 
                                    return Root.CFrame.p;
                                end;
                            end;

                            CustomChecks = function(Object)
                                if not Object:FindFirstChild("Clothing") then
                                    if Library.Flags.FilterItems and Library.Flags.FilterItems.Value and table.find(Library.Flags.FilteredItems.Value, Object.Name) then 
                                        return true; 
                                    elseif Library.Flags.FilterItems and not Library.Flags.FilterItems.Value then 
                                        return true
                                    end;
                                end;

                                return false
                            end;

                            CustomChecks2 = function(Object)
                                task.wait(1);

                                if Object:FindFirstChild("Clothing") then 
                                    return false; 
                                end;

                                return true
                            end;
                        });
                    end;
                end;
            end;

            do --// Game Oonly

                if GameName == "Aftermath" and Workspace:FindFirstChild("game_assets") and Workspace.game_Assets:FindFirstChild("NPCs") then 
                    local Path = Workspace.game_assets.NPCs
                    for Index, Value in next, Path:GetChildren() do 
                        if Value.Name == "WorldModel" then
                            ESPConstructor:New(Value);
                        end
                    end;

                    Path.ChildAdded:Connect(function(Value)
                        if Value.Name == "WorldModel" then
                            ESPConstructor:New(Value);
                        end
                    end);

                    Path.ChildRemoved:Connect(function(Value)
                        Visuals.Enemies[Value]:Remove();
                    end);
                end 

                if GameName == "Project Delta" and Workspace:FindFirstChild("NoCollision") and Workspace.NoCollision:FindFirstChild("ExitLocations") then 
                    do --// AI 
                        for Index, Value in next, Workspace.AiZones:GetChildren() do 
                            local Name = Value.Name;
                            if not table.find({"OutpostLandmines", "OutpostClaymores", "HeliCrashClaymores", "PowerPlant", "HeliCrash"}, Name) then
                                for _, Value in next, Value:GetChildren() do 
                                    ESPConstructor:New(Value, false);
                                end;

                                Value.ChildAdded:Connect(function(Value)
                                    ESPConstructor:New(Value, false);
                                end);

                                Value.ChildRemoved:Connect(function(Value)
                                    if Visuals.Enemies then 
                                        Visuals.Enemies[Value]:Remove();
                                    end;
                                end);
                            end;
                        end;
                    end;

                    do --// Landmines
                        Connections.LandMineAdded = Workspace.AiZones.OutpostLandmines.ChildAdded:Connect(function(v)
                            if Library.Flags.RemoveOutpostMines and Library.Flags.RemoveOutpostMines.Value then
                                v:Destroy();
                            end;
                        end)
                    end;

                    do --// Custom ESP Objects 
                        do --// Main
                            if GameName == "Project Delta" then                     
                                do --// Corpses
                                    ESPConstructor:NewListener({
                                        Type = "Model",
                                        Parent = Workspace.DroppedItems,
                                        Flag = "Corpses",
                                        CustomName = function(Object)
                                            local Name = "Corpse";
                                            if Object.PrimaryPart then 
                                                local Distance = math.floor((Object.PrimaryPart.CFrame.p - Camera.CFrame.p).Magnitude / 3);
                                                local Contents = Object:FindFirstChild("Inventory");

                                                Name = Object.Name.."'s ".. "Corpse" .." | Distance: "..tostring(Distance).. "m\n";

                                                if Library.Flags.FilterCorpses and Library.Flags.FilterCorpses.Value then 
                                                    local Clothing = Object:FindFirstChild("Clothing"); 
                                                    local Hotbar = Object:FindFirstChild("Hotbar");
                                                    local Hotbarlist = Hotbar and Hotbar:GetChildren()
                                                    local ClothingList = Clothing and Clothing:GetChildren(); 

                                                    if ClothingList and #ClothingList > 0  then 
                                                        for Index, Cloth in next, ClothingList do 
                                                            if table.find(Library.Flags.FilteredItems.Value, Cloth.Name) then 
                                                                Name = Name..Cloth.Name.."\n"
                                                            end;

                                                            for Index, Item in next, Cloth:GetChildren() do 
                                                                if table.find(Library.Flags.FilteredItems.Value, Item.Name) then 
                                                                    Name = Name..Item.Name.."\n"
                                                                end;
                                                            end;
                                                        end;
                                                    end;

                                                    if Hotbarlist and #Hotbarlist > 0 then 
                                                        for Index, Item in next, Hotbarlist do 
                                                            if table.find(Library.Flags.FilteredItems.Value, Item.Name) then 
                                                                Name = Name..Item.Name.."\n"
                                                            end;
                                                        end;
                                                    end;
                                                end;
                                            end;
                                    
                                            return Name;
                                        end;
                                    
                                        GetPosition = function(Object)
                                            if Object.PrimaryPart then 
                                                return Object.PrimaryPart.CFrame.p;
                                            end;
                                        end;

                                        CustomChecks = function(Object)
                                            if Object:FindFirstChild("Clothing") and Object.PrimaryPart then
                                                return true;
                                            end;

                                            return false
                                        end;

                                        CustomChecks2 = function(Object)
                                            task.wait(1);
                                            if Object:FindFirstChild("Clothing") then 
                                                return true;
                                            end;

                                            return false
                                        end;
                                    });
                                end;

                                do --// Extracts
                                    ESPConstructor:NewListener({
                                        Type = "Part";
                                        Parent = Workspace.NoCollision.ExitLocations,
                                        Flag = "Extracts",
                                        CustomName = function(Object)
                                            local Name = "Extract";
                                            local Distance = math.floor((Object.CFrame.p - Camera.CFrame.p).Magnitude / 3);
                                            
                                            Name = Name .. " | Distance: "..tostring(Distance).."m";

                                            return Name;
                                        end;

                                        GetPosition = function(Object)
                                            return Object.CFrame.p;
                                        end;
                                    });
                                end;

                                do --// Vehicles 
                                    ESPConstructor:NewListener({
                                        Type = "Model",
                                        Parent = Workspace.Vehicles,
                                        Flag = "Vehicles",
                                        CustomName = function(Object)
                                            local Name = "[Vehicle] UAZ";
                                            if Object.PrimaryPart then 
                                                local Distance = math.floor((Object.PrimaryPart.CFrame.p - Camera.CFrame.p).Magnitude / 3);
                                                Name = Name.." | Distance: "..tostring(Distance).. "m"
                                            end;
                                    
                                            return Name;
                                        end;
                                    
                                        GetPosition = function(Object)
                                            if Object.PrimaryPart then
                                                return Object.PrimaryPart.CFrame.p;
                                            end;
                                        end;

                                        CustomChecks = function(Object)
                                            if Object.PrimaryPart then return true; end;
                                        end;
                                    });
                                end;
                            end;
                        end;
                    end;

                    do --// Foliage
                        if Workspace:FindFirstChild("SpawnerZones") then 
                            for Index, Value in next, Workspace.SpawnerZones.Foliage:GetDescendants() do 
                                Visuals:CheckFoliage(Value);
                            end;

                            Workspace.SpawnerZones.Foliage.DescendantAdded:Connect(function(Value)
                                task.wait(0.1);
                                Visuals:CheckFoliage(Value);
                            end);
                        end;
                    end;

                    do --// Quests 
                        do --// Quest Items 
                            local QuestItems = Workspace.QuestItems;

                            ESPConstructor:NewListener({
                                Type = "Model";
                                Parent = QuestItems,
                                Flag = "QuestItems",
                                CustomName = function(Object)
                                    local Name = "Quest Item - "..Object.Name;
                                    local Root = Object.PrimaryPart; 
                                    if Root then 
                                        local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude / 3);
                                        
                                        Name = Name .. " | Distance: "..tostring(Distance).."m";
                                    end;
                                    
                                    return Name;
                                end;

                                GetPosition = function(Object)
                                    local Root = Object.PrimaryPart; 
                                    return Root and Root.CFrame.p or Object.WorldPivot.p;

                                end;

                                CustomChecks = function(Object) 
                                    if Object.Name and Library.Flags.AllowedQuestItems and table.find(Library.Flags.AllowedQuestItems.Value, Object.Name) then 
                                        return true;
                                    end;

                                    return false;
                                end;
                            });
                        end; 

                        do --// Actual quests
                            local CustomQuestFolder = Instance.new("Folder", workspace.NoCollision);
                            CustomQuestFolder.Name = "bismallah";

                            local QuestModule-- = require(ReplicatedStorage.Modules.Quests); 
                            for Index, Value in next, getgc(true) do 
                                if type(Value) == "table" and rawget(Value, "Quests") and type(rawget(Value, "Quests")) == "table" and rawget(Value, "QuestsSorted") then 
                                    QuestModule = Value
                                end 
                            end 

                            local function GetPositions(Name, Objectives) 
                                local QuestInfo = {
                                    Name = Name,
                                    Positions = {}
                                }
                                for Index,  Value in next, Objectives do 	
                                    if type(Value) == "table" and rawget(Value, "Position") then 
                                        local Position = Value.Position; 
                                        if Position then 
                                            QuestInfo.Positions[tostring(Index)] = Position;
                                        end;
                                    end;
                                end;
                                return QuestInfo
                            end;

                            for Index, Value in next, QuestModule.Quests do 
                                if type(Value) == "table" and rawget(Value, "Objectives") then 
                                    local Objectives = Value.Objectives;

                                    do 
                                        local QuestInfo = GetPositions(tostring(Index), Objectives); 

                                        if QuestInfo and QuestInfo.Positions then 
                                            for Index, Value in next, QuestInfo.Positions do 
                                                local Part = Instance.new("Part", CustomQuestFolder);

                                                Part.Name = QuestInfo.Name; 
                                                Part.Position = Value; 
                                                Part.CanCollide = false;
                                                Part.Anchored = true;
                                                Part.Transparency = 1
                                                Part.Size = Vector3.new(0.5, 0.5, 0.5);
                                                Part:SetAttribute(tostring(Index), true);
                                            end;
                                        end;
                                    end;
                                end;
                            end;

                            ESPConstructor:NewListener({
                                Type = "Part";
                                Parent = CustomQuestFolder,
                                Flag = "Quests",
                                CustomName = function(Object)
                                    local Name = "Quest Location - "..Object.Name;
                                    local Root = Object; 
                                    if Root then 
                                        local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude / 3);
                                        
                                        Name = Name .. " | Distance: "..tostring(Distance).."m";
                                    end;
                                    
                                    return Name;
                                end;

                                GetPosition = function(Object)
                                    local Root = Object; 
                                    return Root and Root.CFrame.p;

                                end;

                                CustomChecks = function(Object) 
                                    if Object.Name and Library.Flags.AllowedQuests and table.find(Library.Flags.AllowedQuests.Value, Object.Name) then 
                                        return true;
                                    end;

                                    return false;
                                end;
                            });
                        end;
                    end; 

                end;
            end;
        end;

        do --// Criminality
            if GameName == "Criminality" and Workspace:FindFirstChild("Map") and Workspace.Map:FindFirstChild("BredMakurz") and Workspace.Filter:FindFirstChild("SpawnedPiles") then 
                do --// Proximity prompts 
                    ProxPromptService.PromptButtonHoldBegan:Connect(function(Prompt, Player)
                        if Player == Client and Library.Flags.InstantInteract and Library.Flags.InstantInteract.Value then 
                            fireproximityprompt(Prompt)
                        end;
                    end);
                end;

                do --// ATMs
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = Workspace.Map.ATMz,
                        Flag = "ATM",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object:FindFirstChild("MainPart");

                            if Root then 
                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object:FindFirstChild("MainPart");
                            if Root then 
                                return Root.CFrame.p;
                            end;
                            return Object.WorldPivot.p;
                        end;
                    });
                end

                do --// Safes/Registers
                    
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = Workspace.Map.BredMakurz;
                        Flag = "Safe";
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object.PrimaryPart;

                            local Values = Object:FindFirstChild("Values");

                            do
                                if Name:find("SmallSafe") then 
                                    Name = "Small safe";
                                elseif Name:find("MediumSafe") then 
                                    Name = "Medium safe";
                                elseif Name:find("Register") then
                                    Name = "Register";
                                end;

                                if Values then 
                                    local DropA = Values:FindFirstChild("DropA");
                                    if DropA then 
                                        Name = Name .."\n"..tostring(DropA.MinValue).." - "..tostring(DropA.MaxValue).."$";
                                    end;
                                end;

                                if Root then 
                                    local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                    Name = Name .. " | Distance: "..tostring(Distance).. "s";
                                end;
                            end;

                            return Name;
                        end;

                        CustomChecks = function(Object)
                            local Values = Object:FindFirstChild("Values");
                            local Broken = Values and Values:FindFirstChild("Broken");
                            if Broken then
                                return not Broken.Value;
                            end;

                            return false;
                        end;

                        GetPosition = function(Object)
                            if Object.PrimaryPart then return Object.PrimaryPart.Position end;

                            return Object.WorldPivot.p;
                        end;
                    });
                end;

                do --// Dealers
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = Workspace.Map.Shopz,
                        Flag = "Dealer",
                        TextUpdate = 0.9;
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object:FindFirstChild("MainPart");

                            if Root then 
                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);

                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                                
                                if Library.Flags.ShowStocks and Library.Flags.ShowStocks.Value then 
                                    local Stocks = Object:FindFirstChild("CurrentStocks"):GetChildren();
                                    local Restock = Object.RestockTime.Value;

                                    local Minutes = tostring(math.floor(Restock / 60));
                                    local Seconds = tostring(Restock % 60)

                                    local FormattedRestock = string.format("%02d:%02d", Minutes, Seconds);

                                    Name = Name.." | Restocks in: "..FormattedRestock .."\n";
                                    
                                    for Index, Value in next, Stocks do 
                                        if Value.Value ~= 0 then 
                                            local Val, MaxVal = Value.Value, Value.MaxValue;

                                            if Val < 1000 and table.find(Library.Flags.FilteredItems.Value, Value.Name) then --// avoids the stuff that has infinite restocks
                                                Name = Name .. " " .. Value.Name ..  " (" ..tostring(Val) .. "/" .. MaxVal .. ")\n";
                                            end;
                                        end;
                                    end;
                                end;
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object:FindFirstChild("MainPart");
                            if Root then 
                                return Root.CFrame.p;
                            end;

                            return Object.WorldPivot.p;
                        end;
                    });
                end;

                do --// Mystery boxes
                    local MysteryBoxes = Workspace.Map.MysteryBoxes;

                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = MysteryBoxes,
                        Flag = "Mystery",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object:FindFirstChild("Hitbox");

                            if Root then 
                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object:FindFirstChild("Hitbox");
                            if Root then 
                                return Root.CFrame.p;
                            end;
                            return Object.WorldPivot.p;
                        end;
                    });

                end;

                do --// Scrap Piles / Crates 
                    local ScrapPiles = Workspace.Filter.SpawnedPiles;
                    ESPConstructor:NewListener({
                        Type = "Model",
                        Parent = ScrapPiles,
                        Flag = "Scrap",
                        CustomName = function(Object)
                            local Name = Object.Name;

                            if Name == "C1" or Name == "C2" then 
                                Name = "Crate";
                            elseif Name == "I24" then 
                                Name = "Firework" 
                            else
                                Name = "Scrap";
                            end;

                            local Root = Object:FindFirstChild("MeshPart");
                            local Particle = Root and Root:FindFirstChild("Particle");
                            local Rarity = "Gray";
                            local CustomRarity = "Gray";

                            if Root then 
                                if Particle and GameFramework.CrimColors[tostring(Particle.Color.Keypoints[1])] then 
                                    Rarity = GameFramework.CrimColors[tostring(Particle.Color.Keypoints[1])];
                                end;

                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | Rarity: "..Rarity.."\nDistance: "..tostring(Distance).. "s";
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object:FindFirstChild("MeshPart");
                            if Root then 
                                return Root.CFrame.p;
                            end;
                            return Object.WorldPivot.p; 
                        end;

                        CustomChecks = function(Object) 
                            local Name = Object.Name;
                            local Root = Object:FindFirstChild("MeshPart");
                            local Particle = Root and Root:FindFirstChild("Particle");
                            local Rarity = "Gray";

                            if Root then 
                                if Particle and GameFramework.CrimColors[tostring(Particle.Color.Keypoints[1])] then 
                                    Rarity = GameFramework.CrimColors[tostring(Particle.Color.Keypoints[1])];
                                end;

                                if table.find(Library.Flags.Rarities.Value, Rarity) then 
                                    return true;
                                end;
                            end;
                            return false;
                        end;
                    });
                end;

                do --// Controllers 
                    local Debris = workspace.Debris
                    local VParts = Debris.VParts

                    local Forward = 0
                    local Sideways = 0
                    local RocketSpeed = 300
                    local Break = false

                    VParts.ChildAdded:Connect(function(Projectile)
                        task.wait()

                        if (Projectile.Name == "RPG_Rocket" or Projectile.Name == "GrenadeLauncherGrenade") and Library.Flags.ControlRockets and Library.Flags.ControlRockets.Value and isnetworkowner(Projectile) then
                            if Projectile.Name == "RPG_Rocket" then 
                                if not Client.Character:FindFirstChild("RPG-7") then 
                                    return 
                                end;
                            end;

                            if Projectile.Name == "GrenadeLauncherGrenade" then 
                                if not isnetworkowner(Projectile) then
                                    return 
                                end;
                            end;

                            Camera.CameraSubject = Projectile
                            Client.Character.HumanoidRootPart.Anchored = true

                            pcall(function()
                                if Projectile.Name == "RPG_Rocket" then 
                                    Projectile.BodyForce:Destroy()
                                    Projectile.RotPart.BodyAngularVelocity:Destroy()
                                    Projectile.Sound:Destroy();
                                elseif Projectile.Name == "GrenadeLauncherGrenade" then
                                    Projectile.BodyForce:Destroy()
                                    Projectile.BodyAngularVelocity:Destroy()
                                    Projectile.Sound:Destroy();
                                end;
                            end)
                            
                            local BV = Instance.new("BodyVelocity", Projectile)
                            BV.MaxForce = Vector3.new(1e9, 1e9, 1e9)
                            BV.Velocity = Vector3.new()

                            local BG = Instance.new("BodyGyro", Projectile)
                            BG.P = 9e4
                            BG.MaxTorque = Vector3.new(1e9, 1e9, 1e9)

                            task.spawn(function()
                                while true do
                                    RunService.RenderStepped:Wait()

                                    TweenService:Create(BV, TweenInfo.new(0.2), {Velocity = ((Camera.CFrame.LookVector * Forward) + (Camera.CFrame.RightVector * Sideways)) * RocketSpeed}):Play()
                                    BG.CFrame = Camera.CoordinateFrame
                                    Camera.CFrame = Projectile.CFrame * CFrame.new(Vector3.new(0, 1, 1));

                                    if Break then
                                        Break = false

                                        break;
                                    end;
                                end;
                                
                                Camera.CameraSubject = Client.Character.Humanoid;
                                Client.Character.HumanoidRootPart.Anchored = false;
                                InputEndedConnection = nil;
                                InputBeganConnection = nil;
                            end); 
                        end;

                        UserInputService.InputBegan:Connect(function(Key)
                            if Key.KeyCode == Enum.KeyCode.W then
                                Forward = 1
                            elseif Key.KeyCode == Enum.KeyCode.S then
                                Forward = -1
                            elseif Key.KeyCode == Enum.KeyCode.D then
                                Sideways = 1
                            elseif Key.KeyCode == Enum.KeyCode.A then
                                Sideways = -1
                            end
                        end);

                        UserInputService.InputEnded:Connect(function(Key)
                            if Key.KeyCode == Enum.KeyCode.W or Key.KeyCode == Enum.KeyCode.S then
                                Forward = 0
                            elseif Key.KeyCode == Enum.KeyCode.D or Key.KeyCode == Enum.KeyCode.A then
                                Sideways = 0
                            end
                        end);
                    end);

                    Debris.ChildAdded:Connect(function(Result)
                        task.wait()
                        pcall(function()
                            if Client.Character:FindFirstChild("RPG-7") and (Result.Name == "RPG_Explosion_Long" or Result.Name == "RPG_Explosion_Short") then
                                Break = true;
                                task.wait(1);
                                Break = false;
                            end;

                            if (Client.Character:FindFirstChild("M320-1") or Client.Character:FindFirstChild("SCAR-H-X")) and (Result.Name == "GL_Explosion_Long" or Result.Name == "GL_Explosion_Short") then
                                Break = true;
                                task.wait(1);
                                Break = false;
                            end;
                        end);
                    end);
                end;
            end;

            if GameName == "Blackout" then 
                do --// Proximity prompts 
                    ProxPromptService.PromptButtonHoldBegan:Connect(function(Prompt, Player)
                        if Player == Client and Library.Flags.InstantInteract and Library.Flags.InstantInteract.Value then 
                            fireproximityprompt(Prompt)
                        end;

                        if Library.Flags.InstantLootCash and Library.Flags.InstantLootCash.Value then 
                            if Library.Flags.InstantInteract.Value then 
                                if Prompt.Name == "OpenLootTable" and Prompt.Parent:FindFirstChild("LootTable") then 
                                    ReplicatedStorage.Events.Loot.LootObject:FireServer(Prompt.Parent:FindFirstChild("LootTable"), "Cash")
                                end;
                            else
                                task.wait(0.3);
                                if Prompt.Name == "OpenLootTable" and Prompt.Parent:FindFirstChild("LootTable") then 
                                    ReplicatedStorage.Events.Loot.LootObject:FireServer(Prompt.Parent:FindFirstChild("LootTable"), "Cash")
                                end;
                            end;
                        end;


                        if Library.Flags.InstantLootValuables and Library.Flags.InstantLootValuables.Value then 
                            if Library.Flags.InstantInteract.Value then 
                                if Prompt.Name == "OpenLootTable" and Prompt.Parent:FindFirstChild("LootTable") then 
                                    ReplicatedStorage.Events.Loot.LootObject:FireServer(Prompt.Parent:FindFirstChild("LootTable"), "Valuables")
                                end;
                            else
                                task.wait(0.3);
                                if Prompt.Name == "OpenLootTable" and Prompt.Parent:FindFirstChild("LootTable") then 
                                    ReplicatedStorage.Events.Loot.LootObject:FireServer(Prompt.Parent:FindFirstChild("LootTable"), "Valuables")
                                end;
                            end;
                        end;

                        if Prompt.Parent and Prompt.Parent.Parent and Library.Flags.InstantLockpick.Value then 
                            local Name = Prompt.Parent.Parent.Name;
                            task.wait(0.2);
                            if (Name == "Lid" or Name == "Locker" or Name == "Safe") then 
                                ReplicatedStorage.Events.Loot.MinigameResult:FireServer(Prompt.Parent.Parent, true)
                            end;
                        end;

                        if Library.Flags.InstantLootCards and Library.Flags.InstantLootCards.Value then 
                            if Prompt.Parent and Prompt.Parent:FindFirstChild("LootTable") then 
                                local Children = Prompt.Parent.LootTable:GetChildren();

                                for Index, Value in next, Children do 
                                    local Name = Value.Name;
                                    if Name:find("Card") or Name:find("Keycard") then
                                        ReplicatedStorage.Events.Loot.LootObject:FireServer(Prompt.Parent:FindFirstChild("LootTable"), Value, true)
                                        task.wait(0.2);
                                    end;
                                end;
                            end;
                        end;
                    end);
                end;
            end;
        end;

        do --// Lone 
            if GameName == "Lone Survival" then 
                do --// Ai 
                    for Index, Value in next, Workspace.AI:GetChildren() do 
                        ESPConstructor:New(Value);
                    end;

                    Workspace.AI.ChildAdded:Connect(function(Value)
                        ESPConstructor:New(Value);
                    end);

                    Workspace.AI.ChildRemoved:Connect(function(Value)
                        Visuals.Enemies[Value]:Remove();
                    end);
                end;

                do --// Objects
                    ESPConstructor:NewListener({
                        Parent = Workspace.DroppedPacks,
                        Type = "Model",
                        Flag = "Corpses",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object.PrimaryPart

                            Name = "Backpack of " .. Object:GetAttribute("CharacterName")
                            if Root then 
                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object.PrimaryPart;
                            if Root then 
                                return Root.CFrame.p;
                            end;
                            return Object.WorldPivot.p;
                        end;
                    })

                    ESPConstructor:NewListener({
                        Parent = Workspace.OfflinePlayers,
                        Type = "Model",
                        Flag = "Sleepers",
                        CustomName = function(Object)
                            local Name = Object.Name;
                            local Root = Object.PrimaryPart

                            Name = "Sleeper " .. Object:GetAttribute("CharacterName")
                            if Root then 
                                local Distance = math.floor((Root.CFrame.p - Camera.CFrame.p).Magnitude);
                                Name = Name .. " | Distance: "..tostring(Distance).. "s";
                            end;
                            return Name;
                        end;
                    
                        GetPosition = function(Object)
                            local Root = Object.PrimaryPart;
                            if Root then 
                                return Root.CFrame.p;
                            end;
                            return Object.WorldPivot.p;
                        end;
                    })
                end;
            end;
        end;

        do --// Korrupt 
            if GameName == "Korrupt Zombies" then 
                do --// Ai 
                    for Index, Value in next, Workspace.Zombies:GetChildren() do 
                        ESPConstructor:New(Value);
                    end;

                    Workspace.Zombies.ChildAdded:Connect(function(Value)
                        ESPConstructor:New(Value);
                    end);

                    Workspace.Zombies.ChildRemoved:Connect(function(Value)
                        Visuals.Enemies[Value]:Remove();
                    end);
                end;
            end;
        end 

    end)();
end;

do --// UI setup
    if GameName == "Project Delta" then
        local Window = Library:NewWindow({TabAmount = 6, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 583, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat", IncludeNested = true}); 

                    do --// Combat Tabs
                        local Main = CombatTab:Add({Name = "Main"}); do 
                            local AimbotSection = Main:NewSection({Name = "Aimbot", Side = "Left"}); do 
                                AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                    AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                    AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                    AimbotSection:Toggle({Name = "Include AI", Flag = "IncludeAi"});
                                    AimbotSection:Toggle({Name = "Manipulation", Flag = "Manipulation", Callback = function()
                                        --[[LPH_NO_VIRTUALIZE(function()
                                            if not GameFramework.RanManipulation then 
                                                GameFramework.RanManipulation = true; 
                                                setreadonly(RawMetaTable, false);
                                                local Index = RawMetaTable.__index; 

                                                local Index; Index = hookmetamethod(game, "__index", function(self, Property)
                                                    if not checkcaller() and tostring(self):lower() == "barrel" and Property == "Position" and Combat.ManipulatedPosition and Library.Flags.Manipulation.Value and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then
                                                        
                                                        return Combat.ManipulatedPosition
                                                    end;

                                                    if not checkcaller() and tostring(self):lower() == "barrel" and Property == "CFrame" and Combat.ManipulatedPosition and Library.Flags.Manipulation.Value and Combat.TargetPart and Library.Flags.AimMode.Value == "Silent Aim" then
                                                        
                                                        return CFrame.new(Combat.ManipulatedPosition, Combat.ManipulatedDirection);
                                                    end;

                                                    return Index(self, Property)
                                                end);
                                            end;
                                        end)();]]
                                    end});

                                    AimbotSection:Slider({Name = "Manipulation range", Flag = "ManipulationDistance", Min = 1, Max = 15});

                                    AimbotSection:Toggle({Name = "Autoshoot", Flag = "AutoShoot"}):Keybind({Name = "Auto shoot", Flag = "AutoShootBind", Mode = "Hold"});
                                    AimbotSection:Dropdown({Max = 2, Name = "Autoshoot mode", Flag = "AutoShootMode", Options = {"Standard", "Adaptive"}});

                                    AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "m", Min = 0, Max = 1200, Default = 500});
                                    AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                    AimbotSection:Dropdown({Max = 2, Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                    AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                    AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                    AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                    AimbotSection:Slider({Name = "Minimum health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 0});

                                    Window:Tooltip({
                                        Parent = Library.Flags.SilentAim,
                                        Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                    });

                                end;
                            end;

                            local Resolver = Main:NewSection({Name = "Resolver", Side = "Right"}); do 
                                Resolver:Toggle({Name = "Pitch", Flag = "ForcePitch"});
                                Resolver:Toggle({Name = "Desync", Flag = "ResolveDesync"});
                            end;

                            local Mods = Main:NewSection({Name = "Mods", Side = "Right"}); do 
                                Mods:Toggle({Name = "No Recoil", Flag = "RemoveRecoil"});
                                Mods:Toggle({Name = "No bobbing", Flag = "RemoveBobbing"});
                                Mods:Toggle({Name = "No sway", Flag = "RemoveSway"});
                                Mods:Toggle({Name = "Instant reload", Flag = "InstantReload"});
                                Mods:Toggle({Name = "Instant bullet", Flag = "InstantBullet"});
                                Mods:Toggle({Name = "Instant equip", Flag = "InstantEquip"});
                                Mods:Toggle({Name = "No spread", Flag = "RemoveSpread"})
                                Mods:Toggle({Name = "Instant aim", Flag = "InstantAim"});
                                Mods:Toggle({Name = "Instant lean", Flag = "InstantLean"});

                                Mods:Toggle({Name = "No obstructions", Flag = "RemoveObstructions"})
                                Mods:Toggle({Name = "Unlock firemodes", Flag = "UnlockFiremodes"})
                                Mods:Toggle({Name = "Rapid fire", Flag = "RapidFire"})
                                Mods:Slider({Min = 0, Max = 100, Flag = "FireRate", Name = "Fire rate"});
                            end;
                        end;

                        local VisualsTab = CombatTab:Add({Name = "Visuals"}); do 
                            local VisualsSection = VisualsTab:NewSection({Name = "Visuals", Side = "Left"}); do

                                VisualsSection:Toggle({Name = "Visualize manipulation", Flag = "VisualizeManipulation"})
                                VisualsSection:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                    Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                                end});

                                VisualsSection:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                    Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                                end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                    Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                                end,})

                                VisualsSection:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                    if Library.Flags.FOVEffects.Value then 
                                        Visuals.FOVGradient.Enabled = true;
                                    else 
                                        Visuals.FOVGradient.Enabled = false;
                                        Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                    end;
                                end});
                                VisualsSection:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})

                                VisualsSection:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                                VisualsSection:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                                VisualsSection:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                    Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                                end});
                                local StyleOptions = {};
                                for Index, Value in next, EasingStyle do 
                                    table.insert(StyleOptions, Index)
                                end

                                VisualsSection:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                                VisualsSection:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                    
                                VisualsSection:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                                VisualsSection:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                    OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                                end});
                            end;

                            local InfoSection = VisualsTab:NewSection({Name = "Display Info", Side = "Right"}); do 
                                InfoSection:Toggle({Name = "Enabled", Flag = "InventoryViewer"})
                                InfoSection:Slider({Suffix = "%", Name = "Position X ", Flag = "InfoPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                                InfoSection:Slider({Suffix = "%", Name = "Position Y ", Flag = "InfoPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                                InfoSection:Multidropdown({Name = "Options", Flag = "InventoryOptions", Options = {"Name", "Distance", "Health", "Hotbar", "Inventory"}});
                            end;
                        end;
                    end;

                    CombatTab:SetTab("Main");
                end;

                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                
                                Players:Toggle({Name = "Include AI",Flag = "IncludeAiESP"});

                            
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});
                                
                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                --Players:Toggle({Name = "Armor", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
                                Players:Toggle({Name = "Gear", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})

                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})
                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});
                                
                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;

                        end;
                        do --// Custom Object
                            local Quests = ESPTab:NewSection({Name = "Questing", Side = "Right"}); do 
                                local ItemOptions = {}; 
                                local QuestOptions = {};

                                do --// Quest tables
                                    if Workspace:FindFirstChild("QuestItems") then 
                                        if #Workspace.QuestItems:GetChildren() == 0 then 
                                            ItemOptions = {"placeholder"}
                                        else 
                                            for Index, Value in next, Workspace.QuestItems:GetChildren() do 
                                                table.insert(ItemOptions, Value.Name);
                                            end;
                                        end;
                                    else 
                                        ItemOptions = {"placeholder"}
                                    end;

                                    if Workspace.NoCollision:FindFirstChild("bismallah") then 
                                        if #Workspace.NoCollision:FindFirstChild("bismallah"):GetChildren() == 0 then 
                                            QuestOptions = {"placeholder"}
                                        else 
                                            for Index, Value in next, Workspace.NoCollision:FindFirstChild("bismallah"):GetChildren() do 
                                                if not table.find(QuestOptions, Value.Name) then 
                                                    table.insert(QuestOptions, Value.Name);
                                                end;
                                            end;
                                        end;
                                    else 
                                        QuestOptions = {"placeholder"}
                                    end;
                                end;

                                Quests:Toggle({Name = "Quest items", Flag = "ESPQuestItems"}):Colorpicker({Name = "Quest items Color", Flag = "QuestItemsColor", Default = Color3.fromRGB(0, 255, 0)});
                                Quests:Multidropdown({Max = #ItemOptions, Flag = "AllowedQuestItems", Name = "Items", Options = ItemOptions})

                                Quests:Toggle({Name = "Quest locations", Flag = "ESPQuests"}):Colorpicker({Name = "Quests Color", Flag = "QuestsColor", Default = Color3.fromRGB(0, 255, 255)});
                                Quests:Multidropdown({Max = #QuestOptions, Flag = "AllowedQuests", Name = "Quests", Options = QuestOptions})
                            end;

                            local ItemFilter = ESPTab:NewSection({Name = "Item filter", Side = "Right"}); do 
                                local ItemsList = ReplicatedStorage.ItemsListLocal:GetChildren(); 
                                local ItemTable = {};

                                for Index, Value in next, ItemsList do 
                                    table.insert(ItemTable, Value.Name)
                                end;
                                
                                ItemFilter:Toggle({Name = "Filter items", Flag = "FilterItems"});
                                ItemFilter:Toggle({Name = "Filter corpses", Flag = "FilterCorpses"});
                                ItemFilter:Toggle({Name = "Apply to inventory viewer", Flag = "FilterPlayers"});

                                ItemFilter:Searchbar({Name = "Filtered items", Flag = "FilteredItems", Options = ItemTable, Max = #ItemTable})
                            end;

                            local WorldESPSection = ESPTab:NewSection({Name = "ESP", Side = "Left"}); do 
                                WorldESPSection:Toggle({Name = "Extracts", Flag = "ESPExtracts"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Extract Color", Flag = "ExtractsColor"});
                                WorldESPSection:Toggle({Name = "Items", Flag = "ESPItems"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Item Color", Flag = "ItemsColor"});
                                WorldESPSection:Toggle({Name = "Corpses", Flag = "ESPCorpses"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Corpses Color", Flag = "CorpsesColor"});
                                WorldESPSection:Toggle({Name = "Vehicles", Flag = "ESPVehicles"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Vehicle Color", Flag = "VehiclesColor"});
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "m"});
                            end;
                        end;

                        do --// Hazards
                            local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Left"}); do 
                                local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});
                            end;
                        end;

                            
                        do --// ESP OPTIONS
                            local Options = VisualsTab:Add({Name = "ESP Options"});

                            do --// Element Positions section
                                local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                    ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                    ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                    ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                    ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                    ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                    ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                    ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                    ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                    --ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Armor", Default = "Bottom", Options = {"Bottom", "Top"}});
                                    --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                    --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                                end;
                            end;
        
                            do --// Misc Options section
                                local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do
                                    MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                    MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                    MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                    MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                    MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                    MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                    MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                   
                                    MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                                end;
                            end;

                            Library:AddFontSection(Options, "Left")
                        end;

                    end;

                    do --// Radar Tab
                        local RadarTab = VisualsTab:Add({Name = "Radar"});

                        
                        local Radar = RadarTab:NewSection({Name = "Radar", Side = "Left"}); do 
                            local RadarToggle = Radar:Toggle({Name = "Enabled", Flag = "Radar"})
                            
                            RadarToggle:Colorpicker({Name = "Radar background color", Flag = "RadarColor", Default = Color3.fromRGB(0, 0, 0), Callback = function()
                                Visuals.RadarFrame.BackgroundColor3 = Library.Flags.RadarColor.Color;
                                Visuals.RadarFrame.BackgroundTransparency = Library.Flags.RadarColor.Transparency;
                            end});

                            RadarToggle:Colorpicker({Name = "AI Color", Flag = "RadarAIColor"});
                            RadarToggle:Colorpicker({Name = "Player Color", Flag = "RadarPlayerColor"});
                            RadarToggle:Colorpicker({Name = "Local Color", Flag = "LocalColor", Default = Color3.fromRGB(255, 255, 255), Callback = function()
                                Visuals.RadarClient.BackgroundColor3 = Library.Flags.LocalColor.Value;
                            end})
                            Radar:Slider({Name = "Radius", Flag = "RadarDistance", Min = 100, Max = 1000});
                            Radar:Slider({Name = "Delay", Flag = "RadarDelay", Min = 0, Max = 1000, Suffix = "MS"});
                            Radar:Slider({Name = "Size", Flag = "RadarSize", Min = 100, Max = 400, Callback = function()
                                Visuals.RadarFrame.Size = UDim2.new(0, Library.Flags.RadarSize.Value, 0, Library.Flags.RadarSize.Value);
                            end});

                            Radar:Slider({Suffix = "%", Name = "Position X ", Flag = "RadarPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            Radar:Slider({Suffix = "%", Name = "Position Y ", Flag = "RadarPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});

                        end;

                    end ;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab);
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); 

                        do --// Sections 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});

                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});

                            end;
    
                            local CameraSec = LocalTab:NewSection({Name = "Camera", Side = "Left"}); do 
                                CameraSec:Toggle({Name = "Third person", Flag = "ThirdPersonToggle"}):Keybind({Name = "Third Person", Flag = "ThirdPerson", Mode = "Toggle"});
                                CameraSec:Slider({Name = "Distance", Flag = "ThirdPersonDistance", Min = 0, Max = 10, AllowDecimals = 10});
    
                                CameraSec:Toggle({Name = "Remove bobbing", Flag = "RemoveCameraBobbing"});
                                CameraSec:Toggle({Name = "Zoom", Flag = "ZoomToggle"}):Keybind({Name = "Zoom", Flag = "ZoomKey", Mode = "Hold", Callback = function()
                                    if Library.Flags.ZoomKey.Value then 
                                        Camera.FieldOfView = Library.Flags.ZoomLevel.Value;
                                    else
                                        if ReplicatedStorage:FindFirstChild("Players") then 
                                            Camera.FieldOfView = ReplicatedStorage.Players[Client.Name].Settings.GameplaySettings:GetAttribute("DefaultFOV");
                                        end;
                                    end;
                                end});
    
                                CameraSec:Slider({Name = "Zoom level", Flag = "ZoomLevel", Min = 0, Max = 120, Default = 30});
                                CameraSec:Toggle({Name = "Adjust FOV", Flag = "AdjustFOV", Callback = function()
                                    if ReplicatedStorage:FindFirstChild("Players") then 
                                        ReplicatedStorage.Players[Client.Name].Settings.GameplaySettings:SetAttribute("DefaultFOV", Library.Flags.FOVLevel.Value);
                                    end;
                                end});
    
                                CameraSec:Slider({Default = ReplicatedStorage.Players[Client.Name].Settings.GameplaySettings:GetAttribute("DefaultFOV") , Name = "FOV", Flag = "FOVLevel", Min = 0, Max = 120, Suffix = "Â°", Callback = function()
                                    ReplicatedStorage.Players[Client.Name].Settings.GameplaySettings:SetAttribute("DefaultFOV", Library.Flags.FOVLevel.Value);
                                end})
                            end;

                            local Screen = LocalTab:NewSection({Name = "Screen effects", Side = "Left"}); do
                                Screen:Toggle({Name = "Descriptive weapon info", Flag = "WeaponInfo"});
                                Screen:Toggle({Name = "Follow barrel", Flag = "InfoFollowBarrel"})
                                Screen:Toggle({Name = "Enable removals", Flag = "EnableRemovals"});
                                Screen:Multidropdown({Default = {}, Name = "Removals", Flag = "Removals", Max = 7, Options = {"Visor", "Flashbang", "Parallax", "WeaponInfo", "ServerInfo", "Scope", "ScopeLines"}});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;


                            local ViewmodelSec = LocalTab:NewSection({Name = "Viewmodel", Side = "Right"}); do 
                                ViewmodelSec:Toggle({Name = "Enabled", Flag = "ViewmodelChams"});
                                ViewmodelSec:Toggle({Name = "Arms", Flag = "ArmChams"}):Colorpicker({Name = "Arm Color", Flag = "ArmColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Item", Flag = "ItemChams"}):Colorpicker({Name = "Item Color", Flag = "ItemColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Shirt", Flag = "ShirtChams"}):Colorpicker({Name = "Shirt Color", Flag = "ShirtColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Gloves", Flag = "GloveChams"}):Colorpicker({Name = "Glove Color", Flag = "GloveColor", Default = Library.Theme.Accent});
    
                                ViewmodelSec:Toggle({Name = "Remove clothing", Flag = "RemoveClothing"});

                                local TextureOptions = {} 
                                for Index, Value in next, Textures do 
                                    table.insert(TextureOptions, Index); 
                                end; 

                                ViewmodelSec:Dropdown({Name = "Texture", Flag = "Texture", Options = TextureOptions, Max = #TextureOptions, Default = "Hexagon"})
                                ViewmodelSec:Toggle({Name = "Outline Viewmodel", Flag = "HighlightViewmodel"}):Colorpicker({Name = "Viewmodel Outline Color", Flag = "ViewmodelOutlineColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Dropdown({Name = "Material", Flag = "ViewmodelMaterial", Options = {"ForceField", "Neon", "Glass"}});
                            end;
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;


                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});

                    do --// Misc sections 
                        local CharacterSection = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSection:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSection:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});

                            CharacterSection:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSection:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 60, Min = 0});

                            CharacterSection:Toggle({Name = "Walk on water/Jesus", Flag = "WaterWalk"})
                            CharacterSection:Toggle({Name = "Spiderman", Flag = "ClimbWalls"}):Keybind({Mode = "Hold", Name = "Spiderman", Flag = "Spiderman"})
                            CharacterSection:Slider({Name = "Spiderman speed", Flag = "SpidermanSpeed", Min = 0, Max = 20, AllowDecimals = 10})
                            --CharacterSection:Toggle({Name = "Fly", Flag = "CanFly"}):Keybind({Name = "Fly", Flag = "Fly"})
                           -- CharacterSection:Slider({Min = 1, Max = 100, Flag = "FlySpeed", Name = "Speed"})

                            CharacterSection:Toggle({Name = "Remove jump cooldown", Flag = "Bunnyhop"});
                            CharacterSection:Toggle({Name = "Prevent ADS Block", Flag = "PreventAntiScope"});
                            CharacterSection:Toggle({Name = "Remove weight", Flag = "RemoveWeight"});
                            CharacterSection:Toggle({Name = "Remove drowning", Flag = "AntiDrown"});
                            CharacterSection:Toggle({Name = "Remove falldamage", Flag = "AntiFall"});
                            CharacterSection:Toggle({Name = "Remove outpost landmines", Flag = "RemoveOutpostMines", Callback = function()
                                if Library.Flags.RemoveOutpostMines and Library.Flags.RemoveOutpostMines.Value and Workspace:FindFirstChild("AiZones") and Workspace.AiZones:FindFirstChild("OutpostLandmines") then 
                                    for i, v in next, Workspace.AiZones.OutpostLandmines:GetChildren() do 
                                        if v then 
                                            v:Destroy()
                                        end
                                    end
                                end;
                            end});
                            CharacterSection:Keybind({Name = "Drop inventory", Flag = "QuickDropLoot", Mode = "Hold", Callback = function()
                                task.spawn(function()
                                    if Library.Flags.QuickDropLoot.Value then 
                                        for Index, Value in next, Client.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do 
                                            if Value:IsA("ObjectValue") and Value.Value ~= nil then
                                                ReplicatedStorage.Remotes.DropItem:FireServer(Value.Value)
                                            end;
                                        end;
                                    end;
                                end);
                            end});
                        
                        
                            --[[ CharacterSection:Button({Name = "Bypass movement restrictions", Callback = function()
                                local SeatFound = false;
                                Library:Notify("Attempting to bypass..")
                                for Index, Seat in next, Workspace:GetDescendants() do 
                                    if Seat:IsA("VehicleSeat") then 
                                        Library:Notify("Found potential vehicle")
                                        Seat:Sit(Client.Character.Humanoid);

                                        wait(0.5);

                                        Client.Character.Humanoid.Sit = false; 

                                        wait(0.5);

                                        --Client.Character.Humanoid.Sit = true; 

                                        wait(0.5);
                                        ReplicatedStorage.Remotes.VehicleInteractions:FireServer({
                                            ["Vehicle"] = Seat.Parent.Parent,
                                            ["Action"] = "Enter",
                                            ["Door"] = Seat.Parent.Parent.Body.FLdoor.FL_Door
                                        });

                                        wait(0.5);

                                        --Client.Character.Humanoid.Sit = false;
                                        Client.Character.HumanoidRootPart.CFrame = Client.Character.HumanoidRootPart.CFrame + Vector3.new(0, 10, 0);
                                        SeatFound = true;
                                        Library:Notify("Successfully bypassed! Feel free to put your speed really high or use a fly script.", 10)
                                        break;
                                    end;
                                end;

                                if not SeatFound then 
                                    Library:Notify("Bypass unsuccessful. Failed to find a vehicle. Maybe travel to a different part of the map.", 10)
                                end;
                            end});]]
                        end;

                        local AntiAim = MiscTab:NewSection({Name = "Anti aim", Side = "Right"}); do 
                            AntiAim:Toggle({Flag = "AntiAim", Name = "Enabled"});
                    
                            AntiAim:Slider({Name = "Pitch", Flag = "PitchValue" ,Max = 2, Min = -2, AllowDecimals = 10})
                            AntiAim:Slider({Name = "Yaw offset", Flag = "YawOffset", Min = -360, Max = 360})
                    
                            AntiAim:Dropdown({Max = 4, Name = "Yaw base", Flag = "YawBase", Options = {"None", "Random", "Spin", "Targets"}});
                            AntiAim:Dropdown({Max = 5, Name = "Pitch base", Flag = "PitchBase", Options = {"Up", "Down", "Custom", "Random", "Nod"}})
                        end;

                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Visualize hits", Flag = "VisualizeHits"}):Colorpicker({Name = "Hitmarker Color", Flag = "HitmarkerColor", Default = Color3.fromRGB(255, 255, 255)})
                            Hitmarkers:Toggle({Name = "Display damage", Flag = "DisplayDamage"}):Colorpicker({Name = "Damage Color", Flag = "DamageColor", Default = Color3.fromRGB(255, 255, 255)})
                            Hitmarkers:Toggle({Name = "Hitsounds", Flag = "CustomHitSounds"});

                            Hitmarkers:Toggle({Name = "Remove killsound", Flag = "EliminateKillSound"})
                            local HitmarkerOptions = {};
                            local Total = 0;
                            
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Library.KillsoundDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Killsound", Flag = "KillSound", Options = HitmarkerOptions});

                            Hitmarkers:Slider({Name = "Visualize time", Min = 0, Max = 5, AllowDecimals = 10, Flag = "HitmarkerTime"})

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;

                        local GameSection = MiscTab:NewSection({Name = "Game", Side = "Right"}); do 
                            GameSection:Button({Name = "Reduce lag", Callback = function()
                                for _, Value in next, GameConnections do 
                                    Value:Disable();
                                end;
                            end});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Left"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;
                end;

                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
                
                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
            Window:SetTab("Combat");

        end;
    end;

    if GameName == "Universal" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Toggle({Name = "Check for fire func", Flag = "CheckForFireFunc"})
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "BulletTP"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Dropdown({Max = 6, Name = "Method", Flag = "SilentMethod", Options = {"Raycast", "FindPartOnRayWithWhitelist", "FindPartOnRayWithIgnoreList", "FindPartOnRay", "ScreenPointToRay", "ViewportPointToRay"}})
                                AimbotSection:Multidropdown({Name = "Origin", Flag = "Origin", Options = {"Camera"}})
                                AimbotSection:Multidropdown({Name = "Ignore list", Flag = "Include", Default = {"Character", "Camera"}, Options = {"Character", "Camera"}})
                                AimbotSection:Multidropdown({Name = "Block methods", Flag = "BlockedMethods", Options = {"PivotTo", "TranslateBy", "SetPrimaryPartCFrame", "BulkMoveTo"}})
                                AimbotSection:Slider({Name = "Multiplty ray unit by", Flag = "MultiplyUnitBy", Min = 1, Max = 10000});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local InfoSection = CombatTab:NewSection({Name = "Display Info", Side = "Left"}); do 
                            InfoSection:Toggle({Name = "Enabled", Flag = "InventoryViewer"})
                            InfoSection:Slider({Suffix = "%", Name = "Position X ", Flag = "InfoPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Slider({Suffix = "%", Name = "Position Y ", Flag = "InfoPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Multidropdown({Name = "Options", Flag = "InventoryOptions", Options = {"Name", "Distance", "Health", "Inventory"}});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                if IsStudio then 
                                    Players:Toggle({Name = "Studio AI Testing",Flag = "IncludeAiESP"});

                                    local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                    AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                    AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                end;

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        local Radar = ESPTab:NewSection({Name = "Radar", Side = "Left"}); do 
                            local RadarToggle = Radar:Toggle({Name = "Enabled", Flag = "Radar"})
                            
                            RadarToggle:Colorpicker({Name = "Radar background color", Flag = "RadarColor", Default = Color3.fromRGB(0, 0, 0), Callback = function()
                                Visuals.RadarFrame.BackgroundColor3 = Library.Flags.RadarColor.Color;
                                Visuals.RadarFrame.BackgroundTransparency = Library.Flags.RadarColor.Transparency;
                            end});

                            RadarToggle:Colorpicker({Name = "AI Color", Flag = "RadarAIColor"});
                            RadarToggle:Colorpicker({Name = "Player Color", Flag = "RadarPlayerColor"});
                            RadarToggle:Colorpicker({Name = "Local Color", Flag = "LocalColor", Default = Color3.fromRGB(255, 255, 255), Callback = function()
                                Visuals.RadarClient.BackgroundColor3 = Library.Flags.LocalColor.Value;
                            end})
                            Radar:Slider({Name = "Radius", Flag = "RadarDistance", Min = 100, Max = 1000});
                            Radar:Slider({Name = "Delay", Flag = "RadarDelay", Min = 0, Max = 1000, Suffix = "MS"});
                            Radar:Slider({Name = "Size", Flag = "RadarSize", Min = 100, Max = 400, Callback = function()
                                Visuals.RadarFrame.Size = UDim2.new(0, Library.Flags.RadarSize.Value, 0, Library.Flags.RadarSize.Value);
                            end});

                            Radar:Slider({Suffix = "%", Name = "Position X ", Flag = "RadarPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            Radar:Slider({Suffix = "%", Name = "Position Y ", Flag = "RadarPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});

                        end;
                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;

                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Eastern War" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "BulletTP"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 12000, Default = 2000});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do
                            Mods:Toggle({Name = "Remove recoil", Flag = "RemoveRecoil"})
                            Mods:Toggle({Name = "Remove sway", Flag = "RemoveSway"})
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                if IsStudio then 
                                    Players:Toggle({Name = "Studio AI Testing",Flag = "IncludeAiESP"});

                                    local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                    AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                    AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                end;

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;

                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// Local Tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"})

                        local CameraSec = LocalTab:NewSection({Name = "Camera", Side = "Left"}); do 
                            CameraSec:Toggle({Name = "Remove bobbing", Flag = "RemoveCameraBobbing"});
                        end;
                    end

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;
    
    if GameName == "Games Unite" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Toggle({Name = "Check for fire func", Flag = "CheckForFireFunc"})
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "BulletTP"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Dropdown({Max = 6, Name = "Method", Flag = "SilentMethod", Options = {"Raycast", "FindPartOnRayWithWhitelist", "FindPartOnRayWithIgnoreList", "FindPartOnRay", "ScreenPointToRay", "ViewportPointToRay"}})
                                AimbotSection:Multidropdown({Name = "Origin", Flag = "Origin", Options = {"Camera"}})
                                AimbotSection:Multidropdown({Name = "Ignore list", Flag = "Include", Default = {"Character", "Camera"}, Options = {"Character", "Camera"}})
                                AimbotSection:Multidropdown({Name = "Block methods", Flag = "BlockedMethods", Options = {"PivotTo", "TranslateBy", "SetPrimaryPartCFrame", "BulkMoveTo"}})
                                AimbotSection:Slider({Name = "Multiplty ray unit by", Flag = "MultiplyUnitBy", Min = 1, Max = 10000});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local InfoSection = CombatTab:NewSection({Name = "Display Info", Side = "Left"}); do 
                            InfoSection:Toggle({Name = "Enabled", Flag = "InventoryViewer"})
                            InfoSection:Slider({Suffix = "%", Name = "Position X ", Flag = "InfoPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Slider({Suffix = "%", Name = "Position Y ", Flag = "InfoPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Multidropdown({Name = "Options", Flag = "InventoryOptions", Options = {"Name", "Distance", "Health", "Inventory"}});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                if IsStudio then 
                                    Players:Toggle({Name = "Studio AI Testing",Flag = "IncludeAiESP"});

                                    local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                    AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                    AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                end;

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Korrupt Zombies" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Include zombies", Flag = "IncludeAi"});
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "BulletTP"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "Remove recoil", Flag = "NoRecoil"});

                            Mods:Toggle({Name = "Remove spread", Flag = "NoSpread"});

                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                Players:Toggle({Name = "Include zombies",Flag = "IncludeAiESP"});

                                local AB_Toggle = Players:Toggle({Name = "Zombie Armor", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});


                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Armor", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"});
                            
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Lone Survival" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Include Ai", Flag = "IncludeAi"});
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do
                            Mods:Toggle({Name = "Remove recoil", Flag = "RemoveRecoil"})
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                Players:Toggle({Name = "Include Ai", Flag = "IncludeAiESP"});
                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                               -- Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                               -- Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        
                        do --// objects 
                            local WorldESPSection = ESPTab:NewSection({Name = "ESP", Side = "Left"}); do 
                                WorldESPSection:Toggle({Name = "Dropped packs", Flag = "ESPCorpses"}):Colorpicker({Name = "Dropped packs Color", Flag = "CorpsesColor"})
                                WorldESPSection:Toggle({Name = "Sleepers", Flag = "ESPSleepers"}):Colorpicker({Name = "Sleepers Color", Flag = "SleepersColor"})
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "m"});
                            end;
                        end;
    

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                --ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Aftermath" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Include AI", Flag = "IncludeAi"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                Players:Toggle({Name = "Include AI",Flag = "IncludeAiESP"});
                                if IsStudio then 
                                    Players:Toggle({Name = "Studio AI Testing",Flag = "IncludeAiESP"});

                                    local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                    AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                    AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                end;

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;

                            local WorldESPSection = ESPTab:NewSection({Name = "ESP", Side = "Left"}); do 
                                WorldESPSection:Toggle({Name = "Items", Flag = "ESPItems"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Item Color", Flag = "ItemsColor"});
                                WorldESPSection:Toggle({Name = "Corpses", Flag = "ESPCorpse"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Corpses Color", Flag = "CorpseColor"});
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "m"});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Apocalypse Rising 2" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Toggle({Name = "Check for fire func", Flag = "CheckForFireFunc"})
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "BulletTP"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local InfoSection = CombatTab:NewSection({Name = "Display Info", Side = "Left"}); do 
                            InfoSection:Toggle({Name = "Enabled", Flag = "InventoryViewer"})
                            InfoSection:Slider({Suffix = "%", Name = "Position X ", Flag = "InfoPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Slider({Suffix = "%", Name = "Position Y ", Flag = "InfoPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Multidropdown({Name = "Options", Flag = "InventoryOptions", Options = {"Name", "Distance", "Health", "Inventory"}});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                if IsStudio then 
                                    Players:Toggle({Name = "Studio AI Testing",Flag = "IncludeAiESP"});

                                    local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                    AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                    AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                end;

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Blood and Iron" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;
                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "Instant bullet", Flag = "InstantBullet", Callback = function()
                                for Index, Value in next, getgc(true) do 
                                    if type(Value) == "table" and rawget(Value, "BulletMuzzleVelocity") then 
                                        if Library.Flags.InstantBullet.Value then 
                                            Value.BulletMuzzleVelocity = 5000;
                                            Value.BulletMaximumDeviation = 0.000005;
                                        end;
                                    end;
                                end;
                            end});
                            Mods:Toggle({Name = "Hitbox expander", Flag = "ExpandHeads", Risky = true}):Keybind({Name = "HBE", Flag = "HBE", Mode = "Toggle"});
                            Mods:Slider({Name = "Headsize", Flag = "Headsize", Min = 0, Max = 6});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                --Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "The Streets" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                               
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});
                                AimbotSection:Slider({Name = "Silent aim velocity", Flag = "AimVelocity", Min = 4, Max = 10});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local InfoSection = CombatTab:NewSection({Name = "Display Info", Side = "Left"}); do 
                            InfoSection:Toggle({Name = "Enabled", Flag = "InventoryViewer"})
                            InfoSection:Slider({Suffix = "%", Name = "Position X ", Flag = "InfoPositionX", Default = 1, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Slider({Suffix = "%", Name = "Position Y ", Flag = "InfoPositionY", Default = 12, Min = 0, Max = 100, Callback = function() Visuals:UpdatePosition() end});
                            InfoSection:Multidropdown({Name = "Options", Flag = "InventoryOptions", Options = {"Name", "Distance", "Health", "Inventory"}});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;

                        do --// objects 
                            local WorldESPSection = ESPTab:NewSection({Name = "ESP", Side = "Left"}); do 
                                WorldESPSection:Toggle({Name = "Gun shops", Flag = "ESPGunShops"}):Colorpicker({Name = "Gun Shops Color", Flag = "GunShopsColor"})
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "m"});
                            end;
                        end;
    
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"})
                            CharacterSec:Toggle({Name = "Noclip", Flag = "NoClip"}):Keybind({Name = "Noclip", Flag = "Noclip"})
                            CharacterSec:Toggle({Name = "Fly", Flag = "CanFly"}):Keybind({Name = "Fly", Flag = "Fly"})
                            CharacterSec:Slider({Min = 1, Max = 100, Flag = "FlySpeed", Name = "Speed"})
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 100, Flag = "SpeedValue", Max = 5, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;

                        local Interaction = MiscTab:NewSection({Name = "Interaction", Side = "Left"}); do 
                            Interaction:Toggle({Name = "Instant interact", Flag = "InstantInteract"})
                        end;
                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "State Of Anarchy" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "MagicBullet"})
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 10000, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                               
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Left"}); do 
                            Mods:Toggle({Name = "Remove Recoil", Flag = "RemoveRecoil", Callback = function()
                                if Library.Flags.RemoveRecoil.Value then 
                                    for Index, Value in next, getgc(true) do 
                                        if type(Value) == "table" and rawget(Value, "velocity") then 
                                            Value.vRecoil = Vector3.new() 
                                            Value.cRecoil = Vector3.new() 
                                            Value.aRecoil = Vector3.new()
                                        end
                                    end 
                                end 
                            end})
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;

                        do --// objects 
                            local WorldESPSection = ESPTab:NewSection({Name = "ESP", Side = "Left"}); do 
                                WorldESPSection:Toggle({Name = "Items", Flag = "ESPItems"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Item Color", Flag = "ItemsColor"});
                                WorldESPSection:Toggle({Name = "Corpses", Flag = "ESPCorpse"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Corpses Color", Flag = "CorpseColor"});
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "m"});
                            end;
                        end;
    
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Noclip", Flag = "NoClip"}):Keybind({Name = "Noclip", Flag = "Noclip"})
                            CharacterSec:Toggle({Name = "Fly", Flag = "CanFly"}):Keybind({Name = "Fly", Flag = "Fly"})
                            CharacterSec:Slider({Min = 1, Max = 100, Flag = "FlySpeed", Name = "Speed"})
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 100, Flag = "SpeedValue", Max = 300, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;

                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Counter Blox" or GameName == "Arsenal" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                               
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});
                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "Instant reload", Flag = "InstantReload"})
                            Mods:Toggle({Name = "Instant equip", Flag = "InstantEquip"})
                            Mods:Toggle({Name = "Reduce recoil", Flag = "ModRecoil"});
                            Mods:Slider({Min = 0, Max = 100, Name = "Recoil percent", Flag = "RecoilPercent"})
                            Mods:Toggle({Name = "Reduce spread", Flag = "ReduceSpread"});
                            Mods:Slider({Min = 0, Max = 100, Name = "Spread percent", Flag = "SpreadPercent"})
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;

                        do --// objects 
                            local WorldESPSection = ESPTab:NewSection({Name = "ESP", Side = "Left"}); do 
                                WorldESPSection:Toggle({Name = "Guns", Flag = "ESPGuns"}):Colorpicker({Name = "Gun Color", Flag = "GunsColor"})
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "m"});
                            end;
                        end;
    
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;
                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"})
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 100, Flag = "SpeedValue", Max = 5, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;

                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;

                    end;

                    if IsStudio then 
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;

        Window:SetTab("Combat");
    end;

    if GameName == "Gunfight Arena" then 
        local Window = Library:NewWindow({TabAmount = 3, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"});
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "Remove spread", Flag = "NoSpread"});
                            Mods:Toggle({Name = "Remove recoil", Flag = "NoRecoil", Callback = function()
                                GameFramework:ApplyMods()
                            end});

                            Mods:Toggle({Name = "Fast bullet", Flag = "FastBullet", Callback = function()
                                GameFramework:ApplyMods()
                            end});

                        end;

                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                if IsStudio then 
                                    Players:Toggle({Name = "Studio AI Testing",Flag = "IncludeAiESP"});

                                    local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                    AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                    AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                end;

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});

                    do --// Cmera tab 
                        local CameraSection = MiscTab:NewSection({Name = "Camera", Side = "Left"}); do 
                            CameraSection:Toggle({Name = "Remove bobbing", Flag = "RemoveBobbing"})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Fallen" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                if IsStudio then 
                                    AimbotSection:Toggle({Name = "Studio AI Testing", Flag = "IncludeAi"});
                                end;

                            end;
                        end;

                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                if IsStudio then 
                                    ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                end;
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 40, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Criminality" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do
                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "INFECTION Team check", Flag = "TeamCheck"});
                                AimbotSection:Toggle({Name = "Ignore downed", Flag = "IgnoreDowned"})
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "MagicBullet", Risky = true})
                                AimbotSection:Toggle({Name = "Autoshoot", Flag = "Autoshoot", Risky = true})
                                AimbotSection:Slider({Name = "Autoshoot override distance", Flag = "OverrideDistance", Min = 0, Max = 200})
                                AimbotSection:Slider({Name = "Max autoshoot walls", Flag = "AutoWalls", Min = 0, Max = 4})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });

                                local HitmarkerOptions = {};
                                local Total = 0;
                                for Index, Value in next, HitmarkerSounds do
                                    Total = Total + 1;
                                    HitmarkerOptions[Index] = Index;
                                end;

                                AimbotSection:Dropdown({Max = Total, Name = "Autoshoot hitmarker", Flag = "HitSound", Options = HitmarkerOptions, Callback = function()
                                    Library:UpdateSounds("Headshot");
                                end});

                                AimbotSection:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                            end
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do
                            Mods:Toggle({Name = "GL/RPG Controller", Flag = "ControlRockets"})
                            Mods:Toggle({Name = "Remove recoil", Flag = "RemoveRecoil"});
                            Mods:Toggle({Name = "Remove spread", Flag = "RemoveSpread"});
                            Mods:Toggle({Name = "Instant aim", Flag = "InstantAim"});
                            Mods:Toggle({Name = "Instant equip", Flag = "InstantEquip"});
                            Mods:Toggle({Name = "Instant pump", Flag = "InstantCharge"});
                            Mods:Toggle({Name = "Remove slowdown", Flag = "Walkshoot", Risky = true});
                            Mods:Toggle({Name = "Instant bullet", Flag = "InstantHit", Risky = true});
                            Mods:Toggle({Name = "Instant reload", Flag = "InstantReload", Risky = true})
                            Mods:Toggle({Name = "Custom firerate", Flag = "RapidFire", Risky = true});
                            Mods:Slider({Name = "Firerate", Flag = "FireRate", Min = 0, Max = 30, AllowDecimals = 10})
                            Mods:Toggle({Name = "Wallbang", Flag = "Wallbang", Risky = true});
                            --Mods:Toggle({Name = "Hitbox expander", Flag = "ExpandHeads", Risky = true}):Keybind({Name = "HBE", Flag = "HBE", Mode = "Toggle"});
                           -- Mods:Slider({Name = "Headsize", Flag = "Headsize", Min = 0, Max = 6});
                        end;

                        local Aura = CombatTab:NewSection({Name = "Aura", Side = "Left"}); do 
                            Aura:Toggle({Name = "Kill aura", Flag = "KillAura"});
                            Aura:Toggle({Name = "Finish aura", Flag = "FinishAura"});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});

                               
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});

                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        do --// Custom Object 
                            local WorldESPSection = ESPTab:NewSection({Name = "Custom objects", Side = "Left"}); do 
                                
                                WorldESPSection:Toggle({Name = "ATMs", Flag = "ESPATM"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "ATM Color", Flag = "ATMColor"});
                                WorldESPSection:Toggle({Name = "Dealers", Flag = "ESPDealer"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Dealer Color", Flag = "DealerColor"});
                                WorldESPSection:Toggle({Name = "Safe/Registers", Flag = "ESPSafe"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Safe Color", Flag = "SafeColor"});
                                WorldESPSection:Toggle({Name = "Mystery boxes", Flag = "ESPMystery"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Mystery box Color", Flag = "MysteryColor"});
                                WorldESPSection:Toggle({Name = "Scrap/Crates", Flag = "ESPScrap"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Scrap Color", Flag = "ScrapColor"});
                                WorldESPSection:Multidropdown({Flag = "Rarities", Name = "Scrap/Crate Rarities", Max = 3, Options = {"Gray", "Green", "Red"}});

                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "s"});
                            end;
                            local Filter  = ESPTab:NewSection({Name = "Filter", Side = "Right"}); do 
                                Filter:Toggle({Name = "Filter dealer stocks", Flag = "ShowStocks"});
                                Filter:Searchbar({Name = "Items", Flag = "FilteredItems", Options = GameFramework.CrimItems});
                            end;
                        end;

                        do --// Hazards
                            local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Right"}); do 
                                local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do
                                MiscOptions:Toggle({Name = "INFECTION Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                

                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); do 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});
                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});
                            end;

                            local Removals = LocalTab:NewSection({Name = "Removals", Side = "Right"}); do 
                                Removals:Toggle({Name = "Smoke", Flag = "NoSmoke"});
                                Removals:Toggle({Name = "Flashbangs", Flag = "NoFlash"});
                                Removals:Toggle({Name = "Teargas blur", Flag = "NoTega"});
                                Removals:Toggle({Name = "Concussion", Flag = "NoConcuss"});
                                Removals:Toggle({Name = "Visor / Helmet", Flag = "NoVisor"});
                            end;

                            local CameraSection = LocalTab:NewSection({Name = "Camera", Side = "Left"}); do 
                                CameraSection:Toggle({Name = "Remove bobbing", Flag = "RemoveBobbing"})
                            end;

                            local ViewmodelSec = LocalTab:NewSection({Name = "Viewmodel", Side = "Left"}); do 
                                ViewmodelSec:Toggle({Name = "Enabled", Flag = "ViewmodelChams"});
                                ViewmodelSec:Toggle({Name = "Arms", Flag = "ArmChams"}):Colorpicker({Name = "Arm Color", Flag = "ArmColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Item", Flag = "ItemChams"}):Colorpicker({Name = "Item Color", Flag = "ItemColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Outline Viewmodel", Flag = "HighlightViewmodel"}):Colorpicker({Name = "Viewmodel Outline Color", Flag = "ViewmodelOutlineColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Dropdown({Name = "Material", Flag = "ViewmodelMaterial", Options = {"ForceField", "Neon", "Glass"}});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;

                            local Hitmarkers = LocalTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                                Hitmarkers:Toggle({Name = "Display damage", Flag = "DisplayDamage"}):Colorpicker({Name = "Damage Color", Flag = "DamageColor", Default = Color3.fromRGB(255, 255, 255)});
                                Hitmarkers:Slider({Name = "Visualize time", Min = 0, Max = 5, AllowDecimals = 10, Flag = "HitmarkerTime"})
                            end
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Movement", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina", Risky = true});
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed", Risky = true});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 100, Flag = "SpeedValue", Max = 2, Min = 0});
    
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump", Risky = true});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 100, Min = 0});

                            CharacterSec:Button({Name = "Hide head underground", Callback = function()
                                GameFramework.HeadGlitch = true;
                                local Character = Client.Character;

                                local NeckJoint = Character.HumanoidRootPart.CTs.RGCT_Neck

                                Character.Torso.Neck:Destroy();
                                Character.Torso.NeckAttachment:Destroy();

                                NeckJoint.TwistLowerAngle = 0;
                                NeckJoint.TwistUpperAngle = 0;
                                NeckJoint.Restitution = 0;
                                NeckJoint.UpperAngle = 0;
                                NeckJoint.MaxFrictionTorque = 0;

                                Character.Head.HeadCollider:Destroy()
                            end})
                        end;

                        local RemovalsSection = MiscTab:NewSection({Name = "Removals", Side = "Right"}); do
                            RemovalsSection:Toggle({Name = "Less inertia", Flag = "LessInertia"}); 
                            RemovalsSection:Toggle({Name = "Ragdolling", Flag = "AntiRagdoll"}); 
                            RemovalsSection:Toggle({Name = "Broken limbs", Flag = "AntiBreak"})
                            RemovalsSection:Toggle({Name = "Fire damage", Flag = "AntiFire"}); 
                            RemovalsSection:Toggle({Name = "Fall damage", Flag = "AntiFall"});
                            RemovalsSection:Toggle({Name = "Drown damage", Flag = "AntiDrown"});
                            RemovalsSection:Toggle({Name = "Barbed-wire damage", Flag = "AntiWire"});
                        end;

                        local Interaction = MiscTab:NewSection({Name = "Interaction", Side = "Left"}); do 
                            Interaction:Toggle({Name = "Instant lockpick", Flag = "InstantLockpick"});
                            Interaction:Toggle({Name = "Instant interact", Flag = "InstantInteract"});
                            Interaction:Toggle({Name = "Register/Safe aura", Flag = "RegisterAura"}):Keybind({Name = "Safe aura", Flag = "Safe Aura", Mode = "Hold"});
                            Interaction:Button({Name = "Toggle vibecheck elevator", Callback = function()
                                local Knob = Workspace.Map.Doors.Elevator_28.Knob1;
                                Client.Character.HumanoidRootPart.CFrame = Knob.CFrame;
                                local Prompt = Knob:WaitForChild("ProximityPrompt");
                                task.wait(0.05);
                                for Index = 1, 10 do 
                                    fireproximityprompt(Prompt);
                                end;
                            end})
                        end;
                        
                        local ChatSection = MiscTab:NewSection({Name = "Chatbot", Side = "Right"}); do 
                            ChatSection:Toggle({Name = "Enabled", Flag = "Chatspam"});

                            ChatSection:Toggle({Name = "Random emojis", Flag = "Emojis"})
                            ChatSection:Toggle({Name = "Random symbols", Flag = "Symbols"})
                            ChatSection:Dropdown({Name = "Phrase", Flag = "Phrase", Max = 3, Options = {"Ethereal", "British", "Trashtalk"}});
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Frontlines" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat sections
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Toggle({Name = "just enable this - its needed", Flag = "IncludeAi"})
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });
                            end;
                        end;

                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "No Recoil", Flag = "RemoveRecoil", Callback = function()
                                if Library.Flags.RemoveRecoil.Value and GameFramework.CurrentMain then 
                                    GameFramework:ApplyNoRecoil(GameFramework.CurrentMain);
                                end;
                            end});
    
                            Mods:Toggle({Name = "No bobbing", Flag = "RemoveBobbing", Callback = function()
                                if Library.Flags.RemoveBobbing.Value and GameFramework.CurrentMain then 
                                    GameFramework:NoBobbing(GameFramework.CurrentMain);
                                end;
                            end});
    
                            Mods:Toggle({Name = "Instant bullet", Flag = "InstantBullet", Callback = function()
                                if GameFramework.CurrentMain then 
                                    GameFramework:UpdateMods()
                                end;
                            end});
    
                            Mods:Toggle({Name = "Rapid fire", Flag = "RapidFire", Callback = function()
                                if GameFramework.CurrentMain then 
                                    GameFramework:UpdateMods()
                                end;
                            end});
    
                            Mods:Toggle({Name = "No deviation", Flag = "NoDeviation", Callback = function()
                                if GameFramework.CurrentMain then 
                                    GameFramework:UpdateMods()
                                end;
                            end;})
    
                            Mods:Toggle({Name = "No weight", Flag = "NoWeight", Callback = function()
                                if GameFramework.CurrentMain then 
                                    GameFramework:UpdateMods()
                                end;
                            end});
    
                            Mods:Toggle({Name = "God ergonomics", Flag = "BetterErgo", Callback = function()
                                if GameFramework.CurrentMain then 
                                    GameFramework:UpdateMods()
                                end;
                            end});

                            Mods:Toggle({Name = "Instant reload", Flag = "InstantReload", Callback = function()
                                if GameFramework.CurrentMain then 
                                    GameFramework:UpdateMods()
                                end;
                            end});
                            
                           -- Mods:Toggle({Name = "Enhance penetration", Flag = "BetterPentration", Callback = function()
                            --    GameFramework:ApplyPenetration(Library.Flags.BetterPentration.Value)
                            --end});
                            Mods:Toggle({Name = "No obstructions", Flag = "RemoveObstructions"})
                            Mods:Toggle({Name = "Infinite breath", Flag = "InfiniteBreath"})
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                Players:Toggle({Name = "just enable this - its needed", Flag = "IncludeAiESP"})
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                --Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        do --// Hazards
                            local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Left"}); do 
                                local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});
                            end;
                        end;
                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Health"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;
                    
                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); 

                        do --// Sections 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});
                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});
                            end;

                            local ViewmodelSec = LocalTab:NewSection({Name = "Viewmodel", Side = "Left"}); do 
                                ViewmodelSec:Toggle({Name = "Enabled", Flag = "ViewmodelChams"});
                                ViewmodelSec:Toggle({Name = "Arms", Flag = "ArmChams"}):Colorpicker({Name = "Arm Color", Flag = "ArmColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Item", Flag = "ItemChams"}):Colorpicker({Name = "Item Color", Flag = "ItemColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Outline Viewmodel", Flag = "HighlightViewmodel"}):Colorpicker({Name = "Viewmodel Outline Color", Flag = "ViewmodelOutlineColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Dropdown({Name = "Material", Flag = "ViewmodelMaterial", Options = {"ForceField", "Neon", "Glass"}});
                                ViewmodelSec:Button({Name = "Force update viewmodel", Callback = function()
                                    for _, VM in next, Workspace.ignore:GetChildren() do 
                                        if VM.Name == "viewmodel" then 
                                            Utility:UpdateViewmodel(VM)
                                        end;
                                    end;
                                end});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 50, Min = 0});
                            
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Jump power", AllowDecimals = 10, Flag = "JumpValue", Max = 50, Min = 0});

                            CharacterSec:Toggle({Name = "Shoot while running", Flag = "WalkShoot"});
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"});
                            CharacterSec:Toggle({Name = "Infinite breath", Flag = "InfiniteBreath"});
                        end;
                    end;

                    do --// Hitmarkers
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Scorched Earth" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat sections
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do 
                                AimbotSection:Toggle({Name = "Manipulation", Flag = "Manipulation"});

                                AimbotSection:Slider({Name = "Manipulation range", Flag = "ManipulationDistance", Min = 1, Max = 15});

                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});

                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });
                            end;
                        end;

                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "No Recoil", Flag = "RemoveRecoil"});
                            Mods:Toggle({Name = "No Spread", Flag = "RemoveSpread"});
                            Mods:Toggle({Name = "No Sway", Flag = "RemoveSway"});
                            Mods:Toggle({Name = "No Drag", Flag = "RemoveDrag"});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});
                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                --Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                --local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                --ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                --ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                --Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        do --// Hazards
                            local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Left"}); do 
                                local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});
                            end;
                        end;
                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Health"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;
                    
                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); 

                        do --// Sections 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});
                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});
                            end;

                            local ViewmodelSec = LocalTab:NewSection({Name = "Viewmodel", Side = "Left"}); do 
                                ViewmodelSec:Toggle({Name = "Enabled", Flag = "ViewmodelChams"});
                                ViewmodelSec:Toggle({Name = "Arms", Flag = "ArmChams"}):Colorpicker({Name = "Arm Color", Flag = "ArmColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Item", Flag = "ItemChams"}):Colorpicker({Name = "Item Color", Flag = "ItemColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Outline Viewmodel", Flag = "HighlightViewmodel"}):Colorpicker({Name = "Viewmodel Outline Color", Flag = "ViewmodelOutlineColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Dropdown({Name = "Material", Flag = "ViewmodelMaterial", Options = {"ForceField", "Neon", "Glass"}});
                                ViewmodelSec:Button({Name = "Force update viewmodel", Callback = function()
                                    for _, VM in next, Workspace.ignore:GetChildren() do 
                                        if VM.Name == "viewmodel" then 
                                            Utility:UpdateViewmodel(VM)
                                        end;
                                    end;
                                end});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 

                            CharacterSec:Toggle({Name = "Fly", Flag = "CanFly"}):Keybind({Name = "Fly", Flag = "Fly"})
                            CharacterSec:Slider({Min = 1, Max = 100, Flag = "FlySpeed", Name = "Speed"})

                            --[[CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 50, Min = 0});
                            
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Jump power", AllowDecimals = 10, Flag = "JumpValue", Max = 50, Min = 0});

                            CharacterSec:Toggle({Name = "Shoot while running", Flag = "WalkShoot"});
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"});
                            CharacterSec:Toggle({Name = "Infinite breath", Flag = "InfiniteBreath"});]]
                        end;
                    end;

                    do --// Hitmarkers
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Library.HeadshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Headshot", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Headshot");
                            end});
                            Library.BodyshotDropdown = Hitmarkers:Dropdown({Max = Total, Name = "Bodyshot", Flag = "BodyshotSound", Options = HitmarkerOptions, Callback = function()
                                Library:UpdateSounds("Bodyshot");
                            end});

                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 10, AllowDecimals = 10})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Combat Warriors" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat sections
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Kill aura", Flag = "KillAura"})
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 0});
                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });
                            end;
                        end;

                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "Remove recoil", Flag = "RemoveRecoil", Callback = function()
                                if Library.Flags.RemoveRecoil.Value then
                                    for Index, Value in next, getgc(true) do 
                                        if type(Value) == "table" and rawget(Value, "recoilAmount") then 
                                            Value.recoilAmount = 0 
                                        end
                                    end
                                end
                            end})

                            Mods:Toggle({Name = "Remove chargeup", Flag = "RemoveCharge", Callback = function()
                                if Library.Flags.RemoveCharge.Value then
                                    for Index, Value in next, getgc(true) do 
                                        if type(Value) == "table" and rawget(Value, "chargeOnDuration") then 
                                            Value.chargeOnDuration = 0.05 
                                        end

                                        if type(Value) == "table" and rawget(Value, "cooldown") then 
                                            Value.cooldown = 0.05 
                                        end
                                    end
                                end
                            end})
                            Mods:Toggle({Name = "Wallbang", Flag = "Wallbang", Callback = function()
                                local Value = Library.Flags.Wallbang.Value 

                                if Value and Workspace:FindFirstChild("Map") then
                                    Workspace.Map.Parent = Workspace.EffectsJunk 
                                elseif not Value and not Workspace:FindFirstChild("Map") then 
                                    Workspace.EffectsJunk.Map.Parent = Workspace 
                                end
                            end})
                            Mods:Toggle({Name = "Hitbox expander", Flag = "ExpandHeads", Risky = true}):Keybind({Name = "HBE", Flag = "HBE", Mode = "Toggle"});
                            Mods:Slider({Name = "Headsize", Flag = "Headsize", Min = 0, Max = 6});
                        end;
                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                --Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        do --// Hazards
                            local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Left"}); do 
                                local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});
                            end;
                        end;
                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Health", "Death/Respawn"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;
                    
                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); 

                        do --// Sections 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});
                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});
                            end;

                            local ViewmodelSec = LocalTab:NewSection({Name = "Viewmodel", Side = "Left"}); do 
                                ViewmodelSec:Toggle({Name = "Enabled", Flag = "ViewmodelChams"});
                                ViewmodelSec:Toggle({Name = "Arms", Flag = "ArmChams"}):Colorpicker({Name = "Arm Color", Flag = "ArmColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Item", Flag = "ItemChams"}):Colorpicker({Name = "Item Color", Flag = "ItemColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Outline Viewmodel", Flag = "HighlightViewmodel"}):Colorpicker({Name = "Viewmodel Outline Color", Flag = "ViewmodelOutlineColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Dropdown({Name = "Material", Flag = "ViewmodelMaterial", Options = {"ForceField", "Neon", "Glass"}});
                                ViewmodelSec:Button({Name = "Force update viewmodel", Callback = function()
                                    for _, VM in next, Workspace.ignore:GetChildren() do 
                                        if VM.Name == "viewmodel" then 
                                            Utility:UpdateViewmodel(VM)
                                        end;
                                    end;
                                end});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 50, Min = 0});
                            
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Jump power", AllowDecimals = 10, Flag = "JumpValue", Max = 50, Min = 0});

                            CharacterSec:Toggle({Name = "Anti fall", Flag = "AntiFall"});
                            CharacterSec:Toggle({Name = "Anti traps", Flag = "NoBear"});
                            CharacterSec:Toggle({Name = "Infinite dash", Flag = "NoDashCooldown", Callback = function()
                                GameFramework.Dash.DASH_COOLDOWN = Library.Flags.NoDashCooldown.Value and 0 or 3 
                            end})
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"});
                        end;
                    end;

                    do --// Hitmarkers
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Hitmarkers:Dropdown({Max = Total, Name = "Sound", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                if Library.Flags.CustomHitSounds.Value then 
                                    ReplicatedStorage.Shared.Assets.Sounds.HitmarkerSound.SoundId = HitmarkerSounds[Library.Flags.HeadshotSound.Value]
                                    ReplicatedStorage.Shared.Assets.Sounds.HitmarkerSound.Volume = Library.Flags.HitmarkerVolume.Value 
                                end
                            end});
   
                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 100, AllowDecimals = 10, Callback = function()
                                ReplicatedStorage.Shared.Assets.Sounds.HitmarkerSound.Volume = Library.Flags.HitmarkerVolume.Value 
                            end})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Bad Business" then 
        local Window = Library:NewWindow({TabAmount = 4, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat sections
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Kill aura", Flag = "KillAura"})
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Team check", Flag = "TeamCheck"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 0});
                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });
                            end;
                        end;

                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "Crosshair", Flag = "Crosshair"}):Colorpicker({Name = "Crosshair color", Flag = "CrosshairColor", Callback = function()
                                Visuals.CrossAdornee.Color3 = Library.Flags.CrosshairColor.Color;
                            end});

                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end});
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end});
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end;
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                    end;
                end;
    
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                --Players:Toggle({Name = "Inventory", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
    
                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});

                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        do --// Hazards
                            local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Left"}); do 
                                local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});
                            end;
                        end;
                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Health", "Death/Respawn"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;
                    
                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); 

                        do --// Sections 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});
                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});
                            end;

                            local ViewmodelSec = LocalTab:NewSection({Name = "Viewmodel", Side = "Left"}); do 
                                ViewmodelSec:Toggle({Name = "Enabled", Flag = "ViewmodelChams"});
                                ViewmodelSec:Toggle({Name = "Arms", Flag = "ArmChams"}):Colorpicker({Name = "Arm Color", Flag = "ArmColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Item", Flag = "ItemChams"}):Colorpicker({Name = "Item Color", Flag = "ItemColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Toggle({Name = "Outline Viewmodel", Flag = "HighlightViewmodel"}):Colorpicker({Name = "Viewmodel Outline Color", Flag = "ViewmodelOutlineColor", Default = Library.Theme.Accent});
                                ViewmodelSec:Dropdown({Name = "Material", Flag = "ViewmodelMaterial", Options = {"ForceField", "Neon", "Glass"}});
                                ViewmodelSec:Button({Name = "Force update viewmodel", Callback = function()
                                    for _, VM in next, Workspace.ignore:GetChildren() do 
                                        if VM.Name == "viewmodel" then 
                                            Utility:UpdateViewmodel(VM)
                                        end;
                                    end;
                                end});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;
    
                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 50, Min = 0});
                            
                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Jump power", AllowDecimals = 10, Flag = "JumpValue", Max = 50, Min = 0});

                            CharacterSec:Toggle({Name = "Anti fall", Flag = "AntiFall"});
                            CharacterSec:Toggle({Name = "Anti traps", Flag = "NoBear"});
                            CharacterSec:Toggle({Name = "Infinite stamina", Flag = "InfiniteStamina"});
                        end;
                    end;

                    do --// Hitmarkers
                        local Hitmarkers = MiscTab:NewSection({Name = "Hitmarkers", Side = "Right"}); do 
                            Hitmarkers:Toggle({Name = "Enabled", Flag = "CustomHitSounds"});

                            local HitmarkerOptions = {};
                            local Total = 0;
                            for Index, Value in next, HitmarkerSounds do
                                Total = Total + 1;
                                HitmarkerOptions[Index] = Index;
                            end;

                            Hitmarkers:Dropdown({Max = Total, Name = "Sound", Flag = "HeadshotSound", Options = HitmarkerOptions, Callback = function()
                                if Library.Flags.CustomHitSounds.Value then 
                                    ReplicatedStorage.Shared.Assets.Sounds.HitmarkerSound.SoundId = HitmarkerSounds[Library.Flags.HeadshotSound.Value]
                                    ReplicatedStorage.Shared.Assets.Sounds.HitmarkerSound.Volume = Library.Flags.HitmarkerVolume.Value 
                                end
                            end});
   
                            Hitmarkers:Slider({Name = "Volume", Flag = "HitmarkerVolume", Min = 0, Max = 100, AllowDecimals = 10, Callback = function()
                                ReplicatedStorage.Shared.Assets.Sounds.HitmarkerSound.Volume = Library.Flags.HitmarkerVolume.Value 
                            end})
                        end;
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    if GameName == "Blackout" then 
        local Window = Library:NewWindow({TabAmount = 6, Name = "Derek Lippe ; 449 Stanford Road Wells Maine 04090 USA ; Contact @ 1+207-251-6033", Size = UDim2.new(0, 600, 0, 800)}); do 
            do --// Tabs
                do --// Combat tab
                    local CombatTab = Window:NewTab({Name = "Combat"}); 
    
                    do --// Combat section
                        local AimbotSection = CombatTab:NewSection({Name = "Aimbot", Side = "Left"}); do 

                            AimbotSection:Toggle({Name = "Enabled", Flag = "SilentAim", Risky = true}); do
                                AimbotSection:Keybind({Mode = "Hold", Name = "Aimbot", Flag = "Aimbot"});
                                AimbotSection:Toggle({Name = "Visible check", Flag = "VisibleCheck"});
                                AimbotSection:Toggle({Name = "Include AI", Flag = "IncludeAi"});
                                AimbotSection:Toggle({Name = "Kill aura", Flag = "KillAura"});
                                AimbotSection:Toggle({Name = "Magic bullet", Flag = "MagicBullet"})
                                AimbotSection:Slider({Flag = "MaxDistance", Name = "Max distance", Suffix = "s", Min = 0, Max = 1200, Default = 500});
                                AimbotSection:Multidropdown({Max = 3,Flag = "TargettedBones", Name = "Targets", Options = {"Head", "Thorax", "Legs"}, Default = {"Head"}});
                                AimbotSection:Dropdown({Name = "Mode", Flag = "AimMode", Options = {"Aimbot", "Silent Aim"}});
                                AimbotSection:Slider({Name = "Curving X", Flag = "CurveX", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Curving Y", Flag = "CurveY", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Humanization Scale", Flag = "HumanizationScale", Min = 0, Max = 2, AllowDecimals = 10});
                                AimbotSection:Slider({Name = "Minimum Health", Flag = "MinimumHealth", Min = 0, Max = 100, Default = 1});


                                Window:Tooltip({
                                    Parent = Library.Flags.SilentAim,
                                    Text = "Silent Aim - Redirects bullets at target |  Aimbot - Locks camera on targets"
                                });


                            end;
                        end;
                        local Visuals = CombatTab:NewSection({Name = "Visuals", Side = "Right"}); do
                            Visuals:Toggle({Name = "FOV circle", Flag = "EnableFOV", Callback = function()
                                Visuals.FOVCircle.Visible = Library.Flags.EnableFOV.Value;
                            end}):Colorpicker({Name = "FOV Color", Flag = "FOVColor", Default = Library.Theme.Accent, DefaultTrans = 0, Callback = function() 
                                Visuals.FOVCircle.UIStroke.Color = ColorSequence.new(Library.Flags["FOVColor"].Color);
                            end,})
    
                            Visuals:Toggle({Name = "FOV Effects", Flag = "FOVEffects", Callback = function()
                                if Library.Flags.FOVEffects.Value then 
                                    Visuals.FOVGradient.Enabled = true;
                                else 
                                    Visuals.FOVGradient.Enabled = false;
                                    Visuals.FOVCircle.UIStroke.Color = Library.Flags.FOVColor.Color;
                                end;
                            end})
                            Visuals:Toggle({Name = "Rainbow FOV", Flag = "RainbowFOV"})
                            Visuals:Toggle({Name = "Dynamic FOV", Flag = "DynamicFOV"});
                            Visuals:Dropdown({Name = "FOV Position", Flag = "FOVPosition", Max = 2, Options = {"Camera", "Mouse"}});
                            Visuals:Slider({Flag = "Radius", Name = "Radius", Min = 0, Max = 700, Default = 500, Suffix = "px", Callback = function()
                                Visuals.FOVCircle.Size = UDim2.new(0, Library.Flags["Radius"].Value, 0, Library.Flags["Radius"].Value)
                            end});
                            local StyleOptions = {};
                            for Index, Value in next, EasingStyle do 
                                table.insert(StyleOptions, Index)
                            end
    
                            Visuals:Dropdown({Default = "Sine", Max = #StyleOptions, Name = "Style", Flag = "EasingStyle", Options = StyleOptions})
                            Visuals:Dropdown({Default = "In", Max = 3, Name = "Direction", Options = {"In", "Out", "InOut"}, Flag = "EasingDirection"});
                
                            Visuals:Slider({Default = 2, Name = "Rotation speed", Min = 0, Max = 50, Flag = "RotationSpeed"})
                            Visuals:Slider({Default = 2, Name = "Transition duration", Min = 1, Max = 50, Flag = "TransitionDuration", Callback = function()
                                OriginalTransitionDuration = Library.Flags.TransitionDuration.Value;
                            end});
                        end;

                        local Mods = CombatTab:NewSection({Name = "Mods", Side = "Right"}); do 
                            Mods:Toggle({Name = "Instant Hit", Flag = "InstantBullet"});
                            Mods:Toggle({Name = "Extend reach", Flag = "ExtendReach"});
                            Mods:Toggle({Name = "Remove Recoil", Flag = "RemoveRecoil", Callback = function()
                                GameFramework:ApplyModifications();
                            end});
                            --Mods:Toggle({Name = "Fast reload", Flag = "FastReload"}):Keybind({Name = "Quick reload", Flag = "Quick Reload", Mode = "Hold", Callback = function()
                            --    if Library.Flags.FastReload.Value and Library.Flags["Quick Reload"].Value then 
                            --        ReplicatedStorage.GunStorage.Events.Reload:InvokeServer()
                            --        ReplicatedStorage.GunStorage.Events.Action:FireServer("BarrelOpen")
                            --    end;
                            --end});

                            --Window:Tooltip({Parent = Library.Flags.FastReload, Text = "Hold keybind down when toggled on to reload without animations, much faster too."});
                        end;
                        --[[local Exclusions = CombatTab:NewSection({Name = "Exclusions", Side = "Right"}); do 
                            Exclusions:Multidropdown({Options = {Client.Name}, Name = "Friendlies", Flag = "FriendliesDropdown", Callback = function()
                                Library:UpdateFriendliesDropdown();
                            end});
    
                            Library:UpdateFriendliesDropdown();
                        end;]]

                    end;
                end;
                
                do --// Visuals tab 
                    local VisualsTab = Window:NewTab({Name = "Visuals", IncludeNested = true});
                    
                    do --// ESP Tab
                        local ESPTab = VisualsTab:Add({Name = "ESP"});
                        do --// Players section
                            local Players = ESPTab:NewSection({Name = "Main", Side = "Left"}); do 
                                
                                Players:Toggle({Name = "Enabled", Flag = "EnemiesEnabled"});
                                
                                Players:Toggle({Name = "Include AI",Flag = "IncludeAiESP"});

                                
                                --Players:Toggle({Name = "Tracers", Flag = "ESPTracers"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Tracer color", Flag = "TracerColor"});
                                Players:Toggle({Name = "Bounding box", Flag = "ESPBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Box color", Flag = "BoxColor"});
                                local HB_Toggle = Players:Toggle({Name = "Healthbar", Flag = "ESPHealthBar"});
    
                                HB_Toggle:Colorpicker({Name = "Healthbar color 1",Flag = "HealthBarColorHigher", Default = Color3.fromRGB(0, 255, 0)})
                                HB_Toggle:Colorpicker({Name = "Healthbar color 2",Flag = "HealthBarColorLower"});
                                
                                local AB_Toggle = Players:Toggle({Name = "Ammobar", Flag = "ESPAmmoBar"});

                                AB_Toggle:Colorpicker({Name = "Ammobar color 1",Flag = "AmmobarColorHigher", Default = Color3.fromRGB(0, 65, 255)});
                                AB_Toggle:Colorpicker({Name = "Ammobar color 2",Flag = "AmmobarColorLower"});

                                Players:Toggle({Name = "Name", Flag = "ESPName"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Name Color", Flag = "NameColor"});
                                Players:Toggle({ Name = "Distance", Flag = "ESPDistance"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Distance Color", Flag = "DistanceColor"});
                                
                                Players:Toggle({Name = "Weapon", Flag = "ESPWeapon"}):Colorpicker({Default = Color3.fromRGB(255,255,255), Name = "Weapon Color", Flag = "WeaponColor"});
                                Players:Toggle({Name = "Weapon Image", Flag = "ESPWeaponImage"})
                                Players:Toggle({Name = "Health", Flag = "ESPHealth"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "HealthColor", Name = "Health Color"});
                                Players:Toggle({Name = "Gear", Flag = "ESPInventory"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Inventory Color", Flag = "InventoryColor"})

                                local ChamsToggle = Players:Toggle({Name = "Chams", Flag = "Adornments"});

                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 0, 0), Flag = "VisibleColor", DefaultTrans = 0.5, Name = "Visible Color"});
                                ChamsToggle:Colorpicker({Default = Color3.fromRGB(255, 255, 255), Flag = "OccludedColor", DefaultTrans = 0, Name = "Occluded Color"});

                                Players:Toggle({Name = "Glow chams", Flag = "GlowChams"})

                                local HighlightsToggle = Players:Toggle({Name = "Highlights", Flag = "Highlights"}); 

                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "FillColor", Name = "Fill Color", DefaultTrans = 0});
                                HighlightsToggle:Colorpicker({Default = Color3.fromRGB(0, 0, 0), Flag = "OutlineColor", Name = "Outline Color", DefaultTrans = 0});
                                
                                local FlagToggle = Players:Toggle({Name = "Flags", Flag = "ESPFlags"})

                                local Options = {};
                                local Max = 0
                                for Index, Value in next, ESPConstructor.Flags do
                                    Max = Max + 1;
                                    Options[Index] = Index;
                                    FlagToggle:Colorpicker({Name = Value.Flag .. " Color", Default = Color3.fromRGB(255, 255, 255), Flag = "Flag"..Value.Flag})
                                end;

                                Players:Multidropdown({Name = "Flags", Flag = "Flags", Options = Options, Max = Max});
                                Library.Flags.Flags:Update()
                                local Relations = Players:Toggle({Name = "Use relation colors", Flag = "UseRelationColors"})
                                Relations:Colorpicker({Name = "Target color", Flag = "TargetColor", Default = Color3.fromRGB(255, 0, 0)});
                                Relations:Colorpicker({Name = "Friendly color", Flag = "FriendlyColor", Default = Color3.fromRGB(0, 255, 0)});
                                Players:Toggle({Name = "Highlight visible", Flag = "HighlightVisible"}):Colorpicker({Name = "Visible color", Flag = "HighlightVisibleColor", Default = Color3.fromRGB(253, 152, 2)});
                            end;
                        end;
    
                        
                        do --// Custom Object 
                            local WorldESPSection = ESPTab:NewSection({Name = "World", Side = "Right"}); do
                                WorldESPSection:Toggle({Name = "Airdrops", Flag = "ESPAirdrops"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Airdrops Color", Flag = "AirdropsColor"}); 
                                WorldESPSection:Toggle({Name = "Terminals", Flag = "ESPTerminals"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Terminals Color", Flag = "TerminalsColor"}); 
                                WorldESPSection:Toggle({Name = "Bodybags", Flag = "ESPBodybags"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Bodybags Color", Flag = "BodybagsColor"});
                                --AmmoBox
                                WorldESPSection:Toggle({Name = "Ammo boxes", Flag = "ESPAmmoBox"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Ammoboxes Color", Flag = "AmmoBoxColor"});
                                WorldESPSection:Toggle({Name = "Traders", Flag = "ESPTraders"}):Colorpicker({Default = Color3.fromRGB(255, 255, 255), Name = "Traders Color", Flag = "TradersColor"});
                                WorldESPSection:Toggle({Name = "Fade transparency", Flag = "FadeObjects"})
                                WorldESPSection:Slider({Name = "Max Distance", Flag = "CustomDistance", Min = 0, Max = 1000, Suffix = "s"});
                            end; 
                        end;

                        do --// Offscreen Arrows 
                            local Offscreen = ESPTab:NewSection({Name = "Offscreen", Side = "Right"}); do 
                                Offscreen:Toggle({Name = "Enabled", Flag = "ESPOffscreen"}):Colorpicker({Name = "Offscreen Color", Flag = "OffscreenColor", Default = Color3.fromRGB(255, 255, 255)});
                                Offscreen:Toggle({Name = "Dynamic sizing", Flag = "DynamicArrows"})
                                Offscreen:Slider({Name = "Width", Flag = "ArrowWidth", Min = 10, Max = 40, Suffix = "px", Default = 17});
                                Offscreen:Slider({Name = "Height", Flag = "ArrowHeight", Min = 11, Max = 40, Suffix = "px", Default = 16});
                                Offscreen:Slider({Name = "Radius", Flag = "OOVFOV", Max = 900, Min = 50, Default = 300, Suffix = "Â°"});
                                Offscreen:Dropdown({Name = "Arrow points", Flag = "ArrowPoints", Options = {"Three", "Four"}});
                            end;
                        end;

                        do --// Hazards
                            if IsStudio then
                                local Hazards = ESPTab:NewSection({Name = "Hazards", Side = "Left"}); do 
                                    local NadeToggle = Hazards:Toggle({Name = "Grenades", Flag = "ESPGrenades"})
                                    NadeToggle:Colorpicker({Name = "Grenade Lower", Default = Color3.fromRGB(255, 0, 0), Flag = "GrenadeLower"});
                                    NadeToggle:Colorpicker({Name = "Grenade Higher", Default = Color3.fromRGB(0, 255, 0), Flag = "GrenadeHigher"});

                                    Hazards:Toggle({Name = "Mines", Flag = "ESPMines"});
                                    Hazards:Toggle({Name = "Claymores", Flag = "ESPClaymores"});
                                end;
                            end;
                        end;

                    end;

                    do --// ESP Posiitons
                        local Options = VisualsTab:Add({Name = "ESP Options"});

                        do --// Element Positions section
                            local ElementPositions = Options:NewSection({Name = "Positions / Size", Side = "Right"}); do 
                                ElementPositions:Slider({Flag = "BoxHeight", Name = "Box height", Max = 10, Default = 5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Slider({Flag = "BoxWidth", Name = "Box width", Max = 10, Default = 3.5, Min = 0, AllowDecimals = 10});
                                ElementPositions:Dropdown({Flag = "BoxSize", Name = "Box size", Default = "Static", Options = {"Static", "Dynamic", "SizeDynamic"}});
                                ElementPositions:Dropdown({Flag = "BoxStyle", Name = "Box style", Default = "Box", Options = {"Box", "Corner"}});
                                ElementPositions:Dropdown({Flag = "UsernamePosition", Name = "Username", Default = "Top", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "DistancePosition", Name = "Distance", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "WeaponPosition", Name = "Weapon", Default = "Bottom", Options = {"Top", "Bottom"}});
                                ElementPositions:Dropdown({Flag = "HealthbarPosition", Name = "Healthbar", Default = "Left", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "AmmobarPosition", Name = "Ammobar", Default = "Bottom", Options = {"Left", "Right", "Bottom", "Top"}});
                                ElementPositions:Dropdown({Flag = "InventoryPosition", Name = "Inventory", Default = "Bottom", Options = {"Bottom", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerOrigin", Name = "Tracer origin", Default = "Bottom", Options = {"Bottom", "Center", "Top"}});
                                --ElementPositions:Dropdown({Flag = "TracerPosition", Name = "Tracer end", Default = "Bottom", Options = {"Bottom", "Center"}})
                            end;
                        end;
    
                        do --// Misc Options section
                            local MiscOptions = Options:NewSection({Name = "Misc", Side = "Left"}); do

                                MiscOptions:Toggle({Name = "Team check", Flag = "ESPTeamCheck"})
                                MiscOptions:Toggle({Name = "Show health only when damaged", Flag = "HealthWhenDamaged"})
                                MiscOptions:Toggle({Name = "Animations", Flag = "Animations"});
                                MiscOptions:Toggle({Name = "Limit distance", Flag = "LimitDistance"});
                                MiscOptions:Slider({Name = "Render distance", Flag = "RenderDistance", Default = 1000, Min = 0, Max = 10000, Suffix = "s"});
                                MiscOptions:Slider({Name = "Fadeout time", Flag = "FadeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "s"});
                                MiscOptions:Slider({Name = "Transition time", Flag = "AnimChangeTime", Max = 1, Min = 0, AllowDecimals = 10, Suffix = "m"});
                                MiscOptions:Multidropdown({Name = "Selected animations", Flag = "SelectedAnimations", Max = 3, Options = {"Ammo", "Health", "Death/Respawn Fade"}});
                                
                                MiscOptions:Slider({Name = "Delay", Flag = "MSDelay", Min = 0, Max = 1000, Default = 0});

                            end;
                        end;
                        Library:AddFontSection(Options, "Left")
                    end;

                    do --// World tab 
                        local WorldTab = Library:AddStandardWorldTab(VisualsTab)

                        
                    end;

                    do --// Local tab 
                        local LocalTab = VisualsTab:Add({Name = "Local"}); 

                        do --// Sections 
                            local TracersSec = LocalTab:NewSection({Name = "Bullet tracers", Side = "Right"}); do 
                                TracersSec:Toggle({Name = "Enabled", Flag = "Tracers"}):Colorpicker({Name = "Tracer color", Flag = "TracerColor", Default = Color3.fromRGB(255, 255, 255)})
                                TracersSec:Slider({Name = "Lifetime", Flag = "LifeTime", Max = 5, Min = 1, Default = 3, Suffix = "s"});
                                TracersSec:Dropdown({Name = "Type", Flag = "TracerMode", Default = "Beam", Options = {"Beam", "Line"}, Max = 2});
                            end;
    
                            local CameraSec = LocalTab:NewSection({Name = "Camera", Side = "Left"}); do 
                                CameraSec:Toggle({Name = "Remove bobbing", Flag = "RemoveBobbing", Callback = function()
                                    if Library.Flags.RemoveBobbing and Library.Flags.RemoveBobbing.Value then 
                                        Client.Character.ScreenShake.Disabled = true;
                                    else 
                                        Client.Character.ScreenShake.Disabled = false;
                                    end;
                                end});
                            end;

                            local SelfHighlight = LocalTab:NewSection({Name = "Self chams", Side = "Left"}); do
                                local Toggle = SelfHighlight:Toggle({Name = "Enabled", Flag = "SelfHighlight"})
                                Toggle:Colorpicker({Name = "Fill Color", Flag = "SelfFillColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                                Toggle:Colorpicker({Name = "Outline Color", Flag = "SelfOutlineColor", DefaultTrans = 0.2, Default = Library.Theme.Accent})
                            end;
                        end;
                    end;

                    VisualsTab:SetTab("ESP");
                end;

                do --// Misc tab 
                    local MiscTab = Window:NewTab({Name = "Miscellaneous"});
    
                    do --// Misc sections 
                        local CharacterSec = MiscTab:NewSection({Name = "Character", Side = "Left"}); do 
                            CharacterSec:Toggle({Name = "Infinite Stamina", Flag = "InfiniteStamina"});
                            CharacterSec:Toggle({Name = "Anti fall", Flag = "AntiFall"})
                            CharacterSec:Toggle({Name = "Speedhack", Flag = "IncreaseSpeed"});
                            CharacterSec:Slider({Name = "Speed", AllowDecimals = 10, Flag = "SpeedValue", Max = 100, Min = 0});
                            CharacterSec:Toggle({Name = "Fly", Flag = "CanFly"}):Keybind({Name = "Fly", Flag = "Fly"})
                            CharacterSec:Slider({Min = 1, Max = 100, Flag = "FlySpeed", Name = "Speed"})

                            CharacterSec:Toggle({Name = "Jumphack", Flag = "IncreaseJump"});
                            CharacterSec:Slider({Name = "Power", AllowDecimals = 10, Flag = "JumpValue", Max = 200, Min = 0});
    
                            --CharacterSec:Toggle({Name = "Bunny hop", Flag = "BHop"});
                        end;
                    end;

                    do --// Minigames 
                        local Minigames = MiscTab:NewSection({Name = "Minigames", Side = "Right"}); do 
                            Minigames:Toggle({Name = "Prevent fails", Flag = "InfiniteLockpick"})
                            Minigames:Toggle({Name = "Instant lockpick", Flag = "InstantLockpick"})
                            Window:Tooltip({Parent = Library.Flags.InstantLockpick, Text = "Enter a lockpickable crate, then exit to instantly pick it."})
                        end;
                    end;

                    do --// Interaction 
                        local Interaction = MiscTab:NewSection({Name = "Interaction"}); do 
                            Interaction:Toggle({Name = "Instant interact", Flag = "InstantInteract"});
                            Interaction:Toggle({Name = "Auto loot cash", Flag = "InstantLootCash"});
                            Interaction:Toggle({Name = "Auto loot cards", Flag = "InstantLootCards"});
                            Interaction:Toggle({Name = "Auto loot valuables", Flag = "InstantLootValuables"});
                        end;
                    end;

                    do --// Teleports 
                        --[[local Teleports = MiscTab:NewSection({Name = "Teleports", Side = "Left"}); do 
                            local Locations = GameFramework.Locations;
                            local List = Teleports:List({Name = "Location", Flag = "Location", Options = {""}}) 
                            List:RemoveOption("")

                            for Index, Value in next, Locations do 
                                List:AddOption(Index);
                            end;
                            Teleports:Button({Name = "Teleport", Callback = function()
                                if Library.Flags.Location.Value then 
                                    Client.Character.HumanoidRootPart.CFrame = CFrame.new(Locations[Library.Flags.Location.Value])
                                end;
                            end})
                        end;]]
                    end;
                end;
    
                do --// Settings tab
                    Library:AddSettingsTab(Window);
                end;

                do --// Playerlist tab
                    local Playerlist = Window:NewTab({Name = "Relations", IsPlayerlist = true});
                end;
            end;
        end;
        Window:SetTab("Combat");
    end;

    Library:AddPreview("Visuals")

    Library:ToggleMenu();
    Library:ToggleMenu();
end;

do --// Init

    do --// Run functions
        if GameName == "Project Delta" then
            GameFramework:New();
        end;

        GameFramework:RunCharacterFunctions();
    end;

    do --// Cache images
        if GameName ~= "Fallen" then 
            local CacheTick         = tick();
            local HasFinishedArrows = false;
            local HasFinishedIcons  = false;

            Library:Notify("Caching Images...", 1);
            do --// Main caching
                do --// Weapon icons
                    task.spawn(function()
                        local Total = 0;
                        for Index, Value in next, WeaponIcons do 
                            task.spawn(function()
                                Total = Total + 1
                                local New = Instance.new("ImageLabel", Visuals.ESPContainer);
                                New.Image = Value;
                                task.wait(3);
                                New:Destroy();
                            end);
                        end;
                        Library:Notify("Caching Weapon Icons...", 1);
                        task.wait(3);
                        Library:Notify("Finished Caching Weapon Icons..");
                        HasFinishedIcons = true;
                    end);
                end;

                do --// Arrows
                    Library:Notify("Caching ESP arrow images...");
                    task.spawn(function()
                        local Arrow = Instance.new("ImageLabel", Visuals.ESPContainer); do 
                            Arrow.Image = "http://www.roblox.com/asset/?id=282305485";
                            task.wait(3);
                            Arrow.Image = "http://www.roblox.com/asset/?id=15000587389";

                            task.wait(3);
                            Arrow:Destroy();
                            HasFinishedArrows = true;
                        end;

                        Library:Notify("Finished caching ESP arrow images");
                    end);  
                end;
            end;

            do  --// Summary
                task.spawn(function()
                    repeat task.wait() until HasFinishedArrows and HasFinishedIcons
                    local Time = math.floor(tick() - CacheTick);
                    Library:Notify("Image cache has finished")
                end);
            end;
        end;
    end;

    do --// Modules
        if getgenv and getgenv() then 
            getgenv().Ethereal = UsableModules;
        end;
    end;

    do --// Obfuscation check/welcome
        if LPH_OBFUSCATED then 
            Library:Notify("Welcome, "..LRM_LinkedDiscordID);
        else 
            Library:Notify("You are in developer mode.", 2, Color3.fromRGB(255, 0, 0))
        end;
    end;

    --// Finished!
end;